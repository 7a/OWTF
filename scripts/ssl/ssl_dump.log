Mon Jun  2 16:18:03 2014 START
Testing www.microsoft.com:443
`-DEF:: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-DEF:: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.55.57.27
`-DEF:: verify error:num=20:unable to get local issuer certificate
`-DEF:: verify return:1
`-DEF:: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.55.57.27
`-DEF:: verify error:num=27:certificate not trusted
`-DEF:: verify return:1
`-DEF:: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.55.57.27
`-DEF:: verify error:num=21:unable to verify the first certificate
`-DEF:: verify return:1
`-DEF:: CONNECTED(00000003)
`-DEF:: ---
`-DEF:: Certificate chain
`-DEF::  0 s:/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.55.57.27
`-DEF::    i:/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-DEF:: ---
`-DEF:: Server certificate
`-DEF:: -----BEGIN CERTIFICATE-----
`-DEF:: MIIC+TCCAmICFQmrw3AtkXsrIcKYWsxUfCyqknK+nTANBgkqhkiG9w0BAQUFADCB
`-DEF:: hzELMAkGA1UEBhMCUk8xDjAMBgNVBAgMBVRpbWlzMRIwEAYDVQQHDAlUaW1pc29h
`-DEF:: cmExDjAMBgNVBAoMBU9XQVNQMQwwCgYDVQQLDANTZWMxDzANBgNVBAMMBkNvcm5l
`-DEF:: bDElMCMGCSqGSIb3DQEJARYWY29ybmVsLnB1bmdhQGdtYWlsLmNvbTAeFw0xNDA1
`-DEF:: MjgyMDQ0NDFaFw0xNTA1MjgyMDQ0NDFaMGoxCzAJBgNVBAYTAklOMQswCQYDVQQI
`-DEF:: EwJBUDESMBAGA1UEBxMJMTI3LjAuMC4xMQ0wCwYDVQQKEwRPV1RGMRYwFAYDVQQL
`-DEF:: Ew1JbmJvdW5kLVByb3h5MRMwEQYDVQQDFAoqLjU1LjU3LjI3MIIBIjANBgkqhkiG
`-DEF:: 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtLaccGVems5INql02CTyqPVJG2osnlYcMzIn
`-DEF:: uykJeS+ERb2hB1aNWzV4yk0ppreirQygJ5mKHIQAaC0O2JQKLF+KBKWc2FTDF3rl
`-DEF:: +SAgvN/YX4sRHew0CgI7LkNvPNsRpAaBiheAAgZ2GITv4EXz4ArMUCD3inrzQxkg
`-DEF:: YSzCMxxk29ECrbni0r0T1e/OD5JDa2cOstpEcQsRjZDs8xb5t752qc9M+zoxZy+Z
`-DEF:: PJ+lHXsY6fijB1h1qFvaNmlJq874UVNyBkPqPNKiHy9jHzbc3iFreM1DM+HKn5S/
`-DEF:: 4gmkygLIE/aem9MfMH/V0t6orA3F6z2oAKjs2bWXfuxpKGPMMQIDAQABMA0GCSqG
`-DEF:: SIb3DQEBBQUAA4GBACmLebYbSHAtEhdStx5+Qk6XUNtgrOGdoPyK7MLmeAhziEQD
`-DEF:: cps35fRbhHjFmUd4Q+gnfvt6Tchr0LEIGozDeTaPHb19v/k7ddWfatEhH+Jd11rn
`-DEF:: J5VTxEv5PGKpGD8JZ0XBySSzUzqAcaSabURiOzTooEC0MWESslvoVG9oN1gE
`-DEF:: -----END CERTIFICATE-----
`-DEF:: subject=/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.55.57.27
`-DEF:: issuer=/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-DEF:: ---
`-DEF:: No client certificate CA names sent
`-DEF:: ---
`-DEF:: SSL handshake has read 1087 bytes and written 647 bytes
`-DEF:: ---
`-DEF:: New, TLSv1/SSLv3, Cipher is AES256-GCM-SHA384

------------------------------------------------------------------------
Mon Jun  2 16:18:03 2014 ADH-AES128-GCM-SHA256
`-TLS1:ADH-AES128-GCM-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-TLS1:ADH-AES128-GCM-SHA256: 140391612835496:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:ADH-AES128-GCM-SHA256: CONNECTED(00000003)
`-TLS1:ADH-AES128-GCM-SHA256: ---
`-TLS1:ADH-AES128-GCM-SHA256: no peer certificate available
`-TLS1:ADH-AES128-GCM-SHA256: ---
`-TLS1:ADH-AES128-GCM-SHA256: No client certificate CA names sent
`-TLS1:ADH-AES128-GCM-SHA256: ---
`-TLS1:ADH-AES128-GCM-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:ADH-AES128-GCM-SHA256: ---
`-TLS1:ADH-AES128-GCM-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:ADH-AES128-GCM-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:ADH-AES128-GCM-SHA256: Compression: NONE
`-TLS1:ADH-AES128-GCM-SHA256: Expansion: NONE
`-TLS1:ADH-AES128-GCM-SHA256: SSL-Session:
`-TLS1:ADH-AES128-GCM-SHA256:     Protocol  : TLSv1
`-TLS1:ADH-AES128-GCM-SHA256:     Cipher    : 0000
`-TLS1:ADH-AES128-GCM-SHA256:     Session-ID: 
`-TLS1:ADH-AES128-GCM-SHA256:     Session-ID-ctx: 
`-TLS1:ADH-AES128-GCM-SHA256:     Master-Key: 
`-TLS1:ADH-AES128-GCM-SHA256:     Key-Arg   : None
`-TLS1:ADH-AES128-GCM-SHA256:     PSK identity: None
`-TLS1:ADH-AES128-GCM-SHA256:     PSK identity hint: None
`-TLS1:ADH-AES128-GCM-SHA256:     SRP username: None
`-TLS1:ADH-AES128-GCM-SHA256:     Start Time: 1401715084
`-TLS1:ADH-AES128-GCM-SHA256:     Timeout   : 7200 (sec)
`-TLS1:ADH-AES128-GCM-SHA256:     Verify return code: 0 (ok)
`-TLS1:ADH-AES128-GCM-SHA256: ---

`-SSLv2:ADH-AES128-GCM-SHA256: unknown option -ssl2
`-SSLv2:ADH-AES128-GCM-SHA256: usage: s_client args
`-SSLv2:ADH-AES128-GCM-SHA256: 
`-SSLv2:ADH-AES128-GCM-SHA256:  -host host     - use -connect instead
`-SSLv2:ADH-AES128-GCM-SHA256:  -port port     - use -connect instead
`-SSLv2:ADH-AES128-GCM-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ADH-AES128-GCM-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:ADH-AES128-GCM-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ADH-AES128-GCM-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ADH-AES128-GCM-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ADH-AES128-GCM-SHA256:                  not specified but cert file is.
`-SSLv2:ADH-AES128-GCM-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ADH-AES128-GCM-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:ADH-AES128-GCM-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ADH-AES128-GCM-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ADH-AES128-GCM-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ADH-AES128-GCM-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ADH-AES128-GCM-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:ADH-AES128-GCM-SHA256:  -debug        - extra output
`-SSLv2:ADH-AES128-GCM-SHA256:  -msg          - Show protocol messages
`-SSLv2:ADH-AES128-GCM-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:ADH-AES128-GCM-SHA256:  -state        - print the 'ssl' states
`-SSLv2:ADH-AES128-GCM-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:ADH-AES128-GCM-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ADH-AES128-GCM-SHA256:  -quiet        - no s_client output
`-SSLv2:ADH-AES128-GCM-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ADH-AES128-GCM-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ADH-AES128-GCM-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:ADH-AES128-GCM-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ADH-AES128-GCM-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ADH-AES128-GCM-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:ADH-AES128-GCM-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ADH-AES128-GCM-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ADH-AES128-GCM-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ADH-AES128-GCM-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:ADH-AES128-GCM-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:ADH-AES128-GCM-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:ADH-AES128-GCM-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:ADH-AES128-GCM-SHA256:  -tls1         - just use TLSv1
`-SSLv2:ADH-AES128-GCM-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:ADH-AES128-GCM-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:ADH-AES128-GCM-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ADH-AES128-GCM-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ADH-AES128-GCM-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ADH-AES128-GCM-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ADH-AES128-GCM-SHA256:                  command to see what is available
`-SSLv2:ADH-AES128-GCM-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ADH-AES128-GCM-SHA256:                  for those protocols that support it, where
`-SSLv2:ADH-AES128-GCM-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ADH-AES128-GCM-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ADH-AES128-GCM-SHA256:                  are supported.
`-SSLv2:ADH-AES128-GCM-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:ADH-AES128-GCM-SHA256:  -rand file:file:...
`-SSLv2:ADH-AES128-GCM-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:ADH-AES128-GCM-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:ADH-AES128-GCM-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ADH-AES128-GCM-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ADH-AES128-GCM-SHA256:  -status           - request certificate status from server
`-SSLv2:ADH-AES128-GCM-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ADH-AES128-GCM-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ADH-AES128-GCM-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ADH-AES128-GCM-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ADH-AES128-GCM-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:ADH-AES128-GCM-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ADH-AES128-GCM-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-SSLv3:ADH-AES128-GCM-SHA256: 140263022880424:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:ADH-AES128-GCM-SHA256: CONNECTED(00000003)
`-SSLv3:ADH-AES128-GCM-SHA256: ---
`-SSLv3:ADH-AES128-GCM-SHA256: no peer certificate available
`-SSLv3:ADH-AES128-GCM-SHA256: ---
`-SSLv3:ADH-AES128-GCM-SHA256: No client certificate CA names sent
`-SSLv3:ADH-AES128-GCM-SHA256: ---
`-SSLv3:ADH-AES128-GCM-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:ADH-AES128-GCM-SHA256: ---
`-SSLv3:ADH-AES128-GCM-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:ADH-AES128-GCM-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:ADH-AES128-GCM-SHA256: Compression: NONE
`-SSLv3:ADH-AES128-GCM-SHA256: Expansion: NONE
`-SSLv3:ADH-AES128-GCM-SHA256: SSL-Session:
`-SSLv3:ADH-AES128-GCM-SHA256:     Protocol  : SSLv3
`-SSLv3:ADH-AES128-GCM-SHA256:     Cipher    : 0000
`-SSLv3:ADH-AES128-GCM-SHA256:     Session-ID: 
`-SSLv3:ADH-AES128-GCM-SHA256:     Session-ID-ctx: 
`-SSLv3:ADH-AES128-GCM-SHA256:     Master-Key: 
`-SSLv3:ADH-AES128-GCM-SHA256:     Key-Arg   : None
`-SSLv3:ADH-AES128-GCM-SHA256:     PSK identity: None
`-SSLv3:ADH-AES128-GCM-SHA256:     PSK identity hint: None
`-SSLv3:ADH-AES128-GCM-SHA256:     SRP username: None
`-SSLv3:ADH-AES128-GCM-SHA256:     Start Time: 1401715084
`-SSLv3:ADH-AES128-GCM-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:ADH-AES128-GCM-SHA256:     Verify return code: 0 (ok)
`-SSLv3:ADH-AES128-GCM-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:04 2014 ADH-AES128-SHA
`-TLS1:ADH-AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-TLS1:ADH-AES128-SHA: 140185378395816:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ADH-AES128-SHA: 140185378395816:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ADH-AES128-SHA: CONNECTED(00000003)
`-TLS1:ADH-AES128-SHA: ---
`-TLS1:ADH-AES128-SHA: no peer certificate available
`-TLS1:ADH-AES128-SHA: ---
`-TLS1:ADH-AES128-SHA: No client certificate CA names sent
`-TLS1:ADH-AES128-SHA: ---
`-TLS1:ADH-AES128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ADH-AES128-SHA: ---
`-TLS1:ADH-AES128-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:ADH-AES128-SHA: Secure Renegotiation IS NOT supported
`-TLS1:ADH-AES128-SHA: Compression: NONE
`-TLS1:ADH-AES128-SHA: Expansion: NONE
`-TLS1:ADH-AES128-SHA: SSL-Session:
`-TLS1:ADH-AES128-SHA:     Protocol  : TLSv1
`-TLS1:ADH-AES128-SHA:     Cipher    : 0000
`-TLS1:ADH-AES128-SHA:     Session-ID: 
`-TLS1:ADH-AES128-SHA:     Session-ID-ctx: 
`-TLS1:ADH-AES128-SHA:     Master-Key: 
`-TLS1:ADH-AES128-SHA:     Key-Arg   : None
`-TLS1:ADH-AES128-SHA:     PSK identity: None
`-TLS1:ADH-AES128-SHA:     PSK identity hint: None
`-TLS1:ADH-AES128-SHA:     SRP username: None
`-TLS1:ADH-AES128-SHA:     Start Time: 1401715085
`-TLS1:ADH-AES128-SHA:     Timeout   : 7200 (sec)
`-TLS1:ADH-AES128-SHA:     Verify return code: 0 (ok)
`-TLS1:ADH-AES128-SHA: ---

`-SSLv2:ADH-AES128-SHA: unknown option -ssl2
`-SSLv2:ADH-AES128-SHA: usage: s_client args
`-SSLv2:ADH-AES128-SHA: 
`-SSLv2:ADH-AES128-SHA:  -host host     - use -connect instead
`-SSLv2:ADH-AES128-SHA:  -port port     - use -connect instead
`-SSLv2:ADH-AES128-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ADH-AES128-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:ADH-AES128-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ADH-AES128-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ADH-AES128-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ADH-AES128-SHA:                  not specified but cert file is.
`-SSLv2:ADH-AES128-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ADH-AES128-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:ADH-AES128-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ADH-AES128-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ADH-AES128-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ADH-AES128-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ADH-AES128-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:ADH-AES128-SHA:  -debug        - extra output
`-SSLv2:ADH-AES128-SHA:  -msg          - Show protocol messages
`-SSLv2:ADH-AES128-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:ADH-AES128-SHA:  -state        - print the 'ssl' states
`-SSLv2:ADH-AES128-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:ADH-AES128-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ADH-AES128-SHA:  -quiet        - no s_client output
`-SSLv2:ADH-AES128-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ADH-AES128-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ADH-AES128-SHA:  -psk_identity arg - PSK identity
`-SSLv2:ADH-AES128-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ADH-AES128-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ADH-AES128-SHA:  -srppass arg      - password for 'user'
`-SSLv2:ADH-AES128-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ADH-AES128-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ADH-AES128-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ADH-AES128-SHA:  -ssl2         - just use SSLv2
`-SSLv2:ADH-AES128-SHA:  -ssl3         - just use SSLv3
`-SSLv2:ADH-AES128-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:ADH-AES128-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:ADH-AES128-SHA:  -tls1         - just use TLSv1
`-SSLv2:ADH-AES128-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:ADH-AES128-SHA:  -mtu          - set the link layer MTU
`-SSLv2:ADH-AES128-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ADH-AES128-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ADH-AES128-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ADH-AES128-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ADH-AES128-SHA:                  command to see what is available
`-SSLv2:ADH-AES128-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ADH-AES128-SHA:                  for those protocols that support it, where
`-SSLv2:ADH-AES128-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ADH-AES128-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ADH-AES128-SHA:                  are supported.
`-SSLv2:ADH-AES128-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:ADH-AES128-SHA:  -rand file:file:...
`-SSLv2:ADH-AES128-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:ADH-AES128-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:ADH-AES128-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ADH-AES128-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ADH-AES128-SHA:  -status           - request certificate status from server
`-SSLv2:ADH-AES128-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ADH-AES128-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ADH-AES128-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ADH-AES128-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ADH-AES128-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:ADH-AES128-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ADH-AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-SSLv3:ADH-AES128-SHA: 139804022199976:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ADH-AES128-SHA: 139804022199976:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ADH-AES128-SHA: CONNECTED(00000003)
`-SSLv3:ADH-AES128-SHA: ---
`-SSLv3:ADH-AES128-SHA: no peer certificate available
`-SSLv3:ADH-AES128-SHA: ---
`-SSLv3:ADH-AES128-SHA: No client certificate CA names sent
`-SSLv3:ADH-AES128-SHA: ---
`-SSLv3:ADH-AES128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ADH-AES128-SHA: ---
`-SSLv3:ADH-AES128-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:ADH-AES128-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:ADH-AES128-SHA: Compression: NONE
`-SSLv3:ADH-AES128-SHA: Expansion: NONE
`-SSLv3:ADH-AES128-SHA: SSL-Session:
`-SSLv3:ADH-AES128-SHA:     Protocol  : SSLv3
`-SSLv3:ADH-AES128-SHA:     Cipher    : 0000
`-SSLv3:ADH-AES128-SHA:     Session-ID: 
`-SSLv3:ADH-AES128-SHA:     Session-ID-ctx: 
`-SSLv3:ADH-AES128-SHA:     Master-Key: 
`-SSLv3:ADH-AES128-SHA:     Key-Arg   : None
`-SSLv3:ADH-AES128-SHA:     PSK identity: None
`-SSLv3:ADH-AES128-SHA:     PSK identity hint: None
`-SSLv3:ADH-AES128-SHA:     SRP username: None
`-SSLv3:ADH-AES128-SHA:     Start Time: 1401715086
`-SSLv3:ADH-AES128-SHA:     Timeout   : 7200 (sec)
`-SSLv3:ADH-AES128-SHA:     Verify return code: 0 (ok)
`-SSLv3:ADH-AES128-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:06 2014 ADH-AES128-SHA256
`-TLS1:ADH-AES128-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-TLS1:ADH-AES128-SHA256: 139763375920808:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:ADH-AES128-SHA256: CONNECTED(00000003)
`-TLS1:ADH-AES128-SHA256: ---
`-TLS1:ADH-AES128-SHA256: no peer certificate available
`-TLS1:ADH-AES128-SHA256: ---
`-TLS1:ADH-AES128-SHA256: No client certificate CA names sent
`-TLS1:ADH-AES128-SHA256: ---
`-TLS1:ADH-AES128-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:ADH-AES128-SHA256: ---
`-TLS1:ADH-AES128-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:ADH-AES128-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:ADH-AES128-SHA256: Compression: NONE
`-TLS1:ADH-AES128-SHA256: Expansion: NONE
`-TLS1:ADH-AES128-SHA256: SSL-Session:
`-TLS1:ADH-AES128-SHA256:     Protocol  : TLSv1
`-TLS1:ADH-AES128-SHA256:     Cipher    : 0000
`-TLS1:ADH-AES128-SHA256:     Session-ID: 
`-TLS1:ADH-AES128-SHA256:     Session-ID-ctx: 
`-TLS1:ADH-AES128-SHA256:     Master-Key: 
`-TLS1:ADH-AES128-SHA256:     Key-Arg   : None
`-TLS1:ADH-AES128-SHA256:     PSK identity: None
`-TLS1:ADH-AES128-SHA256:     PSK identity hint: None
`-TLS1:ADH-AES128-SHA256:     SRP username: None
`-TLS1:ADH-AES128-SHA256:     Start Time: 1401715086
`-TLS1:ADH-AES128-SHA256:     Timeout   : 7200 (sec)
`-TLS1:ADH-AES128-SHA256:     Verify return code: 0 (ok)
`-TLS1:ADH-AES128-SHA256: ---

`-SSLv2:ADH-AES128-SHA256: unknown option -ssl2
`-SSLv2:ADH-AES128-SHA256: usage: s_client args
`-SSLv2:ADH-AES128-SHA256: 
`-SSLv2:ADH-AES128-SHA256:  -host host     - use -connect instead
`-SSLv2:ADH-AES128-SHA256:  -port port     - use -connect instead
`-SSLv2:ADH-AES128-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ADH-AES128-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:ADH-AES128-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ADH-AES128-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ADH-AES128-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ADH-AES128-SHA256:                  not specified but cert file is.
`-SSLv2:ADH-AES128-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ADH-AES128-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:ADH-AES128-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ADH-AES128-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ADH-AES128-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ADH-AES128-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ADH-AES128-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:ADH-AES128-SHA256:  -debug        - extra output
`-SSLv2:ADH-AES128-SHA256:  -msg          - Show protocol messages
`-SSLv2:ADH-AES128-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:ADH-AES128-SHA256:  -state        - print the 'ssl' states
`-SSLv2:ADH-AES128-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:ADH-AES128-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ADH-AES128-SHA256:  -quiet        - no s_client output
`-SSLv2:ADH-AES128-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ADH-AES128-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ADH-AES128-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:ADH-AES128-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ADH-AES128-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ADH-AES128-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:ADH-AES128-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ADH-AES128-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ADH-AES128-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ADH-AES128-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:ADH-AES128-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:ADH-AES128-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:ADH-AES128-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:ADH-AES128-SHA256:  -tls1         - just use TLSv1
`-SSLv2:ADH-AES128-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:ADH-AES128-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:ADH-AES128-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ADH-AES128-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ADH-AES128-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ADH-AES128-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ADH-AES128-SHA256:                  command to see what is available
`-SSLv2:ADH-AES128-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ADH-AES128-SHA256:                  for those protocols that support it, where
`-SSLv2:ADH-AES128-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ADH-AES128-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ADH-AES128-SHA256:                  are supported.
`-SSLv2:ADH-AES128-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:ADH-AES128-SHA256:  -rand file:file:...
`-SSLv2:ADH-AES128-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:ADH-AES128-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:ADH-AES128-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ADH-AES128-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ADH-AES128-SHA256:  -status           - request certificate status from server
`-SSLv2:ADH-AES128-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ADH-AES128-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ADH-AES128-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ADH-AES128-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ADH-AES128-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:ADH-AES128-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ADH-AES128-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-SSLv3:ADH-AES128-SHA256: 139667078162088:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:ADH-AES128-SHA256: CONNECTED(00000003)
`-SSLv3:ADH-AES128-SHA256: ---
`-SSLv3:ADH-AES128-SHA256: no peer certificate available
`-SSLv3:ADH-AES128-SHA256: ---
`-SSLv3:ADH-AES128-SHA256: No client certificate CA names sent
`-SSLv3:ADH-AES128-SHA256: ---
`-SSLv3:ADH-AES128-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:ADH-AES128-SHA256: ---
`-SSLv3:ADH-AES128-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:ADH-AES128-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:ADH-AES128-SHA256: Compression: NONE
`-SSLv3:ADH-AES128-SHA256: Expansion: NONE
`-SSLv3:ADH-AES128-SHA256: SSL-Session:
`-SSLv3:ADH-AES128-SHA256:     Protocol  : SSLv3
`-SSLv3:ADH-AES128-SHA256:     Cipher    : 0000
`-SSLv3:ADH-AES128-SHA256:     Session-ID: 
`-SSLv3:ADH-AES128-SHA256:     Session-ID-ctx: 
`-SSLv3:ADH-AES128-SHA256:     Master-Key: 
`-SSLv3:ADH-AES128-SHA256:     Key-Arg   : None
`-SSLv3:ADH-AES128-SHA256:     PSK identity: None
`-SSLv3:ADH-AES128-SHA256:     PSK identity hint: None
`-SSLv3:ADH-AES128-SHA256:     SRP username: None
`-SSLv3:ADH-AES128-SHA256:     Start Time: 1401715087
`-SSLv3:ADH-AES128-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:ADH-AES128-SHA256:     Verify return code: 0 (ok)
`-SSLv3:ADH-AES128-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:07 2014 ADH-AES256-GCM-SHA384
`-TLS1:ADH-AES256-GCM-SHA384: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-TLS1:ADH-AES256-GCM-SHA384: 139978347198120:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:ADH-AES256-GCM-SHA384: CONNECTED(00000003)
`-TLS1:ADH-AES256-GCM-SHA384: ---
`-TLS1:ADH-AES256-GCM-SHA384: no peer certificate available
`-TLS1:ADH-AES256-GCM-SHA384: ---
`-TLS1:ADH-AES256-GCM-SHA384: No client certificate CA names sent
`-TLS1:ADH-AES256-GCM-SHA384: ---
`-TLS1:ADH-AES256-GCM-SHA384: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:ADH-AES256-GCM-SHA384: ---
`-TLS1:ADH-AES256-GCM-SHA384: New, (NONE), Cipher is (NONE)
`-TLS1:ADH-AES256-GCM-SHA384: Secure Renegotiation IS NOT supported
`-TLS1:ADH-AES256-GCM-SHA384: Compression: NONE
`-TLS1:ADH-AES256-GCM-SHA384: Expansion: NONE
`-TLS1:ADH-AES256-GCM-SHA384: SSL-Session:
`-TLS1:ADH-AES256-GCM-SHA384:     Protocol  : TLSv1
`-TLS1:ADH-AES256-GCM-SHA384:     Cipher    : 0000
`-TLS1:ADH-AES256-GCM-SHA384:     Session-ID: 
`-TLS1:ADH-AES256-GCM-SHA384:     Session-ID-ctx: 
`-TLS1:ADH-AES256-GCM-SHA384:     Master-Key: 
`-TLS1:ADH-AES256-GCM-SHA384:     Key-Arg   : None
`-TLS1:ADH-AES256-GCM-SHA384:     PSK identity: None
`-TLS1:ADH-AES256-GCM-SHA384:     PSK identity hint: None
`-TLS1:ADH-AES256-GCM-SHA384:     SRP username: None
`-TLS1:ADH-AES256-GCM-SHA384:     Start Time: 1401715087
`-TLS1:ADH-AES256-GCM-SHA384:     Timeout   : 7200 (sec)
`-TLS1:ADH-AES256-GCM-SHA384:     Verify return code: 0 (ok)
`-TLS1:ADH-AES256-GCM-SHA384: ---

`-SSLv2:ADH-AES256-GCM-SHA384: unknown option -ssl2
`-SSLv2:ADH-AES256-GCM-SHA384: usage: s_client args
`-SSLv2:ADH-AES256-GCM-SHA384: 
`-SSLv2:ADH-AES256-GCM-SHA384:  -host host     - use -connect instead
`-SSLv2:ADH-AES256-GCM-SHA384:  -port port     - use -connect instead
`-SSLv2:ADH-AES256-GCM-SHA384:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ADH-AES256-GCM-SHA384:  -verify arg   - turn on peer certificate verification
`-SSLv2:ADH-AES256-GCM-SHA384:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ADH-AES256-GCM-SHA384:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ADH-AES256-GCM-SHA384:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ADH-AES256-GCM-SHA384:                  not specified but cert file is.
`-SSLv2:ADH-AES256-GCM-SHA384:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ADH-AES256-GCM-SHA384:  -pass arg     - private key file pass phrase source
`-SSLv2:ADH-AES256-GCM-SHA384:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ADH-AES256-GCM-SHA384:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ADH-AES256-GCM-SHA384:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ADH-AES256-GCM-SHA384:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ADH-AES256-GCM-SHA384:  -showcerts    - show all certificates in the chain
`-SSLv2:ADH-AES256-GCM-SHA384:  -debug        - extra output
`-SSLv2:ADH-AES256-GCM-SHA384:  -msg          - Show protocol messages
`-SSLv2:ADH-AES256-GCM-SHA384:  -nbio_test    - more ssl protocol testing
`-SSLv2:ADH-AES256-GCM-SHA384:  -state        - print the 'ssl' states
`-SSLv2:ADH-AES256-GCM-SHA384:  -nbio         - Run with non-blocking IO
`-SSLv2:ADH-AES256-GCM-SHA384:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ADH-AES256-GCM-SHA384:  -quiet        - no s_client output
`-SSLv2:ADH-AES256-GCM-SHA384:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ADH-AES256-GCM-SHA384:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ADH-AES256-GCM-SHA384:  -psk_identity arg - PSK identity
`-SSLv2:ADH-AES256-GCM-SHA384:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ADH-AES256-GCM-SHA384:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ADH-AES256-GCM-SHA384:  -srppass arg      - password for 'user'
`-SSLv2:ADH-AES256-GCM-SHA384:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ADH-AES256-GCM-SHA384:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ADH-AES256-GCM-SHA384:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ADH-AES256-GCM-SHA384:  -ssl2         - just use SSLv2
`-SSLv2:ADH-AES256-GCM-SHA384:  -ssl3         - just use SSLv3
`-SSLv2:ADH-AES256-GCM-SHA384:  -tls1_2       - just use TLSv1.2
`-SSLv2:ADH-AES256-GCM-SHA384:  -tls1_1       - just use TLSv1.1
`-SSLv2:ADH-AES256-GCM-SHA384:  -tls1         - just use TLSv1
`-SSLv2:ADH-AES256-GCM-SHA384:  -dtls1        - just use DTLSv1
`-SSLv2:ADH-AES256-GCM-SHA384:  -mtu          - set the link layer MTU
`-SSLv2:ADH-AES256-GCM-SHA384:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ADH-AES256-GCM-SHA384:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ADH-AES256-GCM-SHA384:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ADH-AES256-GCM-SHA384:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ADH-AES256-GCM-SHA384:                  command to see what is available
`-SSLv2:ADH-AES256-GCM-SHA384:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ADH-AES256-GCM-SHA384:                  for those protocols that support it, where
`-SSLv2:ADH-AES256-GCM-SHA384:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ADH-AES256-GCM-SHA384:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ADH-AES256-GCM-SHA384:                  are supported.
`-SSLv2:ADH-AES256-GCM-SHA384:  -engine id    - Initialise and use the specified engine
`-SSLv2:ADH-AES256-GCM-SHA384:  -rand file:file:...
`-SSLv2:ADH-AES256-GCM-SHA384:  -sess_out arg - file to write SSL session to
`-SSLv2:ADH-AES256-GCM-SHA384:  -sess_in arg  - file to read SSL session from
`-SSLv2:ADH-AES256-GCM-SHA384:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ADH-AES256-GCM-SHA384:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ADH-AES256-GCM-SHA384:  -status           - request certificate status from server
`-SSLv2:ADH-AES256-GCM-SHA384:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ADH-AES256-GCM-SHA384:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ADH-AES256-GCM-SHA384:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ADH-AES256-GCM-SHA384:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ADH-AES256-GCM-SHA384:  -keymatexport label   - Export keying material using label
`-SSLv2:ADH-AES256-GCM-SHA384:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ADH-AES256-GCM-SHA384: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-SSLv3:ADH-AES256-GCM-SHA384: 140664667657896:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:ADH-AES256-GCM-SHA384: CONNECTED(00000003)
`-SSLv3:ADH-AES256-GCM-SHA384: ---
`-SSLv3:ADH-AES256-GCM-SHA384: no peer certificate available
`-SSLv3:ADH-AES256-GCM-SHA384: ---
`-SSLv3:ADH-AES256-GCM-SHA384: No client certificate CA names sent
`-SSLv3:ADH-AES256-GCM-SHA384: ---
`-SSLv3:ADH-AES256-GCM-SHA384: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:ADH-AES256-GCM-SHA384: ---
`-SSLv3:ADH-AES256-GCM-SHA384: New, (NONE), Cipher is (NONE)
`-SSLv3:ADH-AES256-GCM-SHA384: Secure Renegotiation IS NOT supported
`-SSLv3:ADH-AES256-GCM-SHA384: Compression: NONE
`-SSLv3:ADH-AES256-GCM-SHA384: Expansion: NONE
`-SSLv3:ADH-AES256-GCM-SHA384: SSL-Session:
`-SSLv3:ADH-AES256-GCM-SHA384:     Protocol  : SSLv3
`-SSLv3:ADH-AES256-GCM-SHA384:     Cipher    : 0000
`-SSLv3:ADH-AES256-GCM-SHA384:     Session-ID: 
`-SSLv3:ADH-AES256-GCM-SHA384:     Session-ID-ctx: 
`-SSLv3:ADH-AES256-GCM-SHA384:     Master-Key: 
`-SSLv3:ADH-AES256-GCM-SHA384:     Key-Arg   : None
`-SSLv3:ADH-AES256-GCM-SHA384:     PSK identity: None
`-SSLv3:ADH-AES256-GCM-SHA384:     PSK identity hint: None
`-SSLv3:ADH-AES256-GCM-SHA384:     SRP username: None
`-SSLv3:ADH-AES256-GCM-SHA384:     Start Time: 1401715088
`-SSLv3:ADH-AES256-GCM-SHA384:     Timeout   : 7200 (sec)
`-SSLv3:ADH-AES256-GCM-SHA384:     Verify return code: 0 (ok)
`-SSLv3:ADH-AES256-GCM-SHA384: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:08 2014 ADH-AES256-SHA
`-TLS1:ADH-AES256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-TLS1:ADH-AES256-SHA: 140401895663272:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ADH-AES256-SHA: 140401895663272:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ADH-AES256-SHA: CONNECTED(00000003)
`-TLS1:ADH-AES256-SHA: ---
`-TLS1:ADH-AES256-SHA: no peer certificate available
`-TLS1:ADH-AES256-SHA: ---
`-TLS1:ADH-AES256-SHA: No client certificate CA names sent
`-TLS1:ADH-AES256-SHA: ---
`-TLS1:ADH-AES256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ADH-AES256-SHA: ---
`-TLS1:ADH-AES256-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:ADH-AES256-SHA: Secure Renegotiation IS NOT supported
`-TLS1:ADH-AES256-SHA: Compression: NONE
`-TLS1:ADH-AES256-SHA: Expansion: NONE
`-TLS1:ADH-AES256-SHA: SSL-Session:
`-TLS1:ADH-AES256-SHA:     Protocol  : TLSv1
`-TLS1:ADH-AES256-SHA:     Cipher    : 0000
`-TLS1:ADH-AES256-SHA:     Session-ID: 
`-TLS1:ADH-AES256-SHA:     Session-ID-ctx: 
`-TLS1:ADH-AES256-SHA:     Master-Key: 
`-TLS1:ADH-AES256-SHA:     Key-Arg   : None
`-TLS1:ADH-AES256-SHA:     PSK identity: None
`-TLS1:ADH-AES256-SHA:     PSK identity hint: None
`-TLS1:ADH-AES256-SHA:     SRP username: None
`-TLS1:ADH-AES256-SHA:     Start Time: 1401715089
`-TLS1:ADH-AES256-SHA:     Timeout   : 7200 (sec)
`-TLS1:ADH-AES256-SHA:     Verify return code: 0 (ok)
`-TLS1:ADH-AES256-SHA: ---

`-SSLv2:ADH-AES256-SHA: unknown option -ssl2
`-SSLv2:ADH-AES256-SHA: usage: s_client args
`-SSLv2:ADH-AES256-SHA: 
`-SSLv2:ADH-AES256-SHA:  -host host     - use -connect instead
`-SSLv2:ADH-AES256-SHA:  -port port     - use -connect instead
`-SSLv2:ADH-AES256-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ADH-AES256-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:ADH-AES256-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ADH-AES256-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ADH-AES256-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ADH-AES256-SHA:                  not specified but cert file is.
`-SSLv2:ADH-AES256-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ADH-AES256-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:ADH-AES256-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ADH-AES256-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ADH-AES256-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ADH-AES256-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ADH-AES256-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:ADH-AES256-SHA:  -debug        - extra output
`-SSLv2:ADH-AES256-SHA:  -msg          - Show protocol messages
`-SSLv2:ADH-AES256-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:ADH-AES256-SHA:  -state        - print the 'ssl' states
`-SSLv2:ADH-AES256-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:ADH-AES256-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ADH-AES256-SHA:  -quiet        - no s_client output
`-SSLv2:ADH-AES256-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ADH-AES256-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ADH-AES256-SHA:  -psk_identity arg - PSK identity
`-SSLv2:ADH-AES256-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ADH-AES256-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ADH-AES256-SHA:  -srppass arg      - password for 'user'
`-SSLv2:ADH-AES256-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ADH-AES256-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ADH-AES256-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ADH-AES256-SHA:  -ssl2         - just use SSLv2
`-SSLv2:ADH-AES256-SHA:  -ssl3         - just use SSLv3
`-SSLv2:ADH-AES256-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:ADH-AES256-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:ADH-AES256-SHA:  -tls1         - just use TLSv1
`-SSLv2:ADH-AES256-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:ADH-AES256-SHA:  -mtu          - set the link layer MTU
`-SSLv2:ADH-AES256-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ADH-AES256-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ADH-AES256-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ADH-AES256-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ADH-AES256-SHA:                  command to see what is available
`-SSLv2:ADH-AES256-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ADH-AES256-SHA:                  for those protocols that support it, where
`-SSLv2:ADH-AES256-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ADH-AES256-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ADH-AES256-SHA:                  are supported.
`-SSLv2:ADH-AES256-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:ADH-AES256-SHA:  -rand file:file:...
`-SSLv2:ADH-AES256-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:ADH-AES256-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:ADH-AES256-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ADH-AES256-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ADH-AES256-SHA:  -status           - request certificate status from server
`-SSLv2:ADH-AES256-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ADH-AES256-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ADH-AES256-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ADH-AES256-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ADH-AES256-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:ADH-AES256-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ADH-AES256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-SSLv3:ADH-AES256-SHA: 140030450386600:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ADH-AES256-SHA: 140030450386600:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ADH-AES256-SHA: CONNECTED(00000003)
`-SSLv3:ADH-AES256-SHA: ---
`-SSLv3:ADH-AES256-SHA: no peer certificate available
`-SSLv3:ADH-AES256-SHA: ---
`-SSLv3:ADH-AES256-SHA: No client certificate CA names sent
`-SSLv3:ADH-AES256-SHA: ---
`-SSLv3:ADH-AES256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ADH-AES256-SHA: ---
`-SSLv3:ADH-AES256-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:ADH-AES256-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:ADH-AES256-SHA: Compression: NONE
`-SSLv3:ADH-AES256-SHA: Expansion: NONE
`-SSLv3:ADH-AES256-SHA: SSL-Session:
`-SSLv3:ADH-AES256-SHA:     Protocol  : SSLv3
`-SSLv3:ADH-AES256-SHA:     Cipher    : 0000
`-SSLv3:ADH-AES256-SHA:     Session-ID: 
`-SSLv3:ADH-AES256-SHA:     Session-ID-ctx: 
`-SSLv3:ADH-AES256-SHA:     Master-Key: 
`-SSLv3:ADH-AES256-SHA:     Key-Arg   : None
`-SSLv3:ADH-AES256-SHA:     PSK identity: None
`-SSLv3:ADH-AES256-SHA:     PSK identity hint: None
`-SSLv3:ADH-AES256-SHA:     SRP username: None
`-SSLv3:ADH-AES256-SHA:     Start Time: 1401715089
`-SSLv3:ADH-AES256-SHA:     Timeout   : 7200 (sec)
`-SSLv3:ADH-AES256-SHA:     Verify return code: 0 (ok)
`-SSLv3:ADH-AES256-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:09 2014 ADH-AES256-SHA256
`-TLS1:ADH-AES256-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-TLS1:ADH-AES256-SHA256: 140402918012584:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:ADH-AES256-SHA256: CONNECTED(00000003)
`-TLS1:ADH-AES256-SHA256: ---
`-TLS1:ADH-AES256-SHA256: no peer certificate available
`-TLS1:ADH-AES256-SHA256: ---
`-TLS1:ADH-AES256-SHA256: No client certificate CA names sent
`-TLS1:ADH-AES256-SHA256: ---
`-TLS1:ADH-AES256-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:ADH-AES256-SHA256: ---
`-TLS1:ADH-AES256-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:ADH-AES256-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:ADH-AES256-SHA256: Compression: NONE
`-TLS1:ADH-AES256-SHA256: Expansion: NONE
`-TLS1:ADH-AES256-SHA256: SSL-Session:
`-TLS1:ADH-AES256-SHA256:     Protocol  : TLSv1
`-TLS1:ADH-AES256-SHA256:     Cipher    : 0000
`-TLS1:ADH-AES256-SHA256:     Session-ID: 
`-TLS1:ADH-AES256-SHA256:     Session-ID-ctx: 
`-TLS1:ADH-AES256-SHA256:     Master-Key: 
`-TLS1:ADH-AES256-SHA256:     Key-Arg   : None
`-TLS1:ADH-AES256-SHA256:     PSK identity: None
`-TLS1:ADH-AES256-SHA256:     PSK identity hint: None
`-TLS1:ADH-AES256-SHA256:     SRP username: None
`-TLS1:ADH-AES256-SHA256:     Start Time: 1401715090
`-TLS1:ADH-AES256-SHA256:     Timeout   : 7200 (sec)
`-TLS1:ADH-AES256-SHA256:     Verify return code: 0 (ok)
`-TLS1:ADH-AES256-SHA256: ---

`-SSLv2:ADH-AES256-SHA256: unknown option -ssl2
`-SSLv2:ADH-AES256-SHA256: usage: s_client args
`-SSLv2:ADH-AES256-SHA256: 
`-SSLv2:ADH-AES256-SHA256:  -host host     - use -connect instead
`-SSLv2:ADH-AES256-SHA256:  -port port     - use -connect instead
`-SSLv2:ADH-AES256-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ADH-AES256-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:ADH-AES256-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ADH-AES256-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ADH-AES256-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ADH-AES256-SHA256:                  not specified but cert file is.
`-SSLv2:ADH-AES256-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ADH-AES256-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:ADH-AES256-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ADH-AES256-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ADH-AES256-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ADH-AES256-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ADH-AES256-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:ADH-AES256-SHA256:  -debug        - extra output
`-SSLv2:ADH-AES256-SHA256:  -msg          - Show protocol messages
`-SSLv2:ADH-AES256-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:ADH-AES256-SHA256:  -state        - print the 'ssl' states
`-SSLv2:ADH-AES256-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:ADH-AES256-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ADH-AES256-SHA256:  -quiet        - no s_client output
`-SSLv2:ADH-AES256-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ADH-AES256-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ADH-AES256-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:ADH-AES256-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ADH-AES256-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ADH-AES256-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:ADH-AES256-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ADH-AES256-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ADH-AES256-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ADH-AES256-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:ADH-AES256-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:ADH-AES256-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:ADH-AES256-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:ADH-AES256-SHA256:  -tls1         - just use TLSv1
`-SSLv2:ADH-AES256-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:ADH-AES256-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:ADH-AES256-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ADH-AES256-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ADH-AES256-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ADH-AES256-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ADH-AES256-SHA256:                  command to see what is available
`-SSLv2:ADH-AES256-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ADH-AES256-SHA256:                  for those protocols that support it, where
`-SSLv2:ADH-AES256-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ADH-AES256-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ADH-AES256-SHA256:                  are supported.
`-SSLv2:ADH-AES256-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:ADH-AES256-SHA256:  -rand file:file:...
`-SSLv2:ADH-AES256-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:ADH-AES256-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:ADH-AES256-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ADH-AES256-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ADH-AES256-SHA256:  -status           - request certificate status from server
`-SSLv2:ADH-AES256-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ADH-AES256-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ADH-AES256-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ADH-AES256-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ADH-AES256-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:ADH-AES256-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ADH-AES256-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-SSLv3:ADH-AES256-SHA256: 140105583339176:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:ADH-AES256-SHA256: CONNECTED(00000003)
`-SSLv3:ADH-AES256-SHA256: ---
`-SSLv3:ADH-AES256-SHA256: no peer certificate available
`-SSLv3:ADH-AES256-SHA256: ---
`-SSLv3:ADH-AES256-SHA256: No client certificate CA names sent
`-SSLv3:ADH-AES256-SHA256: ---
`-SSLv3:ADH-AES256-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:ADH-AES256-SHA256: ---
`-SSLv3:ADH-AES256-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:ADH-AES256-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:ADH-AES256-SHA256: Compression: NONE
`-SSLv3:ADH-AES256-SHA256: Expansion: NONE
`-SSLv3:ADH-AES256-SHA256: SSL-Session:
`-SSLv3:ADH-AES256-SHA256:     Protocol  : SSLv3
`-SSLv3:ADH-AES256-SHA256:     Cipher    : 0000
`-SSLv3:ADH-AES256-SHA256:     Session-ID: 
`-SSLv3:ADH-AES256-SHA256:     Session-ID-ctx: 
`-SSLv3:ADH-AES256-SHA256:     Master-Key: 
`-SSLv3:ADH-AES256-SHA256:     Key-Arg   : None
`-SSLv3:ADH-AES256-SHA256:     PSK identity: None
`-SSLv3:ADH-AES256-SHA256:     PSK identity hint: None
`-SSLv3:ADH-AES256-SHA256:     SRP username: None
`-SSLv3:ADH-AES256-SHA256:     Start Time: 1401715090
`-SSLv3:ADH-AES256-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:ADH-AES256-SHA256:     Verify return code: 0 (ok)
`-SSLv3:ADH-AES256-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:10 2014 ADH-CAMELLIA128-SHA
`-TLS1:ADH-CAMELLIA128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-TLS1:ADH-CAMELLIA128-SHA: 140647225480872:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ADH-CAMELLIA128-SHA: 140647225480872:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ADH-CAMELLIA128-SHA: CONNECTED(00000003)
`-TLS1:ADH-CAMELLIA128-SHA: ---
`-TLS1:ADH-CAMELLIA128-SHA: no peer certificate available
`-TLS1:ADH-CAMELLIA128-SHA: ---
`-TLS1:ADH-CAMELLIA128-SHA: No client certificate CA names sent
`-TLS1:ADH-CAMELLIA128-SHA: ---
`-TLS1:ADH-CAMELLIA128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ADH-CAMELLIA128-SHA: ---
`-TLS1:ADH-CAMELLIA128-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:ADH-CAMELLIA128-SHA: Secure Renegotiation IS NOT supported
`-TLS1:ADH-CAMELLIA128-SHA: Compression: NONE
`-TLS1:ADH-CAMELLIA128-SHA: Expansion: NONE
`-TLS1:ADH-CAMELLIA128-SHA: SSL-Session:
`-TLS1:ADH-CAMELLIA128-SHA:     Protocol  : TLSv1
`-TLS1:ADH-CAMELLIA128-SHA:     Cipher    : 0000
`-TLS1:ADH-CAMELLIA128-SHA:     Session-ID: 
`-TLS1:ADH-CAMELLIA128-SHA:     Session-ID-ctx: 
`-TLS1:ADH-CAMELLIA128-SHA:     Master-Key: 
`-TLS1:ADH-CAMELLIA128-SHA:     Key-Arg   : None
`-TLS1:ADH-CAMELLIA128-SHA:     PSK identity: None
`-TLS1:ADH-CAMELLIA128-SHA:     PSK identity hint: None
`-TLS1:ADH-CAMELLIA128-SHA:     SRP username: None
`-TLS1:ADH-CAMELLIA128-SHA:     Start Time: 1401715091
`-TLS1:ADH-CAMELLIA128-SHA:     Timeout   : 7200 (sec)
`-TLS1:ADH-CAMELLIA128-SHA:     Verify return code: 0 (ok)
`-TLS1:ADH-CAMELLIA128-SHA: ---

`-SSLv2:ADH-CAMELLIA128-SHA: unknown option -ssl2
`-SSLv2:ADH-CAMELLIA128-SHA: usage: s_client args
`-SSLv2:ADH-CAMELLIA128-SHA: 
`-SSLv2:ADH-CAMELLIA128-SHA:  -host host     - use -connect instead
`-SSLv2:ADH-CAMELLIA128-SHA:  -port port     - use -connect instead
`-SSLv2:ADH-CAMELLIA128-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ADH-CAMELLIA128-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:ADH-CAMELLIA128-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ADH-CAMELLIA128-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ADH-CAMELLIA128-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ADH-CAMELLIA128-SHA:                  not specified but cert file is.
`-SSLv2:ADH-CAMELLIA128-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ADH-CAMELLIA128-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:ADH-CAMELLIA128-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ADH-CAMELLIA128-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ADH-CAMELLIA128-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ADH-CAMELLIA128-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ADH-CAMELLIA128-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:ADH-CAMELLIA128-SHA:  -debug        - extra output
`-SSLv2:ADH-CAMELLIA128-SHA:  -msg          - Show protocol messages
`-SSLv2:ADH-CAMELLIA128-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:ADH-CAMELLIA128-SHA:  -state        - print the 'ssl' states
`-SSLv2:ADH-CAMELLIA128-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:ADH-CAMELLIA128-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ADH-CAMELLIA128-SHA:  -quiet        - no s_client output
`-SSLv2:ADH-CAMELLIA128-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ADH-CAMELLIA128-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ADH-CAMELLIA128-SHA:  -psk_identity arg - PSK identity
`-SSLv2:ADH-CAMELLIA128-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ADH-CAMELLIA128-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ADH-CAMELLIA128-SHA:  -srppass arg      - password for 'user'
`-SSLv2:ADH-CAMELLIA128-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ADH-CAMELLIA128-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ADH-CAMELLIA128-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ADH-CAMELLIA128-SHA:  -ssl2         - just use SSLv2
`-SSLv2:ADH-CAMELLIA128-SHA:  -ssl3         - just use SSLv3
`-SSLv2:ADH-CAMELLIA128-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:ADH-CAMELLIA128-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:ADH-CAMELLIA128-SHA:  -tls1         - just use TLSv1
`-SSLv2:ADH-CAMELLIA128-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:ADH-CAMELLIA128-SHA:  -mtu          - set the link layer MTU
`-SSLv2:ADH-CAMELLIA128-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ADH-CAMELLIA128-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ADH-CAMELLIA128-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ADH-CAMELLIA128-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ADH-CAMELLIA128-SHA:                  command to see what is available
`-SSLv2:ADH-CAMELLIA128-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ADH-CAMELLIA128-SHA:                  for those protocols that support it, where
`-SSLv2:ADH-CAMELLIA128-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ADH-CAMELLIA128-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ADH-CAMELLIA128-SHA:                  are supported.
`-SSLv2:ADH-CAMELLIA128-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:ADH-CAMELLIA128-SHA:  -rand file:file:...
`-SSLv2:ADH-CAMELLIA128-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:ADH-CAMELLIA128-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:ADH-CAMELLIA128-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ADH-CAMELLIA128-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ADH-CAMELLIA128-SHA:  -status           - request certificate status from server
`-SSLv2:ADH-CAMELLIA128-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ADH-CAMELLIA128-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ADH-CAMELLIA128-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ADH-CAMELLIA128-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ADH-CAMELLIA128-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:ADH-CAMELLIA128-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ADH-CAMELLIA128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-SSLv3:ADH-CAMELLIA128-SHA: 139972731623080:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ADH-CAMELLIA128-SHA: 139972731623080:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ADH-CAMELLIA128-SHA: CONNECTED(00000003)
`-SSLv3:ADH-CAMELLIA128-SHA: ---
`-SSLv3:ADH-CAMELLIA128-SHA: no peer certificate available
`-SSLv3:ADH-CAMELLIA128-SHA: ---
`-SSLv3:ADH-CAMELLIA128-SHA: No client certificate CA names sent
`-SSLv3:ADH-CAMELLIA128-SHA: ---
`-SSLv3:ADH-CAMELLIA128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ADH-CAMELLIA128-SHA: ---
`-SSLv3:ADH-CAMELLIA128-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:ADH-CAMELLIA128-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:ADH-CAMELLIA128-SHA: Compression: NONE
`-SSLv3:ADH-CAMELLIA128-SHA: Expansion: NONE
`-SSLv3:ADH-CAMELLIA128-SHA: SSL-Session:
`-SSLv3:ADH-CAMELLIA128-SHA:     Protocol  : SSLv3
`-SSLv3:ADH-CAMELLIA128-SHA:     Cipher    : 0000
`-SSLv3:ADH-CAMELLIA128-SHA:     Session-ID: 
`-SSLv3:ADH-CAMELLIA128-SHA:     Session-ID-ctx: 
`-SSLv3:ADH-CAMELLIA128-SHA:     Master-Key: 
`-SSLv3:ADH-CAMELLIA128-SHA:     Key-Arg   : None
`-SSLv3:ADH-CAMELLIA128-SHA:     PSK identity: None
`-SSLv3:ADH-CAMELLIA128-SHA:     PSK identity hint: None
`-SSLv3:ADH-CAMELLIA128-SHA:     SRP username: None
`-SSLv3:ADH-CAMELLIA128-SHA:     Start Time: 1401715091
`-SSLv3:ADH-CAMELLIA128-SHA:     Timeout   : 7200 (sec)
`-SSLv3:ADH-CAMELLIA128-SHA:     Verify return code: 0 (ok)
`-SSLv3:ADH-CAMELLIA128-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:11 2014 ADH-CAMELLIA256-SHA
`-TLS1:ADH-CAMELLIA256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-TLS1:ADH-CAMELLIA256-SHA: 139680900290216:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ADH-CAMELLIA256-SHA: 139680900290216:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ADH-CAMELLIA256-SHA: CONNECTED(00000003)
`-TLS1:ADH-CAMELLIA256-SHA: ---
`-TLS1:ADH-CAMELLIA256-SHA: no peer certificate available
`-TLS1:ADH-CAMELLIA256-SHA: ---
`-TLS1:ADH-CAMELLIA256-SHA: No client certificate CA names sent
`-TLS1:ADH-CAMELLIA256-SHA: ---
`-TLS1:ADH-CAMELLIA256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ADH-CAMELLIA256-SHA: ---
`-TLS1:ADH-CAMELLIA256-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:ADH-CAMELLIA256-SHA: Secure Renegotiation IS NOT supported
`-TLS1:ADH-CAMELLIA256-SHA: Compression: NONE
`-TLS1:ADH-CAMELLIA256-SHA: Expansion: NONE
`-TLS1:ADH-CAMELLIA256-SHA: SSL-Session:
`-TLS1:ADH-CAMELLIA256-SHA:     Protocol  : TLSv1
`-TLS1:ADH-CAMELLIA256-SHA:     Cipher    : 0000
`-TLS1:ADH-CAMELLIA256-SHA:     Session-ID: 
`-TLS1:ADH-CAMELLIA256-SHA:     Session-ID-ctx: 
`-TLS1:ADH-CAMELLIA256-SHA:     Master-Key: 
`-TLS1:ADH-CAMELLIA256-SHA:     Key-Arg   : None
`-TLS1:ADH-CAMELLIA256-SHA:     PSK identity: None
`-TLS1:ADH-CAMELLIA256-SHA:     PSK identity hint: None
`-TLS1:ADH-CAMELLIA256-SHA:     SRP username: None
`-TLS1:ADH-CAMELLIA256-SHA:     Start Time: 1401715092
`-TLS1:ADH-CAMELLIA256-SHA:     Timeout   : 7200 (sec)
`-TLS1:ADH-CAMELLIA256-SHA:     Verify return code: 0 (ok)
`-TLS1:ADH-CAMELLIA256-SHA: ---

`-SSLv2:ADH-CAMELLIA256-SHA: unknown option -ssl2
`-SSLv2:ADH-CAMELLIA256-SHA: usage: s_client args
`-SSLv2:ADH-CAMELLIA256-SHA: 
`-SSLv2:ADH-CAMELLIA256-SHA:  -host host     - use -connect instead
`-SSLv2:ADH-CAMELLIA256-SHA:  -port port     - use -connect instead
`-SSLv2:ADH-CAMELLIA256-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ADH-CAMELLIA256-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:ADH-CAMELLIA256-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ADH-CAMELLIA256-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ADH-CAMELLIA256-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ADH-CAMELLIA256-SHA:                  not specified but cert file is.
`-SSLv2:ADH-CAMELLIA256-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ADH-CAMELLIA256-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:ADH-CAMELLIA256-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ADH-CAMELLIA256-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ADH-CAMELLIA256-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ADH-CAMELLIA256-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ADH-CAMELLIA256-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:ADH-CAMELLIA256-SHA:  -debug        - extra output
`-SSLv2:ADH-CAMELLIA256-SHA:  -msg          - Show protocol messages
`-SSLv2:ADH-CAMELLIA256-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:ADH-CAMELLIA256-SHA:  -state        - print the 'ssl' states
`-SSLv2:ADH-CAMELLIA256-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:ADH-CAMELLIA256-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ADH-CAMELLIA256-SHA:  -quiet        - no s_client output
`-SSLv2:ADH-CAMELLIA256-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ADH-CAMELLIA256-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ADH-CAMELLIA256-SHA:  -psk_identity arg - PSK identity
`-SSLv2:ADH-CAMELLIA256-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ADH-CAMELLIA256-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ADH-CAMELLIA256-SHA:  -srppass arg      - password for 'user'
`-SSLv2:ADH-CAMELLIA256-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ADH-CAMELLIA256-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ADH-CAMELLIA256-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ADH-CAMELLIA256-SHA:  -ssl2         - just use SSLv2
`-SSLv2:ADH-CAMELLIA256-SHA:  -ssl3         - just use SSLv3
`-SSLv2:ADH-CAMELLIA256-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:ADH-CAMELLIA256-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:ADH-CAMELLIA256-SHA:  -tls1         - just use TLSv1
`-SSLv2:ADH-CAMELLIA256-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:ADH-CAMELLIA256-SHA:  -mtu          - set the link layer MTU
`-SSLv2:ADH-CAMELLIA256-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ADH-CAMELLIA256-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ADH-CAMELLIA256-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ADH-CAMELLIA256-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ADH-CAMELLIA256-SHA:                  command to see what is available
`-SSLv2:ADH-CAMELLIA256-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ADH-CAMELLIA256-SHA:                  for those protocols that support it, where
`-SSLv2:ADH-CAMELLIA256-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ADH-CAMELLIA256-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ADH-CAMELLIA256-SHA:                  are supported.
`-SSLv2:ADH-CAMELLIA256-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:ADH-CAMELLIA256-SHA:  -rand file:file:...
`-SSLv2:ADH-CAMELLIA256-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:ADH-CAMELLIA256-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:ADH-CAMELLIA256-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ADH-CAMELLIA256-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ADH-CAMELLIA256-SHA:  -status           - request certificate status from server
`-SSLv2:ADH-CAMELLIA256-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ADH-CAMELLIA256-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ADH-CAMELLIA256-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ADH-CAMELLIA256-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ADH-CAMELLIA256-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:ADH-CAMELLIA256-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ADH-CAMELLIA256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-SSLv3:ADH-CAMELLIA256-SHA: 139892696676008:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ADH-CAMELLIA256-SHA: 139892696676008:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ADH-CAMELLIA256-SHA: CONNECTED(00000003)
`-SSLv3:ADH-CAMELLIA256-SHA: ---
`-SSLv3:ADH-CAMELLIA256-SHA: no peer certificate available
`-SSLv3:ADH-CAMELLIA256-SHA: ---
`-SSLv3:ADH-CAMELLIA256-SHA: No client certificate CA names sent
`-SSLv3:ADH-CAMELLIA256-SHA: ---
`-SSLv3:ADH-CAMELLIA256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ADH-CAMELLIA256-SHA: ---
`-SSLv3:ADH-CAMELLIA256-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:ADH-CAMELLIA256-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:ADH-CAMELLIA256-SHA: Compression: NONE
`-SSLv3:ADH-CAMELLIA256-SHA: Expansion: NONE
`-SSLv3:ADH-CAMELLIA256-SHA: SSL-Session:
`-SSLv3:ADH-CAMELLIA256-SHA:     Protocol  : SSLv3
`-SSLv3:ADH-CAMELLIA256-SHA:     Cipher    : 0000
`-SSLv3:ADH-CAMELLIA256-SHA:     Session-ID: 
`-SSLv3:ADH-CAMELLIA256-SHA:     Session-ID-ctx: 
`-SSLv3:ADH-CAMELLIA256-SHA:     Master-Key: 
`-SSLv3:ADH-CAMELLIA256-SHA:     Key-Arg   : None
`-SSLv3:ADH-CAMELLIA256-SHA:     PSK identity: None
`-SSLv3:ADH-CAMELLIA256-SHA:     PSK identity hint: None
`-SSLv3:ADH-CAMELLIA256-SHA:     SRP username: None
`-SSLv3:ADH-CAMELLIA256-SHA:     Start Time: 1401715093
`-SSLv3:ADH-CAMELLIA256-SHA:     Timeout   : 7200 (sec)
`-SSLv3:ADH-CAMELLIA256-SHA:     Verify return code: 0 (ok)
`-SSLv3:ADH-CAMELLIA256-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:13 2014 ADH-DES-CBC-SHA
`-TLS1:ADH-DES-CBC-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-TLS1:ADH-DES-CBC-SHA: 140079667136168:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ADH-DES-CBC-SHA: 140079667136168:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ADH-DES-CBC-SHA: CONNECTED(00000003)
`-TLS1:ADH-DES-CBC-SHA: ---
`-TLS1:ADH-DES-CBC-SHA: no peer certificate available
`-TLS1:ADH-DES-CBC-SHA: ---
`-TLS1:ADH-DES-CBC-SHA: No client certificate CA names sent
`-TLS1:ADH-DES-CBC-SHA: ---
`-TLS1:ADH-DES-CBC-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ADH-DES-CBC-SHA: ---
`-TLS1:ADH-DES-CBC-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:ADH-DES-CBC-SHA: Secure Renegotiation IS NOT supported
`-TLS1:ADH-DES-CBC-SHA: Compression: NONE
`-TLS1:ADH-DES-CBC-SHA: Expansion: NONE
`-TLS1:ADH-DES-CBC-SHA: SSL-Session:
`-TLS1:ADH-DES-CBC-SHA:     Protocol  : TLSv1
`-TLS1:ADH-DES-CBC-SHA:     Cipher    : 0000
`-TLS1:ADH-DES-CBC-SHA:     Session-ID: 
`-TLS1:ADH-DES-CBC-SHA:     Session-ID-ctx: 
`-TLS1:ADH-DES-CBC-SHA:     Master-Key: 
`-TLS1:ADH-DES-CBC-SHA:     Key-Arg   : None
`-TLS1:ADH-DES-CBC-SHA:     PSK identity: None
`-TLS1:ADH-DES-CBC-SHA:     PSK identity hint: None
`-TLS1:ADH-DES-CBC-SHA:     SRP username: None
`-TLS1:ADH-DES-CBC-SHA:     Start Time: 1401715093
`-TLS1:ADH-DES-CBC-SHA:     Timeout   : 7200 (sec)
`-TLS1:ADH-DES-CBC-SHA:     Verify return code: 0 (ok)
`-TLS1:ADH-DES-CBC-SHA: ---

`-SSLv2:ADH-DES-CBC-SHA: unknown option -ssl2
`-SSLv2:ADH-DES-CBC-SHA: usage: s_client args
`-SSLv2:ADH-DES-CBC-SHA: 
`-SSLv2:ADH-DES-CBC-SHA:  -host host     - use -connect instead
`-SSLv2:ADH-DES-CBC-SHA:  -port port     - use -connect instead
`-SSLv2:ADH-DES-CBC-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ADH-DES-CBC-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:ADH-DES-CBC-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ADH-DES-CBC-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ADH-DES-CBC-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ADH-DES-CBC-SHA:                  not specified but cert file is.
`-SSLv2:ADH-DES-CBC-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ADH-DES-CBC-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:ADH-DES-CBC-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ADH-DES-CBC-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ADH-DES-CBC-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ADH-DES-CBC-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ADH-DES-CBC-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:ADH-DES-CBC-SHA:  -debug        - extra output
`-SSLv2:ADH-DES-CBC-SHA:  -msg          - Show protocol messages
`-SSLv2:ADH-DES-CBC-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:ADH-DES-CBC-SHA:  -state        - print the 'ssl' states
`-SSLv2:ADH-DES-CBC-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:ADH-DES-CBC-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ADH-DES-CBC-SHA:  -quiet        - no s_client output
`-SSLv2:ADH-DES-CBC-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ADH-DES-CBC-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ADH-DES-CBC-SHA:  -psk_identity arg - PSK identity
`-SSLv2:ADH-DES-CBC-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ADH-DES-CBC-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ADH-DES-CBC-SHA:  -srppass arg      - password for 'user'
`-SSLv2:ADH-DES-CBC-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ADH-DES-CBC-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ADH-DES-CBC-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ADH-DES-CBC-SHA:  -ssl2         - just use SSLv2
`-SSLv2:ADH-DES-CBC-SHA:  -ssl3         - just use SSLv3
`-SSLv2:ADH-DES-CBC-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:ADH-DES-CBC-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:ADH-DES-CBC-SHA:  -tls1         - just use TLSv1
`-SSLv2:ADH-DES-CBC-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:ADH-DES-CBC-SHA:  -mtu          - set the link layer MTU
`-SSLv2:ADH-DES-CBC-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ADH-DES-CBC-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ADH-DES-CBC-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ADH-DES-CBC-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ADH-DES-CBC-SHA:                  command to see what is available
`-SSLv2:ADH-DES-CBC-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ADH-DES-CBC-SHA:                  for those protocols that support it, where
`-SSLv2:ADH-DES-CBC-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ADH-DES-CBC-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ADH-DES-CBC-SHA:                  are supported.
`-SSLv2:ADH-DES-CBC-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:ADH-DES-CBC-SHA:  -rand file:file:...
`-SSLv2:ADH-DES-CBC-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:ADH-DES-CBC-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:ADH-DES-CBC-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ADH-DES-CBC-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ADH-DES-CBC-SHA:  -status           - request certificate status from server
`-SSLv2:ADH-DES-CBC-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ADH-DES-CBC-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ADH-DES-CBC-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ADH-DES-CBC-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ADH-DES-CBC-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:ADH-DES-CBC-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ADH-DES-CBC-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-SSLv3:ADH-DES-CBC-SHA: 139899118204584:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ADH-DES-CBC-SHA: 139899118204584:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ADH-DES-CBC-SHA: CONNECTED(00000003)
`-SSLv3:ADH-DES-CBC-SHA: ---
`-SSLv3:ADH-DES-CBC-SHA: no peer certificate available
`-SSLv3:ADH-DES-CBC-SHA: ---
`-SSLv3:ADH-DES-CBC-SHA: No client certificate CA names sent
`-SSLv3:ADH-DES-CBC-SHA: ---
`-SSLv3:ADH-DES-CBC-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ADH-DES-CBC-SHA: ---
`-SSLv3:ADH-DES-CBC-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:ADH-DES-CBC-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:ADH-DES-CBC-SHA: Compression: NONE
`-SSLv3:ADH-DES-CBC-SHA: Expansion: NONE
`-SSLv3:ADH-DES-CBC-SHA: SSL-Session:
`-SSLv3:ADH-DES-CBC-SHA:     Protocol  : SSLv3
`-SSLv3:ADH-DES-CBC-SHA:     Cipher    : 0000
`-SSLv3:ADH-DES-CBC-SHA:     Session-ID: 
`-SSLv3:ADH-DES-CBC-SHA:     Session-ID-ctx: 
`-SSLv3:ADH-DES-CBC-SHA:     Master-Key: 
`-SSLv3:ADH-DES-CBC-SHA:     Key-Arg   : None
`-SSLv3:ADH-DES-CBC-SHA:     PSK identity: None
`-SSLv3:ADH-DES-CBC-SHA:     PSK identity hint: None
`-SSLv3:ADH-DES-CBC-SHA:     SRP username: None
`-SSLv3:ADH-DES-CBC-SHA:     Start Time: 1401715094
`-SSLv3:ADH-DES-CBC-SHA:     Timeout   : 7200 (sec)
`-SSLv3:ADH-DES-CBC-SHA:     Verify return code: 0 (ok)
`-SSLv3:ADH-DES-CBC-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:14 2014 ADH-DES-CBC3-SHA
`-TLS1:ADH-DES-CBC3-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-TLS1:ADH-DES-CBC3-SHA: 140552729560744:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ADH-DES-CBC3-SHA: 140552729560744:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ADH-DES-CBC3-SHA: CONNECTED(00000003)
`-TLS1:ADH-DES-CBC3-SHA: ---
`-TLS1:ADH-DES-CBC3-SHA: no peer certificate available
`-TLS1:ADH-DES-CBC3-SHA: ---
`-TLS1:ADH-DES-CBC3-SHA: No client certificate CA names sent
`-TLS1:ADH-DES-CBC3-SHA: ---
`-TLS1:ADH-DES-CBC3-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ADH-DES-CBC3-SHA: ---
`-TLS1:ADH-DES-CBC3-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:ADH-DES-CBC3-SHA: Secure Renegotiation IS NOT supported
`-TLS1:ADH-DES-CBC3-SHA: Compression: NONE
`-TLS1:ADH-DES-CBC3-SHA: Expansion: NONE
`-TLS1:ADH-DES-CBC3-SHA: SSL-Session:
`-TLS1:ADH-DES-CBC3-SHA:     Protocol  : TLSv1
`-TLS1:ADH-DES-CBC3-SHA:     Cipher    : 0000
`-TLS1:ADH-DES-CBC3-SHA:     Session-ID: 
`-TLS1:ADH-DES-CBC3-SHA:     Session-ID-ctx: 
`-TLS1:ADH-DES-CBC3-SHA:     Master-Key: 
`-TLS1:ADH-DES-CBC3-SHA:     Key-Arg   : None
`-TLS1:ADH-DES-CBC3-SHA:     PSK identity: None
`-TLS1:ADH-DES-CBC3-SHA:     PSK identity hint: None
`-TLS1:ADH-DES-CBC3-SHA:     SRP username: None
`-TLS1:ADH-DES-CBC3-SHA:     Start Time: 1401715094
`-TLS1:ADH-DES-CBC3-SHA:     Timeout   : 7200 (sec)
`-TLS1:ADH-DES-CBC3-SHA:     Verify return code: 0 (ok)
`-TLS1:ADH-DES-CBC3-SHA: ---

`-SSLv2:ADH-DES-CBC3-SHA: unknown option -ssl2
`-SSLv2:ADH-DES-CBC3-SHA: usage: s_client args
`-SSLv2:ADH-DES-CBC3-SHA: 
`-SSLv2:ADH-DES-CBC3-SHA:  -host host     - use -connect instead
`-SSLv2:ADH-DES-CBC3-SHA:  -port port     - use -connect instead
`-SSLv2:ADH-DES-CBC3-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ADH-DES-CBC3-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:ADH-DES-CBC3-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ADH-DES-CBC3-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ADH-DES-CBC3-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ADH-DES-CBC3-SHA:                  not specified but cert file is.
`-SSLv2:ADH-DES-CBC3-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ADH-DES-CBC3-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:ADH-DES-CBC3-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ADH-DES-CBC3-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ADH-DES-CBC3-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ADH-DES-CBC3-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ADH-DES-CBC3-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:ADH-DES-CBC3-SHA:  -debug        - extra output
`-SSLv2:ADH-DES-CBC3-SHA:  -msg          - Show protocol messages
`-SSLv2:ADH-DES-CBC3-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:ADH-DES-CBC3-SHA:  -state        - print the 'ssl' states
`-SSLv2:ADH-DES-CBC3-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:ADH-DES-CBC3-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ADH-DES-CBC3-SHA:  -quiet        - no s_client output
`-SSLv2:ADH-DES-CBC3-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ADH-DES-CBC3-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ADH-DES-CBC3-SHA:  -psk_identity arg - PSK identity
`-SSLv2:ADH-DES-CBC3-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ADH-DES-CBC3-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ADH-DES-CBC3-SHA:  -srppass arg      - password for 'user'
`-SSLv2:ADH-DES-CBC3-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ADH-DES-CBC3-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ADH-DES-CBC3-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ADH-DES-CBC3-SHA:  -ssl2         - just use SSLv2
`-SSLv2:ADH-DES-CBC3-SHA:  -ssl3         - just use SSLv3
`-SSLv2:ADH-DES-CBC3-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:ADH-DES-CBC3-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:ADH-DES-CBC3-SHA:  -tls1         - just use TLSv1
`-SSLv2:ADH-DES-CBC3-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:ADH-DES-CBC3-SHA:  -mtu          - set the link layer MTU
`-SSLv2:ADH-DES-CBC3-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ADH-DES-CBC3-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ADH-DES-CBC3-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ADH-DES-CBC3-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ADH-DES-CBC3-SHA:                  command to see what is available
`-SSLv2:ADH-DES-CBC3-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ADH-DES-CBC3-SHA:                  for those protocols that support it, where
`-SSLv2:ADH-DES-CBC3-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ADH-DES-CBC3-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ADH-DES-CBC3-SHA:                  are supported.
`-SSLv2:ADH-DES-CBC3-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:ADH-DES-CBC3-SHA:  -rand file:file:...
`-SSLv2:ADH-DES-CBC3-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:ADH-DES-CBC3-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:ADH-DES-CBC3-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ADH-DES-CBC3-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ADH-DES-CBC3-SHA:  -status           - request certificate status from server
`-SSLv2:ADH-DES-CBC3-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ADH-DES-CBC3-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ADH-DES-CBC3-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ADH-DES-CBC3-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ADH-DES-CBC3-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:ADH-DES-CBC3-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ADH-DES-CBC3-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-SSLv3:ADH-DES-CBC3-SHA: 140692115379880:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ADH-DES-CBC3-SHA: 140692115379880:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ADH-DES-CBC3-SHA: CONNECTED(00000003)
`-SSLv3:ADH-DES-CBC3-SHA: ---
`-SSLv3:ADH-DES-CBC3-SHA: no peer certificate available
`-SSLv3:ADH-DES-CBC3-SHA: ---
`-SSLv3:ADH-DES-CBC3-SHA: No client certificate CA names sent
`-SSLv3:ADH-DES-CBC3-SHA: ---
`-SSLv3:ADH-DES-CBC3-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ADH-DES-CBC3-SHA: ---
`-SSLv3:ADH-DES-CBC3-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:ADH-DES-CBC3-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:ADH-DES-CBC3-SHA: Compression: NONE
`-SSLv3:ADH-DES-CBC3-SHA: Expansion: NONE
`-SSLv3:ADH-DES-CBC3-SHA: SSL-Session:
`-SSLv3:ADH-DES-CBC3-SHA:     Protocol  : SSLv3
`-SSLv3:ADH-DES-CBC3-SHA:     Cipher    : 0000
`-SSLv3:ADH-DES-CBC3-SHA:     Session-ID: 
`-SSLv3:ADH-DES-CBC3-SHA:     Session-ID-ctx: 
`-SSLv3:ADH-DES-CBC3-SHA:     Master-Key: 
`-SSLv3:ADH-DES-CBC3-SHA:     Key-Arg   : None
`-SSLv3:ADH-DES-CBC3-SHA:     PSK identity: None
`-SSLv3:ADH-DES-CBC3-SHA:     PSK identity hint: None
`-SSLv3:ADH-DES-CBC3-SHA:     SRP username: None
`-SSLv3:ADH-DES-CBC3-SHA:     Start Time: 1401715095
`-SSLv3:ADH-DES-CBC3-SHA:     Timeout   : 7200 (sec)
`-SSLv3:ADH-DES-CBC3-SHA:     Verify return code: 0 (ok)
`-SSLv3:ADH-DES-CBC3-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:15 2014 ADH-RC4-MD5
`-TLS1:ADH-RC4-MD5: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-TLS1:ADH-RC4-MD5: 139979199706792:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ADH-RC4-MD5: 139979199706792:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ADH-RC4-MD5: CONNECTED(00000003)
`-TLS1:ADH-RC4-MD5: ---
`-TLS1:ADH-RC4-MD5: no peer certificate available
`-TLS1:ADH-RC4-MD5: ---
`-TLS1:ADH-RC4-MD5: No client certificate CA names sent
`-TLS1:ADH-RC4-MD5: ---
`-TLS1:ADH-RC4-MD5: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ADH-RC4-MD5: ---
`-TLS1:ADH-RC4-MD5: New, (NONE), Cipher is (NONE)
`-TLS1:ADH-RC4-MD5: Secure Renegotiation IS NOT supported
`-TLS1:ADH-RC4-MD5: Compression: NONE
`-TLS1:ADH-RC4-MD5: Expansion: NONE
`-TLS1:ADH-RC4-MD5: SSL-Session:
`-TLS1:ADH-RC4-MD5:     Protocol  : TLSv1
`-TLS1:ADH-RC4-MD5:     Cipher    : 0000
`-TLS1:ADH-RC4-MD5:     Session-ID: 
`-TLS1:ADH-RC4-MD5:     Session-ID-ctx: 
`-TLS1:ADH-RC4-MD5:     Master-Key: 
`-TLS1:ADH-RC4-MD5:     Key-Arg   : None
`-TLS1:ADH-RC4-MD5:     PSK identity: None
`-TLS1:ADH-RC4-MD5:     PSK identity hint: None
`-TLS1:ADH-RC4-MD5:     SRP username: None
`-TLS1:ADH-RC4-MD5:     Start Time: 1401715095
`-TLS1:ADH-RC4-MD5:     Timeout   : 7200 (sec)
`-TLS1:ADH-RC4-MD5:     Verify return code: 0 (ok)
`-TLS1:ADH-RC4-MD5: ---

`-SSLv2:ADH-RC4-MD5: unknown option -ssl2
`-SSLv2:ADH-RC4-MD5: usage: s_client args
`-SSLv2:ADH-RC4-MD5: 
`-SSLv2:ADH-RC4-MD5:  -host host     - use -connect instead
`-SSLv2:ADH-RC4-MD5:  -port port     - use -connect instead
`-SSLv2:ADH-RC4-MD5:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ADH-RC4-MD5:  -verify arg   - turn on peer certificate verification
`-SSLv2:ADH-RC4-MD5:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ADH-RC4-MD5:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ADH-RC4-MD5:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ADH-RC4-MD5:                  not specified but cert file is.
`-SSLv2:ADH-RC4-MD5:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ADH-RC4-MD5:  -pass arg     - private key file pass phrase source
`-SSLv2:ADH-RC4-MD5:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ADH-RC4-MD5:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ADH-RC4-MD5:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ADH-RC4-MD5:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ADH-RC4-MD5:  -showcerts    - show all certificates in the chain
`-SSLv2:ADH-RC4-MD5:  -debug        - extra output
`-SSLv2:ADH-RC4-MD5:  -msg          - Show protocol messages
`-SSLv2:ADH-RC4-MD5:  -nbio_test    - more ssl protocol testing
`-SSLv2:ADH-RC4-MD5:  -state        - print the 'ssl' states
`-SSLv2:ADH-RC4-MD5:  -nbio         - Run with non-blocking IO
`-SSLv2:ADH-RC4-MD5:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ADH-RC4-MD5:  -quiet        - no s_client output
`-SSLv2:ADH-RC4-MD5:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ADH-RC4-MD5:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ADH-RC4-MD5:  -psk_identity arg - PSK identity
`-SSLv2:ADH-RC4-MD5:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ADH-RC4-MD5:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ADH-RC4-MD5:  -srppass arg      - password for 'user'
`-SSLv2:ADH-RC4-MD5:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ADH-RC4-MD5:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ADH-RC4-MD5:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ADH-RC4-MD5:  -ssl2         - just use SSLv2
`-SSLv2:ADH-RC4-MD5:  -ssl3         - just use SSLv3
`-SSLv2:ADH-RC4-MD5:  -tls1_2       - just use TLSv1.2
`-SSLv2:ADH-RC4-MD5:  -tls1_1       - just use TLSv1.1
`-SSLv2:ADH-RC4-MD5:  -tls1         - just use TLSv1
`-SSLv2:ADH-RC4-MD5:  -dtls1        - just use DTLSv1
`-SSLv2:ADH-RC4-MD5:  -mtu          - set the link layer MTU
`-SSLv2:ADH-RC4-MD5:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ADH-RC4-MD5:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ADH-RC4-MD5:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ADH-RC4-MD5:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ADH-RC4-MD5:                  command to see what is available
`-SSLv2:ADH-RC4-MD5:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ADH-RC4-MD5:                  for those protocols that support it, where
`-SSLv2:ADH-RC4-MD5:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ADH-RC4-MD5:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ADH-RC4-MD5:                  are supported.
`-SSLv2:ADH-RC4-MD5:  -engine id    - Initialise and use the specified engine
`-SSLv2:ADH-RC4-MD5:  -rand file:file:...
`-SSLv2:ADH-RC4-MD5:  -sess_out arg - file to write SSL session to
`-SSLv2:ADH-RC4-MD5:  -sess_in arg  - file to read SSL session from
`-SSLv2:ADH-RC4-MD5:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ADH-RC4-MD5:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ADH-RC4-MD5:  -status           - request certificate status from server
`-SSLv2:ADH-RC4-MD5:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ADH-RC4-MD5:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ADH-RC4-MD5:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ADH-RC4-MD5:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ADH-RC4-MD5:  -keymatexport label   - Export keying material using label
`-SSLv2:ADH-RC4-MD5:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ADH-RC4-MD5: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-SSLv3:ADH-RC4-MD5: 140049573799592:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ADH-RC4-MD5: 140049573799592:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ADH-RC4-MD5: CONNECTED(00000003)
`-SSLv3:ADH-RC4-MD5: ---
`-SSLv3:ADH-RC4-MD5: no peer certificate available
`-SSLv3:ADH-RC4-MD5: ---
`-SSLv3:ADH-RC4-MD5: No client certificate CA names sent
`-SSLv3:ADH-RC4-MD5: ---
`-SSLv3:ADH-RC4-MD5: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ADH-RC4-MD5: ---
`-SSLv3:ADH-RC4-MD5: New, (NONE), Cipher is (NONE)
`-SSLv3:ADH-RC4-MD5: Secure Renegotiation IS NOT supported
`-SSLv3:ADH-RC4-MD5: Compression: NONE
`-SSLv3:ADH-RC4-MD5: Expansion: NONE
`-SSLv3:ADH-RC4-MD5: SSL-Session:
`-SSLv3:ADH-RC4-MD5:     Protocol  : SSLv3
`-SSLv3:ADH-RC4-MD5:     Cipher    : 0000
`-SSLv3:ADH-RC4-MD5:     Session-ID: 
`-SSLv3:ADH-RC4-MD5:     Session-ID-ctx: 
`-SSLv3:ADH-RC4-MD5:     Master-Key: 
`-SSLv3:ADH-RC4-MD5:     Key-Arg   : None
`-SSLv3:ADH-RC4-MD5:     PSK identity: None
`-SSLv3:ADH-RC4-MD5:     PSK identity hint: None
`-SSLv3:ADH-RC4-MD5:     SRP username: None
`-SSLv3:ADH-RC4-MD5:     Start Time: 1401715096
`-SSLv3:ADH-RC4-MD5:     Timeout   : 7200 (sec)
`-SSLv3:ADH-RC4-MD5:     Verify return code: 0 (ok)
`-SSLv3:ADH-RC4-MD5: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:16 2014 ADH-SEED-SHA
`-TLS1:ADH-SEED-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-TLS1:ADH-SEED-SHA: 140164391155368:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ADH-SEED-SHA: 140164391155368:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ADH-SEED-SHA: CONNECTED(00000003)
`-TLS1:ADH-SEED-SHA: ---
`-TLS1:ADH-SEED-SHA: no peer certificate available
`-TLS1:ADH-SEED-SHA: ---
`-TLS1:ADH-SEED-SHA: No client certificate CA names sent
`-TLS1:ADH-SEED-SHA: ---
`-TLS1:ADH-SEED-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ADH-SEED-SHA: ---
`-TLS1:ADH-SEED-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:ADH-SEED-SHA: Secure Renegotiation IS NOT supported
`-TLS1:ADH-SEED-SHA: Compression: NONE
`-TLS1:ADH-SEED-SHA: Expansion: NONE
`-TLS1:ADH-SEED-SHA: SSL-Session:
`-TLS1:ADH-SEED-SHA:     Protocol  : TLSv1
`-TLS1:ADH-SEED-SHA:     Cipher    : 0000
`-TLS1:ADH-SEED-SHA:     Session-ID: 
`-TLS1:ADH-SEED-SHA:     Session-ID-ctx: 
`-TLS1:ADH-SEED-SHA:     Master-Key: 
`-TLS1:ADH-SEED-SHA:     Key-Arg   : None
`-TLS1:ADH-SEED-SHA:     PSK identity: None
`-TLS1:ADH-SEED-SHA:     PSK identity hint: None
`-TLS1:ADH-SEED-SHA:     SRP username: None
`-TLS1:ADH-SEED-SHA:     Start Time: 1401715097
`-TLS1:ADH-SEED-SHA:     Timeout   : 7200 (sec)
`-TLS1:ADH-SEED-SHA:     Verify return code: 0 (ok)
`-TLS1:ADH-SEED-SHA: ---

`-SSLv2:ADH-SEED-SHA: unknown option -ssl2
`-SSLv2:ADH-SEED-SHA: usage: s_client args
`-SSLv2:ADH-SEED-SHA: 
`-SSLv2:ADH-SEED-SHA:  -host host     - use -connect instead
`-SSLv2:ADH-SEED-SHA:  -port port     - use -connect instead
`-SSLv2:ADH-SEED-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ADH-SEED-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:ADH-SEED-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ADH-SEED-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ADH-SEED-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ADH-SEED-SHA:                  not specified but cert file is.
`-SSLv2:ADH-SEED-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ADH-SEED-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:ADH-SEED-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ADH-SEED-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ADH-SEED-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ADH-SEED-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ADH-SEED-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:ADH-SEED-SHA:  -debug        - extra output
`-SSLv2:ADH-SEED-SHA:  -msg          - Show protocol messages
`-SSLv2:ADH-SEED-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:ADH-SEED-SHA:  -state        - print the 'ssl' states
`-SSLv2:ADH-SEED-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:ADH-SEED-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ADH-SEED-SHA:  -quiet        - no s_client output
`-SSLv2:ADH-SEED-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ADH-SEED-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ADH-SEED-SHA:  -psk_identity arg - PSK identity
`-SSLv2:ADH-SEED-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ADH-SEED-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ADH-SEED-SHA:  -srppass arg      - password for 'user'
`-SSLv2:ADH-SEED-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ADH-SEED-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ADH-SEED-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ADH-SEED-SHA:  -ssl2         - just use SSLv2
`-SSLv2:ADH-SEED-SHA:  -ssl3         - just use SSLv3
`-SSLv2:ADH-SEED-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:ADH-SEED-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:ADH-SEED-SHA:  -tls1         - just use TLSv1
`-SSLv2:ADH-SEED-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:ADH-SEED-SHA:  -mtu          - set the link layer MTU
`-SSLv2:ADH-SEED-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ADH-SEED-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ADH-SEED-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ADH-SEED-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ADH-SEED-SHA:                  command to see what is available
`-SSLv2:ADH-SEED-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ADH-SEED-SHA:                  for those protocols that support it, where
`-SSLv2:ADH-SEED-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ADH-SEED-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ADH-SEED-SHA:                  are supported.
`-SSLv2:ADH-SEED-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:ADH-SEED-SHA:  -rand file:file:...
`-SSLv2:ADH-SEED-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:ADH-SEED-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:ADH-SEED-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ADH-SEED-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ADH-SEED-SHA:  -status           - request certificate status from server
`-SSLv2:ADH-SEED-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ADH-SEED-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ADH-SEED-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ADH-SEED-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ADH-SEED-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:ADH-SEED-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ADH-SEED-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-SSLv3:ADH-SEED-SHA: 140552084547240:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ADH-SEED-SHA: 140552084547240:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ADH-SEED-SHA: CONNECTED(00000003)
`-SSLv3:ADH-SEED-SHA: ---
`-SSLv3:ADH-SEED-SHA: no peer certificate available
`-SSLv3:ADH-SEED-SHA: ---
`-SSLv3:ADH-SEED-SHA: No client certificate CA names sent
`-SSLv3:ADH-SEED-SHA: ---
`-SSLv3:ADH-SEED-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ADH-SEED-SHA: ---
`-SSLv3:ADH-SEED-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:ADH-SEED-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:ADH-SEED-SHA: Compression: NONE
`-SSLv3:ADH-SEED-SHA: Expansion: NONE
`-SSLv3:ADH-SEED-SHA: SSL-Session:
`-SSLv3:ADH-SEED-SHA:     Protocol  : SSLv3
`-SSLv3:ADH-SEED-SHA:     Cipher    : 0000
`-SSLv3:ADH-SEED-SHA:     Session-ID: 
`-SSLv3:ADH-SEED-SHA:     Session-ID-ctx: 
`-SSLv3:ADH-SEED-SHA:     Master-Key: 
`-SSLv3:ADH-SEED-SHA:     Key-Arg   : None
`-SSLv3:ADH-SEED-SHA:     PSK identity: None
`-SSLv3:ADH-SEED-SHA:     PSK identity hint: None
`-SSLv3:ADH-SEED-SHA:     SRP username: None
`-SSLv3:ADH-SEED-SHA:     Start Time: 1401715097
`-SSLv3:ADH-SEED-SHA:     Timeout   : 7200 (sec)
`-SSLv3:ADH-SEED-SHA:     Verify return code: 0 (ok)
`-SSLv3:ADH-SEED-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:17 2014 AECDH-AES128-SHA
`-TLS1:AECDH-AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-65.55.57.27:443-<><>-OK
`-TLS1:AECDH-AES128-SHA: 140388767254184:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:AECDH-AES128-SHA: 140388767254184:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:AECDH-AES128-SHA: CONNECTED(00000003)
`-TLS1:AECDH-AES128-SHA: ---
`-TLS1:AECDH-AES128-SHA: no peer certificate available
`-TLS1:AECDH-AES128-SHA: ---
`-TLS1:AECDH-AES128-SHA: No client certificate CA names sent
`-TLS1:AECDH-AES128-SHA: ---
`-TLS1:AECDH-AES128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:AECDH-AES128-SHA: ---
`-TLS1:AECDH-AES128-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:AECDH-AES128-SHA: Secure Renegotiation IS NOT supported
`-TLS1:AECDH-AES128-SHA: Compression: NONE
`-TLS1:AECDH-AES128-SHA: Expansion: NONE
`-TLS1:AECDH-AES128-SHA: SSL-Session:
`-TLS1:AECDH-AES128-SHA:     Protocol  : TLSv1
`-TLS1:AECDH-AES128-SHA:     Cipher    : 0000
`-TLS1:AECDH-AES128-SHA:     Session-ID: 
`-TLS1:AECDH-AES128-SHA:     Session-ID-ctx: 
`-TLS1:AECDH-AES128-SHA:     Master-Key: 
`-TLS1:AECDH-AES128-SHA:     Key-Arg   : None
`-TLS1:AECDH-AES128-SHA:     PSK identity: None
`-TLS1:AECDH-AES128-SHA:     PSK identity hint: None
`-TLS1:AECDH-AES128-SHA:     SRP username: None
`-TLS1:AECDH-AES128-SHA:     Start Time: 1401715098
`-TLS1:AECDH-AES128-SHA:     Timeout   : 7200 (sec)
`-TLS1:AECDH-AES128-SHA:     Verify return code: 0 (ok)
`-TLS1:AECDH-AES128-SHA: ---

`-SSLv2:AECDH-AES128-SHA: unknown option -ssl2
`-SSLv2:AECDH-AES128-SHA: usage: s_client args
`-SSLv2:AECDH-AES128-SHA: 
`-SSLv2:AECDH-AES128-SHA:  -host host     - use -connect instead
`-SSLv2:AECDH-AES128-SHA:  -port port     - use -connect instead
`-SSLv2:AECDH-AES128-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:AECDH-AES128-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:AECDH-AES128-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:AECDH-AES128-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:AECDH-AES128-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:AECDH-AES128-SHA:                  not specified but cert file is.
`-SSLv2:AECDH-AES128-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:AECDH-AES128-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:AECDH-AES128-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:AECDH-AES128-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:AECDH-AES128-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:AECDH-AES128-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:AECDH-AES128-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:AECDH-AES128-SHA:  -debug        - extra output
`-SSLv2:AECDH-AES128-SHA:  -msg          - Show protocol messages
`-SSLv2:AECDH-AES128-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:AECDH-AES128-SHA:  -state        - print the 'ssl' states
`-SSLv2:AECDH-AES128-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:AECDH-AES128-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:AECDH-AES128-SHA:  -quiet        - no s_client output
`-SSLv2:AECDH-AES128-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:AECDH-AES128-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:AECDH-AES128-SHA:  -psk_identity arg - PSK identity
`-SSLv2:AECDH-AES128-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:AECDH-AES128-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:AECDH-AES128-SHA:  -srppass arg      - password for 'user'
`-SSLv2:AECDH-AES128-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:AECDH-AES128-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:AECDH-AES128-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:AECDH-AES128-SHA:  -ssl2         - just use SSLv2
`-SSLv2:AECDH-AES128-SHA:  -ssl3         - just use SSLv3
`-SSLv2:AECDH-AES128-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:AECDH-AES128-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:AECDH-AES128-SHA:  -tls1         - just use TLSv1
`-SSLv2:AECDH-AES128-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:AECDH-AES128-SHA:  -mtu          - set the link layer MTU
`-SSLv2:AECDH-AES128-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:AECDH-AES128-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:AECDH-AES128-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:AECDH-AES128-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:AECDH-AES128-SHA:                  command to see what is available
`-SSLv2:AECDH-AES128-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:AECDH-AES128-SHA:                  for those protocols that support it, where
`-SSLv2:AECDH-AES128-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:AECDH-AES128-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:AECDH-AES128-SHA:                  are supported.
`-SSLv2:AECDH-AES128-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:AECDH-AES128-SHA:  -rand file:file:...
`-SSLv2:AECDH-AES128-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:AECDH-AES128-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:AECDH-AES128-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:AECDH-AES128-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:AECDH-AES128-SHA:  -status           - request certificate status from server
`-SSLv2:AECDH-AES128-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:AECDH-AES128-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:AECDH-AES128-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:AECDH-AES128-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:AECDH-AES128-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:AECDH-AES128-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:AECDH-AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:AECDH-AES128-SHA: 140600770942632:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:AECDH-AES128-SHA: 140600770942632:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:AECDH-AES128-SHA: CONNECTED(00000003)
`-SSLv3:AECDH-AES128-SHA: ---
`-SSLv3:AECDH-AES128-SHA: no peer certificate available
`-SSLv3:AECDH-AES128-SHA: ---
`-SSLv3:AECDH-AES128-SHA: No client certificate CA names sent
`-SSLv3:AECDH-AES128-SHA: ---
`-SSLv3:AECDH-AES128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:AECDH-AES128-SHA: ---
`-SSLv3:AECDH-AES128-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:AECDH-AES128-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:AECDH-AES128-SHA: Compression: NONE
`-SSLv3:AECDH-AES128-SHA: Expansion: NONE
`-SSLv3:AECDH-AES128-SHA: SSL-Session:
`-SSLv3:AECDH-AES128-SHA:     Protocol  : SSLv3
`-SSLv3:AECDH-AES128-SHA:     Cipher    : 0000
`-SSLv3:AECDH-AES128-SHA:     Session-ID: 
`-SSLv3:AECDH-AES128-SHA:     Session-ID-ctx: 
`-SSLv3:AECDH-AES128-SHA:     Master-Key: 
`-SSLv3:AECDH-AES128-SHA:     Key-Arg   : None
`-SSLv3:AECDH-AES128-SHA:     PSK identity: None
`-SSLv3:AECDH-AES128-SHA:     PSK identity hint: None
`-SSLv3:AECDH-AES128-SHA:     SRP username: None
`-SSLv3:AECDH-AES128-SHA:     Start Time: 1401715098
`-SSLv3:AECDH-AES128-SHA:     Timeout   : 7200 (sec)
`-SSLv3:AECDH-AES128-SHA:     Verify return code: 0 (ok)
`-SSLv3:AECDH-AES128-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:18 2014 AECDH-AES256-SHA
`-TLS1:AECDH-AES256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:AECDH-AES256-SHA: 140021756278440:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:AECDH-AES256-SHA: 140021756278440:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:AECDH-AES256-SHA: CONNECTED(00000003)
`-TLS1:AECDH-AES256-SHA: ---
`-TLS1:AECDH-AES256-SHA: no peer certificate available
`-TLS1:AECDH-AES256-SHA: ---
`-TLS1:AECDH-AES256-SHA: No client certificate CA names sent
`-TLS1:AECDH-AES256-SHA: ---
`-TLS1:AECDH-AES256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:AECDH-AES256-SHA: ---
`-TLS1:AECDH-AES256-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:AECDH-AES256-SHA: Secure Renegotiation IS NOT supported
`-TLS1:AECDH-AES256-SHA: Compression: NONE
`-TLS1:AECDH-AES256-SHA: Expansion: NONE
`-TLS1:AECDH-AES256-SHA: SSL-Session:
`-TLS1:AECDH-AES256-SHA:     Protocol  : TLSv1
`-TLS1:AECDH-AES256-SHA:     Cipher    : 0000
`-TLS1:AECDH-AES256-SHA:     Session-ID: 
`-TLS1:AECDH-AES256-SHA:     Session-ID-ctx: 
`-TLS1:AECDH-AES256-SHA:     Master-Key: 
`-TLS1:AECDH-AES256-SHA:     Key-Arg   : None
`-TLS1:AECDH-AES256-SHA:     PSK identity: None
`-TLS1:AECDH-AES256-SHA:     PSK identity hint: None
`-TLS1:AECDH-AES256-SHA:     SRP username: None
`-TLS1:AECDH-AES256-SHA:     Start Time: 1401715099
`-TLS1:AECDH-AES256-SHA:     Timeout   : 7200 (sec)
`-TLS1:AECDH-AES256-SHA:     Verify return code: 0 (ok)
`-TLS1:AECDH-AES256-SHA: ---

`-SSLv2:AECDH-AES256-SHA: unknown option -ssl2
`-SSLv2:AECDH-AES256-SHA: usage: s_client args
`-SSLv2:AECDH-AES256-SHA: 
`-SSLv2:AECDH-AES256-SHA:  -host host     - use -connect instead
`-SSLv2:AECDH-AES256-SHA:  -port port     - use -connect instead
`-SSLv2:AECDH-AES256-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:AECDH-AES256-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:AECDH-AES256-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:AECDH-AES256-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:AECDH-AES256-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:AECDH-AES256-SHA:                  not specified but cert file is.
`-SSLv2:AECDH-AES256-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:AECDH-AES256-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:AECDH-AES256-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:AECDH-AES256-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:AECDH-AES256-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:AECDH-AES256-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:AECDH-AES256-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:AECDH-AES256-SHA:  -debug        - extra output
`-SSLv2:AECDH-AES256-SHA:  -msg          - Show protocol messages
`-SSLv2:AECDH-AES256-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:AECDH-AES256-SHA:  -state        - print the 'ssl' states
`-SSLv2:AECDH-AES256-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:AECDH-AES256-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:AECDH-AES256-SHA:  -quiet        - no s_client output
`-SSLv2:AECDH-AES256-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:AECDH-AES256-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:AECDH-AES256-SHA:  -psk_identity arg - PSK identity
`-SSLv2:AECDH-AES256-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:AECDH-AES256-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:AECDH-AES256-SHA:  -srppass arg      - password for 'user'
`-SSLv2:AECDH-AES256-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:AECDH-AES256-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:AECDH-AES256-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:AECDH-AES256-SHA:  -ssl2         - just use SSLv2
`-SSLv2:AECDH-AES256-SHA:  -ssl3         - just use SSLv3
`-SSLv2:AECDH-AES256-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:AECDH-AES256-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:AECDH-AES256-SHA:  -tls1         - just use TLSv1
`-SSLv2:AECDH-AES256-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:AECDH-AES256-SHA:  -mtu          - set the link layer MTU
`-SSLv2:AECDH-AES256-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:AECDH-AES256-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:AECDH-AES256-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:AECDH-AES256-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:AECDH-AES256-SHA:                  command to see what is available
`-SSLv2:AECDH-AES256-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:AECDH-AES256-SHA:                  for those protocols that support it, where
`-SSLv2:AECDH-AES256-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:AECDH-AES256-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:AECDH-AES256-SHA:                  are supported.
`-SSLv2:AECDH-AES256-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:AECDH-AES256-SHA:  -rand file:file:...
`-SSLv2:AECDH-AES256-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:AECDH-AES256-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:AECDH-AES256-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:AECDH-AES256-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:AECDH-AES256-SHA:  -status           - request certificate status from server
`-SSLv2:AECDH-AES256-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:AECDH-AES256-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:AECDH-AES256-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:AECDH-AES256-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:AECDH-AES256-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:AECDH-AES256-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:AECDH-AES256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:AECDH-AES256-SHA: 140154100627112:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:AECDH-AES256-SHA: 140154100627112:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:AECDH-AES256-SHA: CONNECTED(00000003)
`-SSLv3:AECDH-AES256-SHA: ---
`-SSLv3:AECDH-AES256-SHA: no peer certificate available
`-SSLv3:AECDH-AES256-SHA: ---
`-SSLv3:AECDH-AES256-SHA: No client certificate CA names sent
`-SSLv3:AECDH-AES256-SHA: ---
`-SSLv3:AECDH-AES256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:AECDH-AES256-SHA: ---
`-SSLv3:AECDH-AES256-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:AECDH-AES256-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:AECDH-AES256-SHA: Compression: NONE
`-SSLv3:AECDH-AES256-SHA: Expansion: NONE
`-SSLv3:AECDH-AES256-SHA: SSL-Session:
`-SSLv3:AECDH-AES256-SHA:     Protocol  : SSLv3
`-SSLv3:AECDH-AES256-SHA:     Cipher    : 0000
`-SSLv3:AECDH-AES256-SHA:     Session-ID: 
`-SSLv3:AECDH-AES256-SHA:     Session-ID-ctx: 
`-SSLv3:AECDH-AES256-SHA:     Master-Key: 
`-SSLv3:AECDH-AES256-SHA:     Key-Arg   : None
`-SSLv3:AECDH-AES256-SHA:     PSK identity: None
`-SSLv3:AECDH-AES256-SHA:     PSK identity hint: None
`-SSLv3:AECDH-AES256-SHA:     SRP username: None
`-SSLv3:AECDH-AES256-SHA:     Start Time: 1401715099
`-SSLv3:AECDH-AES256-SHA:     Timeout   : 7200 (sec)
`-SSLv3:AECDH-AES256-SHA:     Verify return code: 0 (ok)
`-SSLv3:AECDH-AES256-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:19 2014 AECDH-DES-CBC3-SHA
`-TLS1:AECDH-DES-CBC3-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:AECDH-DES-CBC3-SHA: 140157378492072:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:AECDH-DES-CBC3-SHA: 140157378492072:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:AECDH-DES-CBC3-SHA: CONNECTED(00000003)
`-TLS1:AECDH-DES-CBC3-SHA: ---
`-TLS1:AECDH-DES-CBC3-SHA: no peer certificate available
`-TLS1:AECDH-DES-CBC3-SHA: ---
`-TLS1:AECDH-DES-CBC3-SHA: No client certificate CA names sent
`-TLS1:AECDH-DES-CBC3-SHA: ---
`-TLS1:AECDH-DES-CBC3-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:AECDH-DES-CBC3-SHA: ---
`-TLS1:AECDH-DES-CBC3-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:AECDH-DES-CBC3-SHA: Secure Renegotiation IS NOT supported
`-TLS1:AECDH-DES-CBC3-SHA: Compression: NONE
`-TLS1:AECDH-DES-CBC3-SHA: Expansion: NONE
`-TLS1:AECDH-DES-CBC3-SHA: SSL-Session:
`-TLS1:AECDH-DES-CBC3-SHA:     Protocol  : TLSv1
`-TLS1:AECDH-DES-CBC3-SHA:     Cipher    : 0000
`-TLS1:AECDH-DES-CBC3-SHA:     Session-ID: 
`-TLS1:AECDH-DES-CBC3-SHA:     Session-ID-ctx: 
`-TLS1:AECDH-DES-CBC3-SHA:     Master-Key: 
`-TLS1:AECDH-DES-CBC3-SHA:     Key-Arg   : None
`-TLS1:AECDH-DES-CBC3-SHA:     PSK identity: None
`-TLS1:AECDH-DES-CBC3-SHA:     PSK identity hint: None
`-TLS1:AECDH-DES-CBC3-SHA:     SRP username: None
`-TLS1:AECDH-DES-CBC3-SHA:     Start Time: 1401715100
`-TLS1:AECDH-DES-CBC3-SHA:     Timeout   : 7200 (sec)
`-TLS1:AECDH-DES-CBC3-SHA:     Verify return code: 0 (ok)
`-TLS1:AECDH-DES-CBC3-SHA: ---

`-SSLv2:AECDH-DES-CBC3-SHA: unknown option -ssl2
`-SSLv2:AECDH-DES-CBC3-SHA: usage: s_client args
`-SSLv2:AECDH-DES-CBC3-SHA: 
`-SSLv2:AECDH-DES-CBC3-SHA:  -host host     - use -connect instead
`-SSLv2:AECDH-DES-CBC3-SHA:  -port port     - use -connect instead
`-SSLv2:AECDH-DES-CBC3-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:AECDH-DES-CBC3-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:AECDH-DES-CBC3-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:AECDH-DES-CBC3-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:AECDH-DES-CBC3-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:AECDH-DES-CBC3-SHA:                  not specified but cert file is.
`-SSLv2:AECDH-DES-CBC3-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:AECDH-DES-CBC3-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:AECDH-DES-CBC3-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:AECDH-DES-CBC3-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:AECDH-DES-CBC3-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:AECDH-DES-CBC3-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:AECDH-DES-CBC3-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:AECDH-DES-CBC3-SHA:  -debug        - extra output
`-SSLv2:AECDH-DES-CBC3-SHA:  -msg          - Show protocol messages
`-SSLv2:AECDH-DES-CBC3-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:AECDH-DES-CBC3-SHA:  -state        - print the 'ssl' states
`-SSLv2:AECDH-DES-CBC3-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:AECDH-DES-CBC3-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:AECDH-DES-CBC3-SHA:  -quiet        - no s_client output
`-SSLv2:AECDH-DES-CBC3-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:AECDH-DES-CBC3-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:AECDH-DES-CBC3-SHA:  -psk_identity arg - PSK identity
`-SSLv2:AECDH-DES-CBC3-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:AECDH-DES-CBC3-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:AECDH-DES-CBC3-SHA:  -srppass arg      - password for 'user'
`-SSLv2:AECDH-DES-CBC3-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:AECDH-DES-CBC3-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:AECDH-DES-CBC3-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:AECDH-DES-CBC3-SHA:  -ssl2         - just use SSLv2
`-SSLv2:AECDH-DES-CBC3-SHA:  -ssl3         - just use SSLv3
`-SSLv2:AECDH-DES-CBC3-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:AECDH-DES-CBC3-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:AECDH-DES-CBC3-SHA:  -tls1         - just use TLSv1
`-SSLv2:AECDH-DES-CBC3-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:AECDH-DES-CBC3-SHA:  -mtu          - set the link layer MTU
`-SSLv2:AECDH-DES-CBC3-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:AECDH-DES-CBC3-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:AECDH-DES-CBC3-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:AECDH-DES-CBC3-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:AECDH-DES-CBC3-SHA:                  command to see what is available
`-SSLv2:AECDH-DES-CBC3-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:AECDH-DES-CBC3-SHA:                  for those protocols that support it, where
`-SSLv2:AECDH-DES-CBC3-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:AECDH-DES-CBC3-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:AECDH-DES-CBC3-SHA:                  are supported.
`-SSLv2:AECDH-DES-CBC3-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:AECDH-DES-CBC3-SHA:  -rand file:file:...
`-SSLv2:AECDH-DES-CBC3-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:AECDH-DES-CBC3-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:AECDH-DES-CBC3-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:AECDH-DES-CBC3-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:AECDH-DES-CBC3-SHA:  -status           - request certificate status from server
`-SSLv2:AECDH-DES-CBC3-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:AECDH-DES-CBC3-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:AECDH-DES-CBC3-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:AECDH-DES-CBC3-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:AECDH-DES-CBC3-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:AECDH-DES-CBC3-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:AECDH-DES-CBC3-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:AECDH-DES-CBC3-SHA: 140594357233320:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:AECDH-DES-CBC3-SHA: 140594357233320:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:AECDH-DES-CBC3-SHA: CONNECTED(00000003)
`-SSLv3:AECDH-DES-CBC3-SHA: ---
`-SSLv3:AECDH-DES-CBC3-SHA: no peer certificate available
`-SSLv3:AECDH-DES-CBC3-SHA: ---
`-SSLv3:AECDH-DES-CBC3-SHA: No client certificate CA names sent
`-SSLv3:AECDH-DES-CBC3-SHA: ---
`-SSLv3:AECDH-DES-CBC3-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:AECDH-DES-CBC3-SHA: ---
`-SSLv3:AECDH-DES-CBC3-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:AECDH-DES-CBC3-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:AECDH-DES-CBC3-SHA: Compression: NONE
`-SSLv3:AECDH-DES-CBC3-SHA: Expansion: NONE
`-SSLv3:AECDH-DES-CBC3-SHA: SSL-Session:
`-SSLv3:AECDH-DES-CBC3-SHA:     Protocol  : SSLv3
`-SSLv3:AECDH-DES-CBC3-SHA:     Cipher    : 0000
`-SSLv3:AECDH-DES-CBC3-SHA:     Session-ID: 
`-SSLv3:AECDH-DES-CBC3-SHA:     Session-ID-ctx: 
`-SSLv3:AECDH-DES-CBC3-SHA:     Master-Key: 
`-SSLv3:AECDH-DES-CBC3-SHA:     Key-Arg   : None
`-SSLv3:AECDH-DES-CBC3-SHA:     PSK identity: None
`-SSLv3:AECDH-DES-CBC3-SHA:     PSK identity hint: None
`-SSLv3:AECDH-DES-CBC3-SHA:     SRP username: None
`-SSLv3:AECDH-DES-CBC3-SHA:     Start Time: 1401715101
`-SSLv3:AECDH-DES-CBC3-SHA:     Timeout   : 7200 (sec)
`-SSLv3:AECDH-DES-CBC3-SHA:     Verify return code: 0 (ok)
`-SSLv3:AECDH-DES-CBC3-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:21 2014 AECDH-NULL-SHA
`-TLS1:AECDH-NULL-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:AECDH-NULL-SHA: 139662889338536:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:AECDH-NULL-SHA: 139662889338536:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:AECDH-NULL-SHA: CONNECTED(00000003)
`-TLS1:AECDH-NULL-SHA: ---
`-TLS1:AECDH-NULL-SHA: no peer certificate available
`-TLS1:AECDH-NULL-SHA: ---
`-TLS1:AECDH-NULL-SHA: No client certificate CA names sent
`-TLS1:AECDH-NULL-SHA: ---
`-TLS1:AECDH-NULL-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:AECDH-NULL-SHA: ---
`-TLS1:AECDH-NULL-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:AECDH-NULL-SHA: Secure Renegotiation IS NOT supported
`-TLS1:AECDH-NULL-SHA: Compression: NONE
`-TLS1:AECDH-NULL-SHA: Expansion: NONE
`-TLS1:AECDH-NULL-SHA: SSL-Session:
`-TLS1:AECDH-NULL-SHA:     Protocol  : TLSv1
`-TLS1:AECDH-NULL-SHA:     Cipher    : 0000
`-TLS1:AECDH-NULL-SHA:     Session-ID: 
`-TLS1:AECDH-NULL-SHA:     Session-ID-ctx: 
`-TLS1:AECDH-NULL-SHA:     Master-Key: 
`-TLS1:AECDH-NULL-SHA:     Key-Arg   : None
`-TLS1:AECDH-NULL-SHA:     PSK identity: None
`-TLS1:AECDH-NULL-SHA:     PSK identity hint: None
`-TLS1:AECDH-NULL-SHA:     SRP username: None
`-TLS1:AECDH-NULL-SHA:     Start Time: 1401715101
`-TLS1:AECDH-NULL-SHA:     Timeout   : 7200 (sec)
`-TLS1:AECDH-NULL-SHA:     Verify return code: 0 (ok)
`-TLS1:AECDH-NULL-SHA: ---

`-SSLv2:AECDH-NULL-SHA: unknown option -ssl2
`-SSLv2:AECDH-NULL-SHA: usage: s_client args
`-SSLv2:AECDH-NULL-SHA: 
`-SSLv2:AECDH-NULL-SHA:  -host host     - use -connect instead
`-SSLv2:AECDH-NULL-SHA:  -port port     - use -connect instead
`-SSLv2:AECDH-NULL-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:AECDH-NULL-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:AECDH-NULL-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:AECDH-NULL-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:AECDH-NULL-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:AECDH-NULL-SHA:                  not specified but cert file is.
`-SSLv2:AECDH-NULL-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:AECDH-NULL-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:AECDH-NULL-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:AECDH-NULL-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:AECDH-NULL-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:AECDH-NULL-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:AECDH-NULL-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:AECDH-NULL-SHA:  -debug        - extra output
`-SSLv2:AECDH-NULL-SHA:  -msg          - Show protocol messages
`-SSLv2:AECDH-NULL-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:AECDH-NULL-SHA:  -state        - print the 'ssl' states
`-SSLv2:AECDH-NULL-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:AECDH-NULL-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:AECDH-NULL-SHA:  -quiet        - no s_client output
`-SSLv2:AECDH-NULL-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:AECDH-NULL-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:AECDH-NULL-SHA:  -psk_identity arg - PSK identity
`-SSLv2:AECDH-NULL-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:AECDH-NULL-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:AECDH-NULL-SHA:  -srppass arg      - password for 'user'
`-SSLv2:AECDH-NULL-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:AECDH-NULL-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:AECDH-NULL-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:AECDH-NULL-SHA:  -ssl2         - just use SSLv2
`-SSLv2:AECDH-NULL-SHA:  -ssl3         - just use SSLv3
`-SSLv2:AECDH-NULL-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:AECDH-NULL-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:AECDH-NULL-SHA:  -tls1         - just use TLSv1
`-SSLv2:AECDH-NULL-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:AECDH-NULL-SHA:  -mtu          - set the link layer MTU
`-SSLv2:AECDH-NULL-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:AECDH-NULL-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:AECDH-NULL-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:AECDH-NULL-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:AECDH-NULL-SHA:                  command to see what is available
`-SSLv2:AECDH-NULL-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:AECDH-NULL-SHA:                  for those protocols that support it, where
`-SSLv2:AECDH-NULL-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:AECDH-NULL-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:AECDH-NULL-SHA:                  are supported.
`-SSLv2:AECDH-NULL-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:AECDH-NULL-SHA:  -rand file:file:...
`-SSLv2:AECDH-NULL-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:AECDH-NULL-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:AECDH-NULL-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:AECDH-NULL-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:AECDH-NULL-SHA:  -status           - request certificate status from server
`-SSLv2:AECDH-NULL-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:AECDH-NULL-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:AECDH-NULL-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:AECDH-NULL-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:AECDH-NULL-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:AECDH-NULL-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:AECDH-NULL-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:AECDH-NULL-SHA: 140293947160232:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:AECDH-NULL-SHA: 140293947160232:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:AECDH-NULL-SHA: CONNECTED(00000003)
`-SSLv3:AECDH-NULL-SHA: ---
`-SSLv3:AECDH-NULL-SHA: no peer certificate available
`-SSLv3:AECDH-NULL-SHA: ---
`-SSLv3:AECDH-NULL-SHA: No client certificate CA names sent
`-SSLv3:AECDH-NULL-SHA: ---
`-SSLv3:AECDH-NULL-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:AECDH-NULL-SHA: ---
`-SSLv3:AECDH-NULL-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:AECDH-NULL-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:AECDH-NULL-SHA: Compression: NONE
`-SSLv3:AECDH-NULL-SHA: Expansion: NONE
`-SSLv3:AECDH-NULL-SHA: SSL-Session:
`-SSLv3:AECDH-NULL-SHA:     Protocol  : SSLv3
`-SSLv3:AECDH-NULL-SHA:     Cipher    : 0000
`-SSLv3:AECDH-NULL-SHA:     Session-ID: 
`-SSLv3:AECDH-NULL-SHA:     Session-ID-ctx: 
`-SSLv3:AECDH-NULL-SHA:     Master-Key: 
`-SSLv3:AECDH-NULL-SHA:     Key-Arg   : None
`-SSLv3:AECDH-NULL-SHA:     PSK identity: None
`-SSLv3:AECDH-NULL-SHA:     PSK identity hint: None
`-SSLv3:AECDH-NULL-SHA:     SRP username: None
`-SSLv3:AECDH-NULL-SHA:     Start Time: 1401715102
`-SSLv3:AECDH-NULL-SHA:     Timeout   : 7200 (sec)
`-SSLv3:AECDH-NULL-SHA:     Verify return code: 0 (ok)
`-SSLv3:AECDH-NULL-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:22 2014 AECDH-RC4-SHA
`-TLS1:AECDH-RC4-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:AECDH-RC4-SHA: 139892228380328:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:AECDH-RC4-SHA: 139892228380328:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:AECDH-RC4-SHA: CONNECTED(00000003)
`-TLS1:AECDH-RC4-SHA: ---
`-TLS1:AECDH-RC4-SHA: no peer certificate available
`-TLS1:AECDH-RC4-SHA: ---
`-TLS1:AECDH-RC4-SHA: No client certificate CA names sent
`-TLS1:AECDH-RC4-SHA: ---
`-TLS1:AECDH-RC4-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:AECDH-RC4-SHA: ---
`-TLS1:AECDH-RC4-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:AECDH-RC4-SHA: Secure Renegotiation IS NOT supported
`-TLS1:AECDH-RC4-SHA: Compression: NONE
`-TLS1:AECDH-RC4-SHA: Expansion: NONE
`-TLS1:AECDH-RC4-SHA: SSL-Session:
`-TLS1:AECDH-RC4-SHA:     Protocol  : TLSv1
`-TLS1:AECDH-RC4-SHA:     Cipher    : 0000
`-TLS1:AECDH-RC4-SHA:     Session-ID: 
`-TLS1:AECDH-RC4-SHA:     Session-ID-ctx: 
`-TLS1:AECDH-RC4-SHA:     Master-Key: 
`-TLS1:AECDH-RC4-SHA:     Key-Arg   : None
`-TLS1:AECDH-RC4-SHA:     PSK identity: None
`-TLS1:AECDH-RC4-SHA:     PSK identity hint: None
`-TLS1:AECDH-RC4-SHA:     SRP username: None
`-TLS1:AECDH-RC4-SHA:     Start Time: 1401715102
`-TLS1:AECDH-RC4-SHA:     Timeout   : 7200 (sec)
`-TLS1:AECDH-RC4-SHA:     Verify return code: 0 (ok)
`-TLS1:AECDH-RC4-SHA: ---

`-SSLv2:AECDH-RC4-SHA: unknown option -ssl2
`-SSLv2:AECDH-RC4-SHA: usage: s_client args
`-SSLv2:AECDH-RC4-SHA: 
`-SSLv2:AECDH-RC4-SHA:  -host host     - use -connect instead
`-SSLv2:AECDH-RC4-SHA:  -port port     - use -connect instead
`-SSLv2:AECDH-RC4-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:AECDH-RC4-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:AECDH-RC4-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:AECDH-RC4-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:AECDH-RC4-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:AECDH-RC4-SHA:                  not specified but cert file is.
`-SSLv2:AECDH-RC4-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:AECDH-RC4-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:AECDH-RC4-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:AECDH-RC4-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:AECDH-RC4-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:AECDH-RC4-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:AECDH-RC4-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:AECDH-RC4-SHA:  -debug        - extra output
`-SSLv2:AECDH-RC4-SHA:  -msg          - Show protocol messages
`-SSLv2:AECDH-RC4-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:AECDH-RC4-SHA:  -state        - print the 'ssl' states
`-SSLv2:AECDH-RC4-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:AECDH-RC4-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:AECDH-RC4-SHA:  -quiet        - no s_client output
`-SSLv2:AECDH-RC4-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:AECDH-RC4-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:AECDH-RC4-SHA:  -psk_identity arg - PSK identity
`-SSLv2:AECDH-RC4-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:AECDH-RC4-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:AECDH-RC4-SHA:  -srppass arg      - password for 'user'
`-SSLv2:AECDH-RC4-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:AECDH-RC4-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:AECDH-RC4-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:AECDH-RC4-SHA:  -ssl2         - just use SSLv2
`-SSLv2:AECDH-RC4-SHA:  -ssl3         - just use SSLv3
`-SSLv2:AECDH-RC4-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:AECDH-RC4-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:AECDH-RC4-SHA:  -tls1         - just use TLSv1
`-SSLv2:AECDH-RC4-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:AECDH-RC4-SHA:  -mtu          - set the link layer MTU
`-SSLv2:AECDH-RC4-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:AECDH-RC4-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:AECDH-RC4-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:AECDH-RC4-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:AECDH-RC4-SHA:                  command to see what is available
`-SSLv2:AECDH-RC4-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:AECDH-RC4-SHA:                  for those protocols that support it, where
`-SSLv2:AECDH-RC4-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:AECDH-RC4-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:AECDH-RC4-SHA:                  are supported.
`-SSLv2:AECDH-RC4-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:AECDH-RC4-SHA:  -rand file:file:...
`-SSLv2:AECDH-RC4-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:AECDH-RC4-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:AECDH-RC4-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:AECDH-RC4-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:AECDH-RC4-SHA:  -status           - request certificate status from server
`-SSLv2:AECDH-RC4-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:AECDH-RC4-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:AECDH-RC4-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:AECDH-RC4-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:AECDH-RC4-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:AECDH-RC4-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:AECDH-RC4-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:AECDH-RC4-SHA: 140124075763368:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:AECDH-RC4-SHA: 140124075763368:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:AECDH-RC4-SHA: CONNECTED(00000003)
`-SSLv3:AECDH-RC4-SHA: ---
`-SSLv3:AECDH-RC4-SHA: no peer certificate available
`-SSLv3:AECDH-RC4-SHA: ---
`-SSLv3:AECDH-RC4-SHA: No client certificate CA names sent
`-SSLv3:AECDH-RC4-SHA: ---
`-SSLv3:AECDH-RC4-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:AECDH-RC4-SHA: ---
`-SSLv3:AECDH-RC4-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:AECDH-RC4-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:AECDH-RC4-SHA: Compression: NONE
`-SSLv3:AECDH-RC4-SHA: Expansion: NONE
`-SSLv3:AECDH-RC4-SHA: SSL-Session:
`-SSLv3:AECDH-RC4-SHA:     Protocol  : SSLv3
`-SSLv3:AECDH-RC4-SHA:     Cipher    : 0000
`-SSLv3:AECDH-RC4-SHA:     Session-ID: 
`-SSLv3:AECDH-RC4-SHA:     Session-ID-ctx: 
`-SSLv3:AECDH-RC4-SHA:     Master-Key: 
`-SSLv3:AECDH-RC4-SHA:     Key-Arg   : None
`-SSLv3:AECDH-RC4-SHA:     PSK identity: None
`-SSLv3:AECDH-RC4-SHA:     PSK identity hint: None
`-SSLv3:AECDH-RC4-SHA:     SRP username: None
`-SSLv3:AECDH-RC4-SHA:     Start Time: 1401715103
`-SSLv3:AECDH-RC4-SHA:     Timeout   : 7200 (sec)
`-SSLv3:AECDH-RC4-SHA:     Verify return code: 0 (ok)
`-SSLv3:AECDH-RC4-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:23 2014 AES128-GCM-SHA256
`-TLS1:AES128-GCM-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:AES128-GCM-SHA256: 140372088993448:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:AES128-GCM-SHA256: CONNECTED(00000003)
`-TLS1:AES128-GCM-SHA256: ---
`-TLS1:AES128-GCM-SHA256: no peer certificate available
`-TLS1:AES128-GCM-SHA256: ---
`-TLS1:AES128-GCM-SHA256: No client certificate CA names sent
`-TLS1:AES128-GCM-SHA256: ---
`-TLS1:AES128-GCM-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:AES128-GCM-SHA256: ---
`-TLS1:AES128-GCM-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:AES128-GCM-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:AES128-GCM-SHA256: Compression: NONE
`-TLS1:AES128-GCM-SHA256: Expansion: NONE
`-TLS1:AES128-GCM-SHA256: SSL-Session:
`-TLS1:AES128-GCM-SHA256:     Protocol  : TLSv1
`-TLS1:AES128-GCM-SHA256:     Cipher    : 0000
`-TLS1:AES128-GCM-SHA256:     Session-ID: 
`-TLS1:AES128-GCM-SHA256:     Session-ID-ctx: 
`-TLS1:AES128-GCM-SHA256:     Master-Key: 
`-TLS1:AES128-GCM-SHA256:     Key-Arg   : None
`-TLS1:AES128-GCM-SHA256:     PSK identity: None
`-TLS1:AES128-GCM-SHA256:     PSK identity hint: None
`-TLS1:AES128-GCM-SHA256:     SRP username: None
`-TLS1:AES128-GCM-SHA256:     Start Time: 1401715103
`-TLS1:AES128-GCM-SHA256:     Timeout   : 7200 (sec)
`-TLS1:AES128-GCM-SHA256:     Verify return code: 0 (ok)
`-TLS1:AES128-GCM-SHA256: ---

`-SSLv2:AES128-GCM-SHA256: unknown option -ssl2
`-SSLv2:AES128-GCM-SHA256: usage: s_client args
`-SSLv2:AES128-GCM-SHA256: 
`-SSLv2:AES128-GCM-SHA256:  -host host     - use -connect instead
`-SSLv2:AES128-GCM-SHA256:  -port port     - use -connect instead
`-SSLv2:AES128-GCM-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:AES128-GCM-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:AES128-GCM-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:AES128-GCM-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:AES128-GCM-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:AES128-GCM-SHA256:                  not specified but cert file is.
`-SSLv2:AES128-GCM-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:AES128-GCM-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:AES128-GCM-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:AES128-GCM-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:AES128-GCM-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:AES128-GCM-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:AES128-GCM-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:AES128-GCM-SHA256:  -debug        - extra output
`-SSLv2:AES128-GCM-SHA256:  -msg          - Show protocol messages
`-SSLv2:AES128-GCM-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:AES128-GCM-SHA256:  -state        - print the 'ssl' states
`-SSLv2:AES128-GCM-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:AES128-GCM-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:AES128-GCM-SHA256:  -quiet        - no s_client output
`-SSLv2:AES128-GCM-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:AES128-GCM-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:AES128-GCM-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:AES128-GCM-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:AES128-GCM-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:AES128-GCM-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:AES128-GCM-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:AES128-GCM-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:AES128-GCM-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:AES128-GCM-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:AES128-GCM-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:AES128-GCM-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:AES128-GCM-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:AES128-GCM-SHA256:  -tls1         - just use TLSv1
`-SSLv2:AES128-GCM-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:AES128-GCM-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:AES128-GCM-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:AES128-GCM-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:AES128-GCM-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:AES128-GCM-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:AES128-GCM-SHA256:                  command to see what is available
`-SSLv2:AES128-GCM-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:AES128-GCM-SHA256:                  for those protocols that support it, where
`-SSLv2:AES128-GCM-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:AES128-GCM-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:AES128-GCM-SHA256:                  are supported.
`-SSLv2:AES128-GCM-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:AES128-GCM-SHA256:  -rand file:file:...
`-SSLv2:AES128-GCM-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:AES128-GCM-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:AES128-GCM-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:AES128-GCM-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:AES128-GCM-SHA256:  -status           - request certificate status from server
`-SSLv2:AES128-GCM-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:AES128-GCM-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:AES128-GCM-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:AES128-GCM-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:AES128-GCM-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:AES128-GCM-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:AES128-GCM-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:AES128-GCM-SHA256: 139844579165864:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:AES128-GCM-SHA256: CONNECTED(00000003)
`-SSLv3:AES128-GCM-SHA256: ---
`-SSLv3:AES128-GCM-SHA256: no peer certificate available
`-SSLv3:AES128-GCM-SHA256: ---
`-SSLv3:AES128-GCM-SHA256: No client certificate CA names sent
`-SSLv3:AES128-GCM-SHA256: ---
`-SSLv3:AES128-GCM-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:AES128-GCM-SHA256: ---
`-SSLv3:AES128-GCM-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:AES128-GCM-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:AES128-GCM-SHA256: Compression: NONE
`-SSLv3:AES128-GCM-SHA256: Expansion: NONE
`-SSLv3:AES128-GCM-SHA256: SSL-Session:
`-SSLv3:AES128-GCM-SHA256:     Protocol  : SSLv3
`-SSLv3:AES128-GCM-SHA256:     Cipher    : 0000
`-SSLv3:AES128-GCM-SHA256:     Session-ID: 
`-SSLv3:AES128-GCM-SHA256:     Session-ID-ctx: 
`-SSLv3:AES128-GCM-SHA256:     Master-Key: 
`-SSLv3:AES128-GCM-SHA256:     Key-Arg   : None
`-SSLv3:AES128-GCM-SHA256:     PSK identity: None
`-SSLv3:AES128-GCM-SHA256:     PSK identity hint: None
`-SSLv3:AES128-GCM-SHA256:     SRP username: None
`-SSLv3:AES128-GCM-SHA256:     Start Time: 1401715104
`-SSLv3:AES128-GCM-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:AES128-GCM-SHA256:     Verify return code: 0 (ok)
`-SSLv3:AES128-GCM-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:24 2014 AES128-SHA
`-TLS1:AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:AES128-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:AES128-SHA: verify error:num=20:unable to get local issuer certificate
`-TLS1:AES128-SHA: verify return:1
`-TLS1:AES128-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:AES128-SHA: verify error:num=27:certificate not trusted
`-TLS1:AES128-SHA: verify return:1
`-TLS1:AES128-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:AES128-SHA: verify error:num=21:unable to verify the first certificate
`-TLS1:AES128-SHA: verify return:1
`-TLS1:AES128-SHA: CONNECTED(00000003)
`-TLS1:AES128-SHA: ---
`-TLS1:AES128-SHA: Certificate chain
`-TLS1:AES128-SHA:  0 s:/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-TLS1:AES128-SHA:    i:/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-TLS1:AES128-SHA: ---
`-TLS1:AES128-SHA: Server certificate
`-TLS1:AES128-SHA: -----BEGIN CERTIFICATE-----
`-TLS1:AES128-SHA: MIIC+zCCAmQCFQFW9mR5x0Bx5RE0plmguZNsQgfuwzANBgkqhkiG9w0BAQUFADCB
`-TLS1:AES128-SHA: hzELMAkGA1UEBhMCUk8xDjAMBgNVBAgMBVRpbWlzMRIwEAYDVQQHDAlUaW1pc29h
`-TLS1:AES128-SHA: cmExDjAMBgNVBAoMBU9XQVNQMQwwCgYDVQQLDANTZWMxDzANBgNVBAMMBkNvcm5l
`-TLS1:AES128-SHA: bDElMCMGCSqGSIb3DQEJARYWY29ybmVsLnB1bmdhQGdtYWlsLmNvbTAeFw0xNDA2
`-TLS1:AES128-SHA: MDIxMDQ5NTNaFw0xNTA2MDIxMDQ5NTNaMGwxCzAJBgNVBAYTAklOMQswCQYDVQQI
`-TLS1:AES128-SHA: EwJBUDESMBAGA1UEBxMJMTI3LjAuMC4xMQ0wCwYDVQQKEwRPV1RGMRYwFAYDVQQL
`-TLS1:AES128-SHA: Ew1JbmJvdW5kLVByb3h5MRUwEwYDVQQDFAwqLjE3MC4xODguODQwggEiMA0GCSqG
`-TLS1:AES128-SHA: SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPMd28MEd6Bl1mlUwMxCJRwojZOpu0dQc+
`-TLS1:AES128-SHA: 1JGqEJYvaCBgRfP7izHsWFpV8rjWO4+34FciopX8a11W5bu+lE5S0esoN7tzci88
`-TLS1:AES128-SHA: M80NH7BjgsjT8akcH8yvGFatXS1WCWiCN2M23Pevvpvo0JDKpUiRaiDPumZ8/aI0
`-TLS1:AES128-SHA: XR/ZOlvGylSU5wl4FG7zihf0EcfCWLfe1+PgMP3hkawdG6Ehe8DO95rxa4GaUdSN
`-TLS1:AES128-SHA: LEF+6bUlV4yYWBLQKHKpDLrQJm7Y8YVTqRzqX1oE7rctISrGKrsG0+ni9ibshlEr
`-TLS1:AES128-SHA: lu+XpQJyDk06ilrYAc3BByEDPw0tyu6SWR37bbM22NfxI8zc89QjAgMBAAEwDQYJ
`-TLS1:AES128-SHA: KoZIhvcNAQEFBQADgYEAfcPJfa3gTUkas22HxgDuyNfiM8VOX2syNmIBBp+4LtaO
`-TLS1:AES128-SHA: 3eTu3mJ7JrbNE2pouTx5SOvVeoqkhijeNnLOb7gyc904BHqBQRp7Lxxo0mTpoW1q
`-TLS1:AES128-SHA: F7ZexLWp2LQIQnMzWwdf/bc/zOZklwF2nBm+Kz/V//Ye/vxQdX9SqF6BWnLG5JM=
`-TLS1:AES128-SHA: -----END CERTIFICATE-----
`-TLS1:AES128-SHA: subject=/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-TLS1:AES128-SHA: issuer=/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-TLS1:AES128-SHA: ---
`-TLS1:AES128-SHA: No client certificate CA names sent
`-TLS1:AES128-SHA: ---
`-TLS1:AES128-SHA: SSL handshake has read 1088 bytes and written 390 bytes
`-TLS1:AES128-SHA: ---
`-TLS1:AES128-SHA: New, TLSv1/SSLv3, Cipher is AES128-SHA
`-TLS1:AES128-SHA: Server public key is 2048 bit
`-TLS1:AES128-SHA: Secure Renegotiation IS supported
`-TLS1:AES128-SHA: Compression: zlib compression
`-TLS1:AES128-SHA: Expansion: zlib compression
`-TLS1:AES128-SHA: SSL-Session:
`-TLS1:AES128-SHA:     Protocol  : TLSv1
`-TLS1:AES128-SHA:     Cipher    : AES128-SHA
`-TLS1:AES128-SHA:     Session-ID: 66DE6479706AEC6B961C20460859BF7EF6A998BD4618321D8762D09CCC5CF33B
`-TLS1:AES128-SHA:     Session-ID-ctx: 
`-TLS1:AES128-SHA:     Master-Key: 6955BE9E1FB1D905D2CD449C067A893CC366CED24DE0044C85548A3C63FF55E07A049B051262509DBABDD3C1C0A09DFF
`-TLS1:AES128-SHA:     Key-Arg   : None
`-TLS1:AES128-SHA:     PSK identity: None
`-TLS1:AES128-SHA:     PSK identity hint: None
`-TLS1:AES128-SHA:     SRP username: None
`-TLS1:AES128-SHA:     TLS session ticket lifetime hint: 300 (seconds)
`-TLS1:AES128-SHA:     TLS session ticket:
`-TLS1:AES128-SHA:     0000 - b8 6d aa 21 9f 37 f8 cc-33 4b 27 e3 21 60 11 5d   .m.!.7..3K'.!`.]
`-TLS1:AES128-SHA:     0010 - 90 ce 97 71 1c e0 cb 9a-fa 17 74 a0 c1 55 c8 11   ...q......t..U..
`-TLS1:AES128-SHA:     0020 - 83 ee 7e 6f 21 e7 4e 1b-7b 61 65 f2 19 6a 33 90   ..~o!.N.{ae..j3.
`-TLS1:AES128-SHA:     0030 - 75 ae 4c f0 b2 e2 20 09-2d 2e c2 de 98 2d 1a 69   u.L... .-....-.i
`-TLS1:AES128-SHA:     0040 - 19 e0 b2 7e 64 2b db e5-8e 6d 19 c1 1b e3 a6 07   ...~d+...m......
`-TLS1:AES128-SHA:     0050 - 7e c0 bc b8 00 1d 8c 7e-4e 94 24 64 8c b5 4b 97   ~......~N.$d..K.
`-TLS1:AES128-SHA:     0060 - ab e1 bf b3 4c 90 dc 2d-5f f6 77 74 20 aa 32 57   ....L..-_.wt .2W
`-TLS1:AES128-SHA:     0070 - 7e e3 eb 2e da 85 19 68-0b b6 fe 6c 26 97 17 50   ~......h...l&..P
`-TLS1:AES128-SHA:     0080 - 61 d9 26 96 b5 1e 3a 4c-7f a9 d7 e1 5a ac 04 b8   a.&...:L....Z...
`-TLS1:AES128-SHA:     0090 - 81 ba b6 69 82 ae e2 41-8e 00 47 3f b1 87 fe be   ...i...A..G?....
`-TLS1:AES128-SHA: 
`-TLS1:AES128-SHA:     Compression: 1 (zlib compression)
`-TLS1:AES128-SHA:     Start Time: 1401715105
`-TLS1:AES128-SHA:     Timeout   : 7200 (sec)
`-TLS1:AES128-SHA:     Verify return code: 21 (unable to verify the first certificate)
`-TLS1:AES128-SHA: ---
`-TLS1:AES128-SHA: DONE

`-SSLv2:AES128-SHA: unknown option -ssl2
`-SSLv2:AES128-SHA: usage: s_client args
`-SSLv2:AES128-SHA: 
`-SSLv2:AES128-SHA:  -host host     - use -connect instead
`-SSLv2:AES128-SHA:  -port port     - use -connect instead
`-SSLv2:AES128-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:AES128-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:AES128-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:AES128-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:AES128-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:AES128-SHA:                  not specified but cert file is.
`-SSLv2:AES128-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:AES128-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:AES128-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:AES128-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:AES128-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:AES128-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:AES128-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:AES128-SHA:  -debug        - extra output
`-SSLv2:AES128-SHA:  -msg          - Show protocol messages
`-SSLv2:AES128-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:AES128-SHA:  -state        - print the 'ssl' states
`-SSLv2:AES128-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:AES128-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:AES128-SHA:  -quiet        - no s_client output
`-SSLv2:AES128-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:AES128-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:AES128-SHA:  -psk_identity arg - PSK identity
`-SSLv2:AES128-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:AES128-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:AES128-SHA:  -srppass arg      - password for 'user'
`-SSLv2:AES128-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:AES128-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:AES128-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:AES128-SHA:  -ssl2         - just use SSLv2
`-SSLv2:AES128-SHA:  -ssl3         - just use SSLv3
`-SSLv2:AES128-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:AES128-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:AES128-SHA:  -tls1         - just use TLSv1
`-SSLv2:AES128-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:AES128-SHA:  -mtu          - set the link layer MTU
`-SSLv2:AES128-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:AES128-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:AES128-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:AES128-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:AES128-SHA:                  command to see what is available
`-SSLv2:AES128-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:AES128-SHA:                  for those protocols that support it, where
`-SSLv2:AES128-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:AES128-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:AES128-SHA:                  are supported.
`-SSLv2:AES128-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:AES128-SHA:  -rand file:file:...
`-SSLv2:AES128-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:AES128-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:AES128-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:AES128-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:AES128-SHA:  -status           - request certificate status from server
`-SSLv2:AES128-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:AES128-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:AES128-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:AES128-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:AES128-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:AES128-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:AES128-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:AES128-SHA: verify error:num=20:unable to get local issuer certificate
`-SSLv3:AES128-SHA: verify return:1
`-SSLv3:AES128-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:AES128-SHA: verify error:num=27:certificate not trusted
`-SSLv3:AES128-SHA: verify return:1
`-SSLv3:AES128-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:AES128-SHA: verify error:num=21:unable to verify the first certificate
`-SSLv3:AES128-SHA: verify return:1
`-SSLv3:AES128-SHA: CONNECTED(00000003)
`-SSLv3:AES128-SHA: ---
`-SSLv3:AES128-SHA: Certificate chain
`-SSLv3:AES128-SHA:  0 s:/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-SSLv3:AES128-SHA:    i:/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-SSLv3:AES128-SHA: ---
`-SSLv3:AES128-SHA: Server certificate
`-SSLv3:AES128-SHA: -----BEGIN CERTIFICATE-----
`-SSLv3:AES128-SHA: MIIC+zCCAmQCFQFW9mR5x0Bx5RE0plmguZNsQgfuwzANBgkqhkiG9w0BAQUFADCB
`-SSLv3:AES128-SHA: hzELMAkGA1UEBhMCUk8xDjAMBgNVBAgMBVRpbWlzMRIwEAYDVQQHDAlUaW1pc29h
`-SSLv3:AES128-SHA: cmExDjAMBgNVBAoMBU9XQVNQMQwwCgYDVQQLDANTZWMxDzANBgNVBAMMBkNvcm5l
`-SSLv3:AES128-SHA: bDElMCMGCSqGSIb3DQEJARYWY29ybmVsLnB1bmdhQGdtYWlsLmNvbTAeFw0xNDA2
`-SSLv3:AES128-SHA: MDIxMDQ5NTNaFw0xNTA2MDIxMDQ5NTNaMGwxCzAJBgNVBAYTAklOMQswCQYDVQQI
`-SSLv3:AES128-SHA: EwJBUDESMBAGA1UEBxMJMTI3LjAuMC4xMQ0wCwYDVQQKEwRPV1RGMRYwFAYDVQQL
`-SSLv3:AES128-SHA: Ew1JbmJvdW5kLVByb3h5MRUwEwYDVQQDFAwqLjE3MC4xODguODQwggEiMA0GCSqG
`-SSLv3:AES128-SHA: SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPMd28MEd6Bl1mlUwMxCJRwojZOpu0dQc+
`-SSLv3:AES128-SHA: 1JGqEJYvaCBgRfP7izHsWFpV8rjWO4+34FciopX8a11W5bu+lE5S0esoN7tzci88
`-SSLv3:AES128-SHA: M80NH7BjgsjT8akcH8yvGFatXS1WCWiCN2M23Pevvpvo0JDKpUiRaiDPumZ8/aI0
`-SSLv3:AES128-SHA: XR/ZOlvGylSU5wl4FG7zihf0EcfCWLfe1+PgMP3hkawdG6Ehe8DO95rxa4GaUdSN
`-SSLv3:AES128-SHA: LEF+6bUlV4yYWBLQKHKpDLrQJm7Y8YVTqRzqX1oE7rctISrGKrsG0+ni9ibshlEr
`-SSLv3:AES128-SHA: lu+XpQJyDk06ilrYAc3BByEDPw0tyu6SWR37bbM22NfxI8zc89QjAgMBAAEwDQYJ
`-SSLv3:AES128-SHA: KoZIhvcNAQEFBQADgYEAfcPJfa3gTUkas22HxgDuyNfiM8VOX2syNmIBBp+4LtaO
`-SSLv3:AES128-SHA: 3eTu3mJ7JrbNE2pouTx5SOvVeoqkhijeNnLOb7gyc904BHqBQRp7Lxxo0mTpoW1q
`-SSLv3:AES128-SHA: F7ZexLWp2LQIQnMzWwdf/bc/zOZklwF2nBm+Kz/V//Ye/vxQdX9SqF6BWnLG5JM=
`-SSLv3:AES128-SHA: -----END CERTIFICATE-----
`-SSLv3:AES128-SHA: subject=/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-SSLv3:AES128-SHA: issuer=/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-SSLv3:AES128-SHA: ---
`-SSLv3:AES128-SHA: No client certificate CA names sent
`-SSLv3:AES128-SHA: ---
`-SSLv3:AES128-SHA: SSL handshake has read 968 bytes and written 409 bytes
`-SSLv3:AES128-SHA: ---
`-SSLv3:AES128-SHA: New, TLSv1/SSLv3, Cipher is AES128-SHA
`-SSLv3:AES128-SHA: Server public key is 2048 bit
`-SSLv3:AES128-SHA: Secure Renegotiation IS supported
`-SSLv3:AES128-SHA: Compression: zlib compression
`-SSLv3:AES128-SHA: Expansion: zlib compression
`-SSLv3:AES128-SHA: SSL-Session:
`-SSLv3:AES128-SHA:     Protocol  : SSLv3
`-SSLv3:AES128-SHA:     Cipher    : AES128-SHA
`-SSLv3:AES128-SHA:     Session-ID: 0DD32A15F758BB2903C616F1584F11E7352B730D9A15D1DE890B219B923A46DD
`-SSLv3:AES128-SHA:     Session-ID-ctx: 
`-SSLv3:AES128-SHA:     Master-Key: 84E1E5060EB565511C6BE7FBADE3BAAAA41050F1BECCFC3522D8A62AFA2364C6F4F8C4644F1D4988107703F9BC014640
`-SSLv3:AES128-SHA:     Key-Arg   : None
`-SSLv3:AES128-SHA:     PSK identity: None
`-SSLv3:AES128-SHA:     PSK identity hint: None
`-SSLv3:AES128-SHA:     SRP username: None
`-SSLv3:AES128-SHA:     Compression: 1 (zlib compression)
`-SSLv3:AES128-SHA:     Start Time: 1401715105
`-SSLv3:AES128-SHA:     Timeout   : 7200 (sec)
`-SSLv3:AES128-SHA:     Verify return code: 21 (unable to verify the first certificate)
`-SSLv3:AES128-SHA: ---
`-SSLv3:AES128-SHA: DONE
------------------------------------------------------------------------
Mon Jun  2 16:18:25 2014 AES128-SHA256
`-TLS1:AES128-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:AES128-SHA256: 140117914998440:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:AES128-SHA256: CONNECTED(00000003)
`-TLS1:AES128-SHA256: ---
`-TLS1:AES128-SHA256: no peer certificate available
`-TLS1:AES128-SHA256: ---
`-TLS1:AES128-SHA256: No client certificate CA names sent
`-TLS1:AES128-SHA256: ---
`-TLS1:AES128-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:AES128-SHA256: ---
`-TLS1:AES128-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:AES128-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:AES128-SHA256: Compression: NONE
`-TLS1:AES128-SHA256: Expansion: NONE
`-TLS1:AES128-SHA256: SSL-Session:
`-TLS1:AES128-SHA256:     Protocol  : TLSv1
`-TLS1:AES128-SHA256:     Cipher    : 0000
`-TLS1:AES128-SHA256:     Session-ID: 
`-TLS1:AES128-SHA256:     Session-ID-ctx: 
`-TLS1:AES128-SHA256:     Master-Key: 
`-TLS1:AES128-SHA256:     Key-Arg   : None
`-TLS1:AES128-SHA256:     PSK identity: None
`-TLS1:AES128-SHA256:     PSK identity hint: None
`-TLS1:AES128-SHA256:     SRP username: None
`-TLS1:AES128-SHA256:     Start Time: 1401715106
`-TLS1:AES128-SHA256:     Timeout   : 7200 (sec)
`-TLS1:AES128-SHA256:     Verify return code: 0 (ok)
`-TLS1:AES128-SHA256: ---

`-SSLv2:AES128-SHA256: unknown option -ssl2
`-SSLv2:AES128-SHA256: usage: s_client args
`-SSLv2:AES128-SHA256: 
`-SSLv2:AES128-SHA256:  -host host     - use -connect instead
`-SSLv2:AES128-SHA256:  -port port     - use -connect instead
`-SSLv2:AES128-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:AES128-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:AES128-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:AES128-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:AES128-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:AES128-SHA256:                  not specified but cert file is.
`-SSLv2:AES128-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:AES128-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:AES128-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:AES128-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:AES128-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:AES128-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:AES128-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:AES128-SHA256:  -debug        - extra output
`-SSLv2:AES128-SHA256:  -msg          - Show protocol messages
`-SSLv2:AES128-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:AES128-SHA256:  -state        - print the 'ssl' states
`-SSLv2:AES128-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:AES128-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:AES128-SHA256:  -quiet        - no s_client output
`-SSLv2:AES128-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:AES128-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:AES128-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:AES128-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:AES128-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:AES128-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:AES128-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:AES128-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:AES128-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:AES128-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:AES128-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:AES128-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:AES128-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:AES128-SHA256:  -tls1         - just use TLSv1
`-SSLv2:AES128-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:AES128-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:AES128-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:AES128-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:AES128-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:AES128-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:AES128-SHA256:                  command to see what is available
`-SSLv2:AES128-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:AES128-SHA256:                  for those protocols that support it, where
`-SSLv2:AES128-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:AES128-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:AES128-SHA256:                  are supported.
`-SSLv2:AES128-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:AES128-SHA256:  -rand file:file:...
`-SSLv2:AES128-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:AES128-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:AES128-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:AES128-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:AES128-SHA256:  -status           - request certificate status from server
`-SSLv2:AES128-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:AES128-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:AES128-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:AES128-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:AES128-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:AES128-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:AES128-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:AES128-SHA256: 140337825179304:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:AES128-SHA256: CONNECTED(00000003)
`-SSLv3:AES128-SHA256: ---
`-SSLv3:AES128-SHA256: no peer certificate available
`-SSLv3:AES128-SHA256: ---
`-SSLv3:AES128-SHA256: No client certificate CA names sent
`-SSLv3:AES128-SHA256: ---
`-SSLv3:AES128-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:AES128-SHA256: ---
`-SSLv3:AES128-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:AES128-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:AES128-SHA256: Compression: NONE
`-SSLv3:AES128-SHA256: Expansion: NONE
`-SSLv3:AES128-SHA256: SSL-Session:
`-SSLv3:AES128-SHA256:     Protocol  : SSLv3
`-SSLv3:AES128-SHA256:     Cipher    : 0000
`-SSLv3:AES128-SHA256:     Session-ID: 
`-SSLv3:AES128-SHA256:     Session-ID-ctx: 
`-SSLv3:AES128-SHA256:     Master-Key: 
`-SSLv3:AES128-SHA256:     Key-Arg   : None
`-SSLv3:AES128-SHA256:     PSK identity: None
`-SSLv3:AES128-SHA256:     PSK identity hint: None
`-SSLv3:AES128-SHA256:     SRP username: None
`-SSLv3:AES128-SHA256:     Start Time: 1401715106
`-SSLv3:AES128-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:AES128-SHA256:     Verify return code: 0 (ok)
`-SSLv3:AES128-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:26 2014 AES256-GCM-SHA384
`-TLS1:AES256-GCM-SHA384: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:AES256-GCM-SHA384: 140148846868136:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:AES256-GCM-SHA384: CONNECTED(00000003)
`-TLS1:AES256-GCM-SHA384: ---
`-TLS1:AES256-GCM-SHA384: no peer certificate available
`-TLS1:AES256-GCM-SHA384: ---
`-TLS1:AES256-GCM-SHA384: No client certificate CA names sent
`-TLS1:AES256-GCM-SHA384: ---
`-TLS1:AES256-GCM-SHA384: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:AES256-GCM-SHA384: ---
`-TLS1:AES256-GCM-SHA384: New, (NONE), Cipher is (NONE)
`-TLS1:AES256-GCM-SHA384: Secure Renegotiation IS NOT supported
`-TLS1:AES256-GCM-SHA384: Compression: NONE
`-TLS1:AES256-GCM-SHA384: Expansion: NONE
`-TLS1:AES256-GCM-SHA384: SSL-Session:
`-TLS1:AES256-GCM-SHA384:     Protocol  : TLSv1
`-TLS1:AES256-GCM-SHA384:     Cipher    : 0000
`-TLS1:AES256-GCM-SHA384:     Session-ID: 
`-TLS1:AES256-GCM-SHA384:     Session-ID-ctx: 
`-TLS1:AES256-GCM-SHA384:     Master-Key: 
`-TLS1:AES256-GCM-SHA384:     Key-Arg   : None
`-TLS1:AES256-GCM-SHA384:     PSK identity: None
`-TLS1:AES256-GCM-SHA384:     PSK identity hint: None
`-TLS1:AES256-GCM-SHA384:     SRP username: None
`-TLS1:AES256-GCM-SHA384:     Start Time: 1401715107
`-TLS1:AES256-GCM-SHA384:     Timeout   : 7200 (sec)
`-TLS1:AES256-GCM-SHA384:     Verify return code: 0 (ok)
`-TLS1:AES256-GCM-SHA384: ---

`-SSLv2:AES256-GCM-SHA384: unknown option -ssl2
`-SSLv2:AES256-GCM-SHA384: usage: s_client args
`-SSLv2:AES256-GCM-SHA384: 
`-SSLv2:AES256-GCM-SHA384:  -host host     - use -connect instead
`-SSLv2:AES256-GCM-SHA384:  -port port     - use -connect instead
`-SSLv2:AES256-GCM-SHA384:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:AES256-GCM-SHA384:  -verify arg   - turn on peer certificate verification
`-SSLv2:AES256-GCM-SHA384:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:AES256-GCM-SHA384:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:AES256-GCM-SHA384:  -key arg      - Private key file to use, in cert file if
`-SSLv2:AES256-GCM-SHA384:                  not specified but cert file is.
`-SSLv2:AES256-GCM-SHA384:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:AES256-GCM-SHA384:  -pass arg     - private key file pass phrase source
`-SSLv2:AES256-GCM-SHA384:  -CApath arg   - PEM format directory of CA's
`-SSLv2:AES256-GCM-SHA384:  -CAfile arg   - PEM format file of CA's
`-SSLv2:AES256-GCM-SHA384:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:AES256-GCM-SHA384:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:AES256-GCM-SHA384:  -showcerts    - show all certificates in the chain
`-SSLv2:AES256-GCM-SHA384:  -debug        - extra output
`-SSLv2:AES256-GCM-SHA384:  -msg          - Show protocol messages
`-SSLv2:AES256-GCM-SHA384:  -nbio_test    - more ssl protocol testing
`-SSLv2:AES256-GCM-SHA384:  -state        - print the 'ssl' states
`-SSLv2:AES256-GCM-SHA384:  -nbio         - Run with non-blocking IO
`-SSLv2:AES256-GCM-SHA384:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:AES256-GCM-SHA384:  -quiet        - no s_client output
`-SSLv2:AES256-GCM-SHA384:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:AES256-GCM-SHA384:  -no_ign_eof   - don't ignore input eof
`-SSLv2:AES256-GCM-SHA384:  -psk_identity arg - PSK identity
`-SSLv2:AES256-GCM-SHA384:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:AES256-GCM-SHA384:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:AES256-GCM-SHA384:  -srppass arg      - password for 'user'
`-SSLv2:AES256-GCM-SHA384:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:AES256-GCM-SHA384:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:AES256-GCM-SHA384:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:AES256-GCM-SHA384:  -ssl2         - just use SSLv2
`-SSLv2:AES256-GCM-SHA384:  -ssl3         - just use SSLv3
`-SSLv2:AES256-GCM-SHA384:  -tls1_2       - just use TLSv1.2
`-SSLv2:AES256-GCM-SHA384:  -tls1_1       - just use TLSv1.1
`-SSLv2:AES256-GCM-SHA384:  -tls1         - just use TLSv1
`-SSLv2:AES256-GCM-SHA384:  -dtls1        - just use DTLSv1
`-SSLv2:AES256-GCM-SHA384:  -mtu          - set the link layer MTU
`-SSLv2:AES256-GCM-SHA384:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:AES256-GCM-SHA384:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:AES256-GCM-SHA384:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:AES256-GCM-SHA384:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:AES256-GCM-SHA384:                  command to see what is available
`-SSLv2:AES256-GCM-SHA384:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:AES256-GCM-SHA384:                  for those protocols that support it, where
`-SSLv2:AES256-GCM-SHA384:                  'prot' defines which one to assume.  Currently,
`-SSLv2:AES256-GCM-SHA384:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:AES256-GCM-SHA384:                  are supported.
`-SSLv2:AES256-GCM-SHA384:  -engine id    - Initialise and use the specified engine
`-SSLv2:AES256-GCM-SHA384:  -rand file:file:...
`-SSLv2:AES256-GCM-SHA384:  -sess_out arg - file to write SSL session to
`-SSLv2:AES256-GCM-SHA384:  -sess_in arg  - file to read SSL session from
`-SSLv2:AES256-GCM-SHA384:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:AES256-GCM-SHA384:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:AES256-GCM-SHA384:  -status           - request certificate status from server
`-SSLv2:AES256-GCM-SHA384:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:AES256-GCM-SHA384:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:AES256-GCM-SHA384:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:AES256-GCM-SHA384:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:AES256-GCM-SHA384:  -keymatexport label   - Export keying material using label
`-SSLv2:AES256-GCM-SHA384:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:AES256-GCM-SHA384: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:AES256-GCM-SHA384: 140312430147240:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:AES256-GCM-SHA384: CONNECTED(00000003)
`-SSLv3:AES256-GCM-SHA384: ---
`-SSLv3:AES256-GCM-SHA384: no peer certificate available
`-SSLv3:AES256-GCM-SHA384: ---
`-SSLv3:AES256-GCM-SHA384: No client certificate CA names sent
`-SSLv3:AES256-GCM-SHA384: ---
`-SSLv3:AES256-GCM-SHA384: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:AES256-GCM-SHA384: ---
`-SSLv3:AES256-GCM-SHA384: New, (NONE), Cipher is (NONE)
`-SSLv3:AES256-GCM-SHA384: Secure Renegotiation IS NOT supported
`-SSLv3:AES256-GCM-SHA384: Compression: NONE
`-SSLv3:AES256-GCM-SHA384: Expansion: NONE
`-SSLv3:AES256-GCM-SHA384: SSL-Session:
`-SSLv3:AES256-GCM-SHA384:     Protocol  : SSLv3
`-SSLv3:AES256-GCM-SHA384:     Cipher    : 0000
`-SSLv3:AES256-GCM-SHA384:     Session-ID: 
`-SSLv3:AES256-GCM-SHA384:     Session-ID-ctx: 
`-SSLv3:AES256-GCM-SHA384:     Master-Key: 
`-SSLv3:AES256-GCM-SHA384:     Key-Arg   : None
`-SSLv3:AES256-GCM-SHA384:     PSK identity: None
`-SSLv3:AES256-GCM-SHA384:     PSK identity hint: None
`-SSLv3:AES256-GCM-SHA384:     SRP username: None
`-SSLv3:AES256-GCM-SHA384:     Start Time: 1401715107
`-SSLv3:AES256-GCM-SHA384:     Timeout   : 7200 (sec)
`-SSLv3:AES256-GCM-SHA384:     Verify return code: 0 (ok)
`-SSLv3:AES256-GCM-SHA384: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:27 2014 AES256-SHA
`-TLS1:AES256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:AES256-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:AES256-SHA: verify error:num=20:unable to get local issuer certificate
`-TLS1:AES256-SHA: verify return:1
`-TLS1:AES256-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:AES256-SHA: verify error:num=27:certificate not trusted
`-TLS1:AES256-SHA: verify return:1
`-TLS1:AES256-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:AES256-SHA: verify error:num=21:unable to verify the first certificate
`-TLS1:AES256-SHA: verify return:1
`-TLS1:AES256-SHA: CONNECTED(00000003)
`-TLS1:AES256-SHA: ---
`-TLS1:AES256-SHA: Certificate chain
`-TLS1:AES256-SHA:  0 s:/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-TLS1:AES256-SHA:    i:/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-TLS1:AES256-SHA: ---
`-TLS1:AES256-SHA: Server certificate
`-TLS1:AES256-SHA: -----BEGIN CERTIFICATE-----
`-TLS1:AES256-SHA: MIIC+zCCAmQCFQFW9mR5x0Bx5RE0plmguZNsQgfuwzANBgkqhkiG9w0BAQUFADCB
`-TLS1:AES256-SHA: hzELMAkGA1UEBhMCUk8xDjAMBgNVBAgMBVRpbWlzMRIwEAYDVQQHDAlUaW1pc29h
`-TLS1:AES256-SHA: cmExDjAMBgNVBAoMBU9XQVNQMQwwCgYDVQQLDANTZWMxDzANBgNVBAMMBkNvcm5l
`-TLS1:AES256-SHA: bDElMCMGCSqGSIb3DQEJARYWY29ybmVsLnB1bmdhQGdtYWlsLmNvbTAeFw0xNDA2
`-TLS1:AES256-SHA: MDIxMDQ5NTNaFw0xNTA2MDIxMDQ5NTNaMGwxCzAJBgNVBAYTAklOMQswCQYDVQQI
`-TLS1:AES256-SHA: EwJBUDESMBAGA1UEBxMJMTI3LjAuMC4xMQ0wCwYDVQQKEwRPV1RGMRYwFAYDVQQL
`-TLS1:AES256-SHA: Ew1JbmJvdW5kLVByb3h5MRUwEwYDVQQDFAwqLjE3MC4xODguODQwggEiMA0GCSqG
`-TLS1:AES256-SHA: SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPMd28MEd6Bl1mlUwMxCJRwojZOpu0dQc+
`-TLS1:AES256-SHA: 1JGqEJYvaCBgRfP7izHsWFpV8rjWO4+34FciopX8a11W5bu+lE5S0esoN7tzci88
`-TLS1:AES256-SHA: M80NH7BjgsjT8akcH8yvGFatXS1WCWiCN2M23Pevvpvo0JDKpUiRaiDPumZ8/aI0
`-TLS1:AES256-SHA: XR/ZOlvGylSU5wl4FG7zihf0EcfCWLfe1+PgMP3hkawdG6Ehe8DO95rxa4GaUdSN
`-TLS1:AES256-SHA: LEF+6bUlV4yYWBLQKHKpDLrQJm7Y8YVTqRzqX1oE7rctISrGKrsG0+ni9ibshlEr
`-TLS1:AES256-SHA: lu+XpQJyDk06ilrYAc3BByEDPw0tyu6SWR37bbM22NfxI8zc89QjAgMBAAEwDQYJ
`-TLS1:AES256-SHA: KoZIhvcNAQEFBQADgYEAfcPJfa3gTUkas22HxgDuyNfiM8VOX2syNmIBBp+4LtaO
`-TLS1:AES256-SHA: 3eTu3mJ7JrbNE2pouTx5SOvVeoqkhijeNnLOb7gyc904BHqBQRp7Lxxo0mTpoW1q
`-TLS1:AES256-SHA: F7ZexLWp2LQIQnMzWwdf/bc/zOZklwF2nBm+Kz/V//Ye/vxQdX9SqF6BWnLG5JM=
`-TLS1:AES256-SHA: -----END CERTIFICATE-----
`-TLS1:AES256-SHA: subject=/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-TLS1:AES256-SHA: issuer=/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-TLS1:AES256-SHA: ---
`-TLS1:AES256-SHA: No client certificate CA names sent
`-TLS1:AES256-SHA: ---
`-TLS1:AES256-SHA: SSL handshake has read 1088 bytes and written 390 bytes
`-TLS1:AES256-SHA: ---
`-TLS1:AES256-SHA: New, TLSv1/SSLv3, Cipher is AES256-SHA
`-TLS1:AES256-SHA: Server public key is 2048 bit
`-TLS1:AES256-SHA: Secure Renegotiation IS supported
`-TLS1:AES256-SHA: Compression: zlib compression
`-TLS1:AES256-SHA: Expansion: zlib compression
`-TLS1:AES256-SHA: SSL-Session:
`-TLS1:AES256-SHA:     Protocol  : TLSv1
`-TLS1:AES256-SHA:     Cipher    : AES256-SHA
`-TLS1:AES256-SHA:     Session-ID: 1D145E92D1B26A76CAB7E76086473DFD4061DBF81A7035C70FD2B1193B3BF8BC
`-TLS1:AES256-SHA:     Session-ID-ctx: 
`-TLS1:AES256-SHA:     Master-Key: 1DD71965A3226FDF6E3A9ADC91529CFFAE95D4F5500AC808A2A29D998D18C11B38E62F534FA41FD77C2A59B4B6510DB5
`-TLS1:AES256-SHA:     Key-Arg   : None
`-TLS1:AES256-SHA:     PSK identity: None
`-TLS1:AES256-SHA:     PSK identity hint: None
`-TLS1:AES256-SHA:     SRP username: None
`-TLS1:AES256-SHA:     TLS session ticket lifetime hint: 300 (seconds)
`-TLS1:AES256-SHA:     TLS session ticket:
`-TLS1:AES256-SHA:     0000 - 9b fd 01 e3 46 8b 8f b9-d5 ab 14 86 f4 ce 9a 17   ....F...........
`-TLS1:AES256-SHA:     0010 - 40 1e be 3f 73 f1 33 95-48 a4 f4 86 35 70 d3 96   @..?s.3.H...5p..
`-TLS1:AES256-SHA:     0020 - 8b 66 31 eb 76 30 91 a4-0d 67 af ab e2 f1 fc e4   .f1.v0...g......
`-TLS1:AES256-SHA:     0030 - 80 bf 3c cb 19 20 68 4a-81 f9 a5 b5 a2 21 ec b1   ..<.. hJ.....!..
`-TLS1:AES256-SHA:     0040 - 39 4d fd ec 1e 16 f0 c1-82 05 a9 84 2c 42 a6 ec   9M..........,B..
`-TLS1:AES256-SHA:     0050 - bc 0e c9 67 2b fd 87 34-5d 3b 49 28 20 b7 e4 e2   ...g+..4];I( ...
`-TLS1:AES256-SHA:     0060 - d6 47 cc a0 7b 61 9a b8-58 c3 43 b2 2e c4 e3 c3   .G..{a..X.C.....
`-TLS1:AES256-SHA:     0070 - 6c 22 04 48 cd 3f 3c a4-3f 00 3f d3 14 78 fd a4   l".H.?<.?.?..x..
`-TLS1:AES256-SHA:     0080 - b2 6e 50 5c 39 b8 b4 66-a7 39 b9 e9 69 f1 80 5c   .nP\9..f.9..i..\
`-TLS1:AES256-SHA:     0090 - 23 6f 8b ca 02 f0 e9 e1-2a ce 6e d4 c8 06 94 a1   #o......*.n.....
`-TLS1:AES256-SHA: 
`-TLS1:AES256-SHA:     Compression: 1 (zlib compression)
`-TLS1:AES256-SHA:     Start Time: 1401715108
`-TLS1:AES256-SHA:     Timeout   : 7200 (sec)
`-TLS1:AES256-SHA:     Verify return code: 21 (unable to verify the first certificate)
`-TLS1:AES256-SHA: ---
`-TLS1:AES256-SHA: DONE

`-SSLv2:AES256-SHA: unknown option -ssl2
`-SSLv2:AES256-SHA: usage: s_client args
`-SSLv2:AES256-SHA: 
`-SSLv2:AES256-SHA:  -host host     - use -connect instead
`-SSLv2:AES256-SHA:  -port port     - use -connect instead
`-SSLv2:AES256-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:AES256-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:AES256-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:AES256-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:AES256-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:AES256-SHA:                  not specified but cert file is.
`-SSLv2:AES256-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:AES256-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:AES256-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:AES256-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:AES256-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:AES256-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:AES256-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:AES256-SHA:  -debug        - extra output
`-SSLv2:AES256-SHA:  -msg          - Show protocol messages
`-SSLv2:AES256-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:AES256-SHA:  -state        - print the 'ssl' states
`-SSLv2:AES256-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:AES256-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:AES256-SHA:  -quiet        - no s_client output
`-SSLv2:AES256-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:AES256-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:AES256-SHA:  -psk_identity arg - PSK identity
`-SSLv2:AES256-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:AES256-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:AES256-SHA:  -srppass arg      - password for 'user'
`-SSLv2:AES256-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:AES256-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:AES256-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:AES256-SHA:  -ssl2         - just use SSLv2
`-SSLv2:AES256-SHA:  -ssl3         - just use SSLv3
`-SSLv2:AES256-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:AES256-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:AES256-SHA:  -tls1         - just use TLSv1
`-SSLv2:AES256-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:AES256-SHA:  -mtu          - set the link layer MTU
`-SSLv2:AES256-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:AES256-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:AES256-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:AES256-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:AES256-SHA:                  command to see what is available
`-SSLv2:AES256-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:AES256-SHA:                  for those protocols that support it, where
`-SSLv2:AES256-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:AES256-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:AES256-SHA:                  are supported.
`-SSLv2:AES256-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:AES256-SHA:  -rand file:file:...
`-SSLv2:AES256-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:AES256-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:AES256-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:AES256-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:AES256-SHA:  -status           - request certificate status from server
`-SSLv2:AES256-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:AES256-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:AES256-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:AES256-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:AES256-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:AES256-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:AES256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:AES256-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:AES256-SHA: verify error:num=20:unable to get local issuer certificate
`-SSLv3:AES256-SHA: verify return:1
`-SSLv3:AES256-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:AES256-SHA: verify error:num=27:certificate not trusted
`-SSLv3:AES256-SHA: verify return:1
`-SSLv3:AES256-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:AES256-SHA: verify error:num=21:unable to verify the first certificate
`-SSLv3:AES256-SHA: verify return:1
`-SSLv3:AES256-SHA: CONNECTED(00000003)
`-SSLv3:AES256-SHA: ---
`-SSLv3:AES256-SHA: Certificate chain
`-SSLv3:AES256-SHA:  0 s:/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-SSLv3:AES256-SHA:    i:/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-SSLv3:AES256-SHA: ---
`-SSLv3:AES256-SHA: Server certificate
`-SSLv3:AES256-SHA: -----BEGIN CERTIFICATE-----
`-SSLv3:AES256-SHA: MIIC+zCCAmQCFQFW9mR5x0Bx5RE0plmguZNsQgfuwzANBgkqhkiG9w0BAQUFADCB
`-SSLv3:AES256-SHA: hzELMAkGA1UEBhMCUk8xDjAMBgNVBAgMBVRpbWlzMRIwEAYDVQQHDAlUaW1pc29h
`-SSLv3:AES256-SHA: cmExDjAMBgNVBAoMBU9XQVNQMQwwCgYDVQQLDANTZWMxDzANBgNVBAMMBkNvcm5l
`-SSLv3:AES256-SHA: bDElMCMGCSqGSIb3DQEJARYWY29ybmVsLnB1bmdhQGdtYWlsLmNvbTAeFw0xNDA2
`-SSLv3:AES256-SHA: MDIxMDQ5NTNaFw0xNTA2MDIxMDQ5NTNaMGwxCzAJBgNVBAYTAklOMQswCQYDVQQI
`-SSLv3:AES256-SHA: EwJBUDESMBAGA1UEBxMJMTI3LjAuMC4xMQ0wCwYDVQQKEwRPV1RGMRYwFAYDVQQL
`-SSLv3:AES256-SHA: Ew1JbmJvdW5kLVByb3h5MRUwEwYDVQQDFAwqLjE3MC4xODguODQwggEiMA0GCSqG
`-SSLv3:AES256-SHA: SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPMd28MEd6Bl1mlUwMxCJRwojZOpu0dQc+
`-SSLv3:AES256-SHA: 1JGqEJYvaCBgRfP7izHsWFpV8rjWO4+34FciopX8a11W5bu+lE5S0esoN7tzci88
`-SSLv3:AES256-SHA: M80NH7BjgsjT8akcH8yvGFatXS1WCWiCN2M23Pevvpvo0JDKpUiRaiDPumZ8/aI0
`-SSLv3:AES256-SHA: XR/ZOlvGylSU5wl4FG7zihf0EcfCWLfe1+PgMP3hkawdG6Ehe8DO95rxa4GaUdSN
`-SSLv3:AES256-SHA: LEF+6bUlV4yYWBLQKHKpDLrQJm7Y8YVTqRzqX1oE7rctISrGKrsG0+ni9ibshlEr
`-SSLv3:AES256-SHA: lu+XpQJyDk06ilrYAc3BByEDPw0tyu6SWR37bbM22NfxI8zc89QjAgMBAAEwDQYJ
`-SSLv3:AES256-SHA: KoZIhvcNAQEFBQADgYEAfcPJfa3gTUkas22HxgDuyNfiM8VOX2syNmIBBp+4LtaO
`-SSLv3:AES256-SHA: 3eTu3mJ7JrbNE2pouTx5SOvVeoqkhijeNnLOb7gyc904BHqBQRp7Lxxo0mTpoW1q
`-SSLv3:AES256-SHA: F7ZexLWp2LQIQnMzWwdf/bc/zOZklwF2nBm+Kz/V//Ye/vxQdX9SqF6BWnLG5JM=
`-SSLv3:AES256-SHA: -----END CERTIFICATE-----
`-SSLv3:AES256-SHA: subject=/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-SSLv3:AES256-SHA: issuer=/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-SSLv3:AES256-SHA: ---
`-SSLv3:AES256-SHA: No client certificate CA names sent
`-SSLv3:AES256-SHA: ---
`-SSLv3:AES256-SHA: SSL handshake has read 968 bytes and written 409 bytes
`-SSLv3:AES256-SHA: ---
`-SSLv3:AES256-SHA: New, TLSv1/SSLv3, Cipher is AES256-SHA
`-SSLv3:AES256-SHA: Server public key is 2048 bit
`-SSLv3:AES256-SHA: Secure Renegotiation IS supported
`-SSLv3:AES256-SHA: Compression: zlib compression
`-SSLv3:AES256-SHA: Expansion: zlib compression
`-SSLv3:AES256-SHA: SSL-Session:
`-SSLv3:AES256-SHA:     Protocol  : SSLv3
`-SSLv3:AES256-SHA:     Cipher    : AES256-SHA
`-SSLv3:AES256-SHA:     Session-ID: F9B4E24E0FAA2D45857521BF60FBCF59EDCD4537BA3CEB9BBC82D2EDCCDB7A3B
`-SSLv3:AES256-SHA:     Session-ID-ctx: 
`-SSLv3:AES256-SHA:     Master-Key: E61278D0A78DDFBD9624C2096789ACE5DA7C0DAC98B22ADDDE3AD0CB1329F08D1BB66F9D2ED322674DDAD8A68B9872D2
`-SSLv3:AES256-SHA:     Key-Arg   : None
`-SSLv3:AES256-SHA:     PSK identity: None
`-SSLv3:AES256-SHA:     PSK identity hint: None
`-SSLv3:AES256-SHA:     SRP username: None
`-SSLv3:AES256-SHA:     Compression: 1 (zlib compression)
`-SSLv3:AES256-SHA:     Start Time: 1401715109
`-SSLv3:AES256-SHA:     Timeout   : 7200 (sec)
`-SSLv3:AES256-SHA:     Verify return code: 21 (unable to verify the first certificate)
`-SSLv3:AES256-SHA: ---
`-SSLv3:AES256-SHA: DONE
------------------------------------------------------------------------
Mon Jun  2 16:18:29 2014 AES256-SHA256
`-TLS1:AES256-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:AES256-SHA256: 139883410400936:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:AES256-SHA256: CONNECTED(00000003)
`-TLS1:AES256-SHA256: ---
`-TLS1:AES256-SHA256: no peer certificate available
`-TLS1:AES256-SHA256: ---
`-TLS1:AES256-SHA256: No client certificate CA names sent
`-TLS1:AES256-SHA256: ---
`-TLS1:AES256-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:AES256-SHA256: ---
`-TLS1:AES256-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:AES256-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:AES256-SHA256: Compression: NONE
`-TLS1:AES256-SHA256: Expansion: NONE
`-TLS1:AES256-SHA256: SSL-Session:
`-TLS1:AES256-SHA256:     Protocol  : TLSv1
`-TLS1:AES256-SHA256:     Cipher    : 0000
`-TLS1:AES256-SHA256:     Session-ID: 
`-TLS1:AES256-SHA256:     Session-ID-ctx: 
`-TLS1:AES256-SHA256:     Master-Key: 
`-TLS1:AES256-SHA256:     Key-Arg   : None
`-TLS1:AES256-SHA256:     PSK identity: None
`-TLS1:AES256-SHA256:     PSK identity hint: None
`-TLS1:AES256-SHA256:     SRP username: None
`-TLS1:AES256-SHA256:     Start Time: 1401715109
`-TLS1:AES256-SHA256:     Timeout   : 7200 (sec)
`-TLS1:AES256-SHA256:     Verify return code: 0 (ok)
`-TLS1:AES256-SHA256: ---

`-SSLv2:AES256-SHA256: unknown option -ssl2
`-SSLv2:AES256-SHA256: usage: s_client args
`-SSLv2:AES256-SHA256: 
`-SSLv2:AES256-SHA256:  -host host     - use -connect instead
`-SSLv2:AES256-SHA256:  -port port     - use -connect instead
`-SSLv2:AES256-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:AES256-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:AES256-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:AES256-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:AES256-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:AES256-SHA256:                  not specified but cert file is.
`-SSLv2:AES256-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:AES256-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:AES256-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:AES256-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:AES256-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:AES256-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:AES256-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:AES256-SHA256:  -debug        - extra output
`-SSLv2:AES256-SHA256:  -msg          - Show protocol messages
`-SSLv2:AES256-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:AES256-SHA256:  -state        - print the 'ssl' states
`-SSLv2:AES256-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:AES256-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:AES256-SHA256:  -quiet        - no s_client output
`-SSLv2:AES256-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:AES256-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:AES256-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:AES256-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:AES256-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:AES256-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:AES256-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:AES256-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:AES256-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:AES256-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:AES256-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:AES256-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:AES256-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:AES256-SHA256:  -tls1         - just use TLSv1
`-SSLv2:AES256-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:AES256-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:AES256-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:AES256-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:AES256-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:AES256-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:AES256-SHA256:                  command to see what is available
`-SSLv2:AES256-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:AES256-SHA256:                  for those protocols that support it, where
`-SSLv2:AES256-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:AES256-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:AES256-SHA256:                  are supported.
`-SSLv2:AES256-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:AES256-SHA256:  -rand file:file:...
`-SSLv2:AES256-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:AES256-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:AES256-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:AES256-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:AES256-SHA256:  -status           - request certificate status from server
`-SSLv2:AES256-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:AES256-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:AES256-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:AES256-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:AES256-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:AES256-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:AES256-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:AES256-SHA256: 140534284285608:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:AES256-SHA256: CONNECTED(00000003)
`-SSLv3:AES256-SHA256: ---
`-SSLv3:AES256-SHA256: no peer certificate available
`-SSLv3:AES256-SHA256: ---
`-SSLv3:AES256-SHA256: No client certificate CA names sent
`-SSLv3:AES256-SHA256: ---
`-SSLv3:AES256-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:AES256-SHA256: ---
`-SSLv3:AES256-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:AES256-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:AES256-SHA256: Compression: NONE
`-SSLv3:AES256-SHA256: Expansion: NONE
`-SSLv3:AES256-SHA256: SSL-Session:
`-SSLv3:AES256-SHA256:     Protocol  : SSLv3
`-SSLv3:AES256-SHA256:     Cipher    : 0000
`-SSLv3:AES256-SHA256:     Session-ID: 
`-SSLv3:AES256-SHA256:     Session-ID-ctx: 
`-SSLv3:AES256-SHA256:     Master-Key: 
`-SSLv3:AES256-SHA256:     Key-Arg   : None
`-SSLv3:AES256-SHA256:     PSK identity: None
`-SSLv3:AES256-SHA256:     PSK identity hint: None
`-SSLv3:AES256-SHA256:     SRP username: None
`-SSLv3:AES256-SHA256:     Start Time: 1401715110
`-SSLv3:AES256-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:AES256-SHA256:     Verify return code: 0 (ok)
`-SSLv3:AES256-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:30 2014 CAMELLIA128-SHA
`-TLS1:CAMELLIA128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:CAMELLIA128-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:CAMELLIA128-SHA: verify error:num=20:unable to get local issuer certificate
`-TLS1:CAMELLIA128-SHA: verify return:1
`-TLS1:CAMELLIA128-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:CAMELLIA128-SHA: verify error:num=27:certificate not trusted
`-TLS1:CAMELLIA128-SHA: verify return:1
`-TLS1:CAMELLIA128-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:CAMELLIA128-SHA: verify error:num=21:unable to verify the first certificate
`-TLS1:CAMELLIA128-SHA: verify return:1
`-TLS1:CAMELLIA128-SHA: CONNECTED(00000003)
`-TLS1:CAMELLIA128-SHA: ---
`-TLS1:CAMELLIA128-SHA: Certificate chain
`-TLS1:CAMELLIA128-SHA:  0 s:/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-TLS1:CAMELLIA128-SHA:    i:/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-TLS1:CAMELLIA128-SHA: ---
`-TLS1:CAMELLIA128-SHA: Server certificate
`-TLS1:CAMELLIA128-SHA: -----BEGIN CERTIFICATE-----
`-TLS1:CAMELLIA128-SHA: MIIC+zCCAmQCFQFW9mR5x0Bx5RE0plmguZNsQgfuwzANBgkqhkiG9w0BAQUFADCB
`-TLS1:CAMELLIA128-SHA: hzELMAkGA1UEBhMCUk8xDjAMBgNVBAgMBVRpbWlzMRIwEAYDVQQHDAlUaW1pc29h
`-TLS1:CAMELLIA128-SHA: cmExDjAMBgNVBAoMBU9XQVNQMQwwCgYDVQQLDANTZWMxDzANBgNVBAMMBkNvcm5l
`-TLS1:CAMELLIA128-SHA: bDElMCMGCSqGSIb3DQEJARYWY29ybmVsLnB1bmdhQGdtYWlsLmNvbTAeFw0xNDA2
`-TLS1:CAMELLIA128-SHA: MDIxMDQ5NTNaFw0xNTA2MDIxMDQ5NTNaMGwxCzAJBgNVBAYTAklOMQswCQYDVQQI
`-TLS1:CAMELLIA128-SHA: EwJBUDESMBAGA1UEBxMJMTI3LjAuMC4xMQ0wCwYDVQQKEwRPV1RGMRYwFAYDVQQL
`-TLS1:CAMELLIA128-SHA: Ew1JbmJvdW5kLVByb3h5MRUwEwYDVQQDFAwqLjE3MC4xODguODQwggEiMA0GCSqG
`-TLS1:CAMELLIA128-SHA: SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPMd28MEd6Bl1mlUwMxCJRwojZOpu0dQc+
`-TLS1:CAMELLIA128-SHA: 1JGqEJYvaCBgRfP7izHsWFpV8rjWO4+34FciopX8a11W5bu+lE5S0esoN7tzci88
`-TLS1:CAMELLIA128-SHA: M80NH7BjgsjT8akcH8yvGFatXS1WCWiCN2M23Pevvpvo0JDKpUiRaiDPumZ8/aI0
`-TLS1:CAMELLIA128-SHA: XR/ZOlvGylSU5wl4FG7zihf0EcfCWLfe1+PgMP3hkawdG6Ehe8DO95rxa4GaUdSN
`-TLS1:CAMELLIA128-SHA: LEF+6bUlV4yYWBLQKHKpDLrQJm7Y8YVTqRzqX1oE7rctISrGKrsG0+ni9ibshlEr
`-TLS1:CAMELLIA128-SHA: lu+XpQJyDk06ilrYAc3BByEDPw0tyu6SWR37bbM22NfxI8zc89QjAgMBAAEwDQYJ
`-TLS1:CAMELLIA128-SHA: KoZIhvcNAQEFBQADgYEAfcPJfa3gTUkas22HxgDuyNfiM8VOX2syNmIBBp+4LtaO
`-TLS1:CAMELLIA128-SHA: 3eTu3mJ7JrbNE2pouTx5SOvVeoqkhijeNnLOb7gyc904BHqBQRp7Lxxo0mTpoW1q
`-TLS1:CAMELLIA128-SHA: F7ZexLWp2LQIQnMzWwdf/bc/zOZklwF2nBm+Kz/V//Ye/vxQdX9SqF6BWnLG5JM=
`-TLS1:CAMELLIA128-SHA: -----END CERTIFICATE-----
`-TLS1:CAMELLIA128-SHA: subject=/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-TLS1:CAMELLIA128-SHA: issuer=/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-TLS1:CAMELLIA128-SHA: ---
`-TLS1:CAMELLIA128-SHA: No client certificate CA names sent
`-TLS1:CAMELLIA128-SHA: ---
`-TLS1:CAMELLIA128-SHA: SSL handshake has read 1088 bytes and written 390 bytes
`-TLS1:CAMELLIA128-SHA: ---
`-TLS1:CAMELLIA128-SHA: New, TLSv1/SSLv3, Cipher is CAMELLIA128-SHA
`-TLS1:CAMELLIA128-SHA: Server public key is 2048 bit
`-TLS1:CAMELLIA128-SHA: Secure Renegotiation IS supported
`-TLS1:CAMELLIA128-SHA: Compression: zlib compression
`-TLS1:CAMELLIA128-SHA: Expansion: zlib compression
`-TLS1:CAMELLIA128-SHA: SSL-Session:
`-TLS1:CAMELLIA128-SHA:     Protocol  : TLSv1
`-TLS1:CAMELLIA128-SHA:     Cipher    : CAMELLIA128-SHA
`-TLS1:CAMELLIA128-SHA:     Session-ID: E94DE755F488F11B94C5E1D4EB8E7242557B6820A062A9C8D51B3FE2382F78F0
`-TLS1:CAMELLIA128-SHA:     Session-ID-ctx: 
`-TLS1:CAMELLIA128-SHA:     Master-Key: 29609FD74BEBB46A8F190D68F959A6B5C1B27BF035A5B589CE97D6460CBDADBD2C860698EB0B56473F9A152F3E785C79
`-TLS1:CAMELLIA128-SHA:     Key-Arg   : None
`-TLS1:CAMELLIA128-SHA:     PSK identity: None
`-TLS1:CAMELLIA128-SHA:     PSK identity hint: None
`-TLS1:CAMELLIA128-SHA:     SRP username: None
`-TLS1:CAMELLIA128-SHA:     TLS session ticket lifetime hint: 300 (seconds)
`-TLS1:CAMELLIA128-SHA:     TLS session ticket:
`-TLS1:CAMELLIA128-SHA:     0000 - 94 e4 06 e6 3a bd ac dc-75 53 ca e8 ea 10 bb 42   ....:...uS.....B
`-TLS1:CAMELLIA128-SHA:     0010 - 67 ca bf 18 84 8b ce b1-8b 47 5f 15 7f 06 d1 38   g........G_....8
`-TLS1:CAMELLIA128-SHA:     0020 - c4 8d a8 29 43 cf b0 1e-bb bc 88 56 be 46 85 b1   ...)C......V.F..
`-TLS1:CAMELLIA128-SHA:     0030 - 2e 6b a4 c5 04 fb 32 7b-c8 bd 54 cd fa c7 6c 48   .k....2{..T...lH
`-TLS1:CAMELLIA128-SHA:     0040 - e8 5d 14 b6 46 21 8c 40-17 0e 1a 6c 48 84 4b b6   .]..F!.@...lH.K.
`-TLS1:CAMELLIA128-SHA:     0050 - 40 81 29 58 42 98 aa b4-1e 35 4e 06 17 61 82 66   @.)XB....5N..a.f
`-TLS1:CAMELLIA128-SHA:     0060 - 45 35 11 bd 6c b0 5c f5-98 1c 4c af a9 a5 4e 71   E5..l.\...L...Nq
`-TLS1:CAMELLIA128-SHA:     0070 - 1a 96 9d 79 1d 9c bb de-f5 da 4f 66 d9 f4 6e 8c   ...y......Of..n.
`-TLS1:CAMELLIA128-SHA:     0080 - fb 98 69 f3 97 49 9a c7-9d d0 4d 9c 6f 94 38 69   ..i..I....M.o.8i
`-TLS1:CAMELLIA128-SHA:     0090 - b2 f7 d2 71 7f 00 de 9d-ae 56 36 e5 9f 09 1e 40   ...q.....V6....@
`-TLS1:CAMELLIA128-SHA: 
`-TLS1:CAMELLIA128-SHA:     Compression: 1 (zlib compression)
`-TLS1:CAMELLIA128-SHA:     Start Time: 1401715110
`-TLS1:CAMELLIA128-SHA:     Timeout   : 7200 (sec)
`-TLS1:CAMELLIA128-SHA:     Verify return code: 21 (unable to verify the first certificate)
`-TLS1:CAMELLIA128-SHA: ---
`-TLS1:CAMELLIA128-SHA: DONE

`-SSLv2:CAMELLIA128-SHA: unknown option -ssl2
`-SSLv2:CAMELLIA128-SHA: usage: s_client args
`-SSLv2:CAMELLIA128-SHA: 
`-SSLv2:CAMELLIA128-SHA:  -host host     - use -connect instead
`-SSLv2:CAMELLIA128-SHA:  -port port     - use -connect instead
`-SSLv2:CAMELLIA128-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:CAMELLIA128-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:CAMELLIA128-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:CAMELLIA128-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:CAMELLIA128-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:CAMELLIA128-SHA:                  not specified but cert file is.
`-SSLv2:CAMELLIA128-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:CAMELLIA128-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:CAMELLIA128-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:CAMELLIA128-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:CAMELLIA128-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:CAMELLIA128-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:CAMELLIA128-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:CAMELLIA128-SHA:  -debug        - extra output
`-SSLv2:CAMELLIA128-SHA:  -msg          - Show protocol messages
`-SSLv2:CAMELLIA128-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:CAMELLIA128-SHA:  -state        - print the 'ssl' states
`-SSLv2:CAMELLIA128-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:CAMELLIA128-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:CAMELLIA128-SHA:  -quiet        - no s_client output
`-SSLv2:CAMELLIA128-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:CAMELLIA128-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:CAMELLIA128-SHA:  -psk_identity arg - PSK identity
`-SSLv2:CAMELLIA128-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:CAMELLIA128-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:CAMELLIA128-SHA:  -srppass arg      - password for 'user'
`-SSLv2:CAMELLIA128-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:CAMELLIA128-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:CAMELLIA128-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:CAMELLIA128-SHA:  -ssl2         - just use SSLv2
`-SSLv2:CAMELLIA128-SHA:  -ssl3         - just use SSLv3
`-SSLv2:CAMELLIA128-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:CAMELLIA128-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:CAMELLIA128-SHA:  -tls1         - just use TLSv1
`-SSLv2:CAMELLIA128-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:CAMELLIA128-SHA:  -mtu          - set the link layer MTU
`-SSLv2:CAMELLIA128-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:CAMELLIA128-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:CAMELLIA128-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:CAMELLIA128-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:CAMELLIA128-SHA:                  command to see what is available
`-SSLv2:CAMELLIA128-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:CAMELLIA128-SHA:                  for those protocols that support it, where
`-SSLv2:CAMELLIA128-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:CAMELLIA128-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:CAMELLIA128-SHA:                  are supported.
`-SSLv2:CAMELLIA128-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:CAMELLIA128-SHA:  -rand file:file:...
`-SSLv2:CAMELLIA128-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:CAMELLIA128-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:CAMELLIA128-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:CAMELLIA128-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:CAMELLIA128-SHA:  -status           - request certificate status from server
`-SSLv2:CAMELLIA128-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:CAMELLIA128-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:CAMELLIA128-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:CAMELLIA128-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:CAMELLIA128-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:CAMELLIA128-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:CAMELLIA128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:CAMELLIA128-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:CAMELLIA128-SHA: verify error:num=20:unable to get local issuer certificate
`-SSLv3:CAMELLIA128-SHA: verify return:1
`-SSLv3:CAMELLIA128-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:CAMELLIA128-SHA: verify error:num=27:certificate not trusted
`-SSLv3:CAMELLIA128-SHA: verify return:1
`-SSLv3:CAMELLIA128-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:CAMELLIA128-SHA: verify error:num=21:unable to verify the first certificate
`-SSLv3:CAMELLIA128-SHA: verify return:1
`-SSLv3:CAMELLIA128-SHA: CONNECTED(00000003)
`-SSLv3:CAMELLIA128-SHA: ---
`-SSLv3:CAMELLIA128-SHA: Certificate chain
`-SSLv3:CAMELLIA128-SHA:  0 s:/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-SSLv3:CAMELLIA128-SHA:    i:/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-SSLv3:CAMELLIA128-SHA: ---
`-SSLv3:CAMELLIA128-SHA: Server certificate
`-SSLv3:CAMELLIA128-SHA: -----BEGIN CERTIFICATE-----
`-SSLv3:CAMELLIA128-SHA: MIIC+zCCAmQCFQFW9mR5x0Bx5RE0plmguZNsQgfuwzANBgkqhkiG9w0BAQUFADCB
`-SSLv3:CAMELLIA128-SHA: hzELMAkGA1UEBhMCUk8xDjAMBgNVBAgMBVRpbWlzMRIwEAYDVQQHDAlUaW1pc29h
`-SSLv3:CAMELLIA128-SHA: cmExDjAMBgNVBAoMBU9XQVNQMQwwCgYDVQQLDANTZWMxDzANBgNVBAMMBkNvcm5l
`-SSLv3:CAMELLIA128-SHA: bDElMCMGCSqGSIb3DQEJARYWY29ybmVsLnB1bmdhQGdtYWlsLmNvbTAeFw0xNDA2
`-SSLv3:CAMELLIA128-SHA: MDIxMDQ5NTNaFw0xNTA2MDIxMDQ5NTNaMGwxCzAJBgNVBAYTAklOMQswCQYDVQQI
`-SSLv3:CAMELLIA128-SHA: EwJBUDESMBAGA1UEBxMJMTI3LjAuMC4xMQ0wCwYDVQQKEwRPV1RGMRYwFAYDVQQL
`-SSLv3:CAMELLIA128-SHA: Ew1JbmJvdW5kLVByb3h5MRUwEwYDVQQDFAwqLjE3MC4xODguODQwggEiMA0GCSqG
`-SSLv3:CAMELLIA128-SHA: SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPMd28MEd6Bl1mlUwMxCJRwojZOpu0dQc+
`-SSLv3:CAMELLIA128-SHA: 1JGqEJYvaCBgRfP7izHsWFpV8rjWO4+34FciopX8a11W5bu+lE5S0esoN7tzci88
`-SSLv3:CAMELLIA128-SHA: M80NH7BjgsjT8akcH8yvGFatXS1WCWiCN2M23Pevvpvo0JDKpUiRaiDPumZ8/aI0
`-SSLv3:CAMELLIA128-SHA: XR/ZOlvGylSU5wl4FG7zihf0EcfCWLfe1+PgMP3hkawdG6Ehe8DO95rxa4GaUdSN
`-SSLv3:CAMELLIA128-SHA: LEF+6bUlV4yYWBLQKHKpDLrQJm7Y8YVTqRzqX1oE7rctISrGKrsG0+ni9ibshlEr
`-SSLv3:CAMELLIA128-SHA: lu+XpQJyDk06ilrYAc3BByEDPw0tyu6SWR37bbM22NfxI8zc89QjAgMBAAEwDQYJ
`-SSLv3:CAMELLIA128-SHA: KoZIhvcNAQEFBQADgYEAfcPJfa3gTUkas22HxgDuyNfiM8VOX2syNmIBBp+4LtaO
`-SSLv3:CAMELLIA128-SHA: 3eTu3mJ7JrbNE2pouTx5SOvVeoqkhijeNnLOb7gyc904BHqBQRp7Lxxo0mTpoW1q
`-SSLv3:CAMELLIA128-SHA: F7ZexLWp2LQIQnMzWwdf/bc/zOZklwF2nBm+Kz/V//Ye/vxQdX9SqF6BWnLG5JM=
`-SSLv3:CAMELLIA128-SHA: -----END CERTIFICATE-----
`-SSLv3:CAMELLIA128-SHA: subject=/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-SSLv3:CAMELLIA128-SHA: issuer=/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-SSLv3:CAMELLIA128-SHA: ---
`-SSLv3:CAMELLIA128-SHA: No client certificate CA names sent
`-SSLv3:CAMELLIA128-SHA: ---
`-SSLv3:CAMELLIA128-SHA: SSL handshake has read 968 bytes and written 409 bytes
`-SSLv3:CAMELLIA128-SHA: ---
`-SSLv3:CAMELLIA128-SHA: New, TLSv1/SSLv3, Cipher is CAMELLIA128-SHA
`-SSLv3:CAMELLIA128-SHA: Server public key is 2048 bit
`-SSLv3:CAMELLIA128-SHA: Secure Renegotiation IS supported
`-SSLv3:CAMELLIA128-SHA: Compression: zlib compression
`-SSLv3:CAMELLIA128-SHA: Expansion: zlib compression
`-SSLv3:CAMELLIA128-SHA: SSL-Session:
`-SSLv3:CAMELLIA128-SHA:     Protocol  : SSLv3
`-SSLv3:CAMELLIA128-SHA:     Cipher    : CAMELLIA128-SHA
`-SSLv3:CAMELLIA128-SHA:     Session-ID: 4C8154B8561FE7E33E6EE138DE7E5B3F04353EAA0DC27B190CD8BBA88248837E
`-SSLv3:CAMELLIA128-SHA:     Session-ID-ctx: 
`-SSLv3:CAMELLIA128-SHA:     Master-Key: 5960DC91B673281EE37C73C20503736A169907BA4F692D09310C17CFA2E354D34948B1DFEC71C36752B3818664E29F09
`-SSLv3:CAMELLIA128-SHA:     Key-Arg   : None
`-SSLv3:CAMELLIA128-SHA:     PSK identity: None
`-SSLv3:CAMELLIA128-SHA:     PSK identity hint: None
`-SSLv3:CAMELLIA128-SHA:     SRP username: None
`-SSLv3:CAMELLIA128-SHA:     Compression: 1 (zlib compression)
`-SSLv3:CAMELLIA128-SHA:     Start Time: 1401715111
`-SSLv3:CAMELLIA128-SHA:     Timeout   : 7200 (sec)
`-SSLv3:CAMELLIA128-SHA:     Verify return code: 21 (unable to verify the first certificate)
`-SSLv3:CAMELLIA128-SHA: ---
`-SSLv3:CAMELLIA128-SHA: DONE
------------------------------------------------------------------------
Mon Jun  2 16:18:31 2014 CAMELLIA256-SHA
`-TLS1:CAMELLIA256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:CAMELLIA256-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:CAMELLIA256-SHA: verify error:num=20:unable to get local issuer certificate
`-TLS1:CAMELLIA256-SHA: verify return:1
`-TLS1:CAMELLIA256-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:CAMELLIA256-SHA: verify error:num=27:certificate not trusted
`-TLS1:CAMELLIA256-SHA: verify return:1
`-TLS1:CAMELLIA256-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:CAMELLIA256-SHA: verify error:num=21:unable to verify the first certificate
`-TLS1:CAMELLIA256-SHA: verify return:1
`-TLS1:CAMELLIA256-SHA: CONNECTED(00000003)
`-TLS1:CAMELLIA256-SHA: ---
`-TLS1:CAMELLIA256-SHA: Certificate chain
`-TLS1:CAMELLIA256-SHA:  0 s:/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-TLS1:CAMELLIA256-SHA:    i:/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-TLS1:CAMELLIA256-SHA: ---
`-TLS1:CAMELLIA256-SHA: Server certificate
`-TLS1:CAMELLIA256-SHA: -----BEGIN CERTIFICATE-----
`-TLS1:CAMELLIA256-SHA: MIIC+zCCAmQCFQFW9mR5x0Bx5RE0plmguZNsQgfuwzANBgkqhkiG9w0BAQUFADCB
`-TLS1:CAMELLIA256-SHA: hzELMAkGA1UEBhMCUk8xDjAMBgNVBAgMBVRpbWlzMRIwEAYDVQQHDAlUaW1pc29h
`-TLS1:CAMELLIA256-SHA: cmExDjAMBgNVBAoMBU9XQVNQMQwwCgYDVQQLDANTZWMxDzANBgNVBAMMBkNvcm5l
`-TLS1:CAMELLIA256-SHA: bDElMCMGCSqGSIb3DQEJARYWY29ybmVsLnB1bmdhQGdtYWlsLmNvbTAeFw0xNDA2
`-TLS1:CAMELLIA256-SHA: MDIxMDQ5NTNaFw0xNTA2MDIxMDQ5NTNaMGwxCzAJBgNVBAYTAklOMQswCQYDVQQI
`-TLS1:CAMELLIA256-SHA: EwJBUDESMBAGA1UEBxMJMTI3LjAuMC4xMQ0wCwYDVQQKEwRPV1RGMRYwFAYDVQQL
`-TLS1:CAMELLIA256-SHA: Ew1JbmJvdW5kLVByb3h5MRUwEwYDVQQDFAwqLjE3MC4xODguODQwggEiMA0GCSqG
`-TLS1:CAMELLIA256-SHA: SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPMd28MEd6Bl1mlUwMxCJRwojZOpu0dQc+
`-TLS1:CAMELLIA256-SHA: 1JGqEJYvaCBgRfP7izHsWFpV8rjWO4+34FciopX8a11W5bu+lE5S0esoN7tzci88
`-TLS1:CAMELLIA256-SHA: M80NH7BjgsjT8akcH8yvGFatXS1WCWiCN2M23Pevvpvo0JDKpUiRaiDPumZ8/aI0
`-TLS1:CAMELLIA256-SHA: XR/ZOlvGylSU5wl4FG7zihf0EcfCWLfe1+PgMP3hkawdG6Ehe8DO95rxa4GaUdSN
`-TLS1:CAMELLIA256-SHA: LEF+6bUlV4yYWBLQKHKpDLrQJm7Y8YVTqRzqX1oE7rctISrGKrsG0+ni9ibshlEr
`-TLS1:CAMELLIA256-SHA: lu+XpQJyDk06ilrYAc3BByEDPw0tyu6SWR37bbM22NfxI8zc89QjAgMBAAEwDQYJ
`-TLS1:CAMELLIA256-SHA: KoZIhvcNAQEFBQADgYEAfcPJfa3gTUkas22HxgDuyNfiM8VOX2syNmIBBp+4LtaO
`-TLS1:CAMELLIA256-SHA: 3eTu3mJ7JrbNE2pouTx5SOvVeoqkhijeNnLOb7gyc904BHqBQRp7Lxxo0mTpoW1q
`-TLS1:CAMELLIA256-SHA: F7ZexLWp2LQIQnMzWwdf/bc/zOZklwF2nBm+Kz/V//Ye/vxQdX9SqF6BWnLG5JM=
`-TLS1:CAMELLIA256-SHA: -----END CERTIFICATE-----
`-TLS1:CAMELLIA256-SHA: subject=/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-TLS1:CAMELLIA256-SHA: issuer=/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-TLS1:CAMELLIA256-SHA: ---
`-TLS1:CAMELLIA256-SHA: No client certificate CA names sent
`-TLS1:CAMELLIA256-SHA: ---
`-TLS1:CAMELLIA256-SHA: SSL handshake has read 1088 bytes and written 390 bytes
`-TLS1:CAMELLIA256-SHA: ---
`-TLS1:CAMELLIA256-SHA: New, TLSv1/SSLv3, Cipher is CAMELLIA256-SHA
`-TLS1:CAMELLIA256-SHA: Server public key is 2048 bit
`-TLS1:CAMELLIA256-SHA: Secure Renegotiation IS supported
`-TLS1:CAMELLIA256-SHA: Compression: zlib compression
`-TLS1:CAMELLIA256-SHA: Expansion: zlib compression
`-TLS1:CAMELLIA256-SHA: SSL-Session:
`-TLS1:CAMELLIA256-SHA:     Protocol  : TLSv1
`-TLS1:CAMELLIA256-SHA:     Cipher    : CAMELLIA256-SHA
`-TLS1:CAMELLIA256-SHA:     Session-ID: B9CC494659ABA64D85D05203100362783E5A3B1157528D83534BDF0DAC30BA19
`-TLS1:CAMELLIA256-SHA:     Session-ID-ctx: 
`-TLS1:CAMELLIA256-SHA:     Master-Key: 559E60797816B2726560FBD01D18048903522B32CE252646E34EA5DC29F8F89A8856B217ADC9D0A6E989B04321240593
`-TLS1:CAMELLIA256-SHA:     Key-Arg   : None
`-TLS1:CAMELLIA256-SHA:     PSK identity: None
`-TLS1:CAMELLIA256-SHA:     PSK identity hint: None
`-TLS1:CAMELLIA256-SHA:     SRP username: None
`-TLS1:CAMELLIA256-SHA:     TLS session ticket lifetime hint: 300 (seconds)
`-TLS1:CAMELLIA256-SHA:     TLS session ticket:
`-TLS1:CAMELLIA256-SHA:     0000 - ca 53 d4 bf fe 90 8d d6-00 f8 66 1e ce a0 6d d9   .S........f...m.
`-TLS1:CAMELLIA256-SHA:     0010 - 1f a2 b7 a7 27 62 3f 38-08 46 46 0f 95 25 dd ac   ....'b?8.FF..%..
`-TLS1:CAMELLIA256-SHA:     0020 - e0 45 9d b7 55 08 04 24-43 d2 b2 e5 ca bf eb 09   .E..U..$C.......
`-TLS1:CAMELLIA256-SHA:     0030 - 93 01 a1 30 af 7f 9c 00-4f d9 3f 75 6c 14 2b 7c   ...0....O.?ul.+|
`-TLS1:CAMELLIA256-SHA:     0040 - 9e 79 e0 28 0c 54 80 8f-41 1a fd 14 7b 3a 23 d2   .y.(.T..A...{:#.
`-TLS1:CAMELLIA256-SHA:     0050 - 20 b1 96 bc 8e de 19 52-80 92 52 c4 df 03 71 36    ......R..R...q6
`-TLS1:CAMELLIA256-SHA:     0060 - 2e bc 6f 23 41 6e cf 36-cf da e1 85 c8 5b 8c 2b   ..o#An.6.....[.+
`-TLS1:CAMELLIA256-SHA:     0070 - 79 47 c7 d6 52 4d 5a e8-4c 91 a2 d0 04 98 c5 a7   yG..RMZ.L.......
`-TLS1:CAMELLIA256-SHA:     0080 - 9d af 3e 8b da 7a 8b 3a-5c cc 3e ae 62 59 68 b8   ..>..z.:\.>.bYh.
`-TLS1:CAMELLIA256-SHA:     0090 - b5 dc 63 3a b2 20 a5 5e-78 f2 5d 0c aa b0 58 dc   ..c:. .^x.]...X.
`-TLS1:CAMELLIA256-SHA: 
`-TLS1:CAMELLIA256-SHA:     Compression: 1 (zlib compression)
`-TLS1:CAMELLIA256-SHA:     Start Time: 1401715111
`-TLS1:CAMELLIA256-SHA:     Timeout   : 7200 (sec)
`-TLS1:CAMELLIA256-SHA:     Verify return code: 21 (unable to verify the first certificate)
`-TLS1:CAMELLIA256-SHA: ---
`-TLS1:CAMELLIA256-SHA: DONE

`-SSLv2:CAMELLIA256-SHA: unknown option -ssl2
`-SSLv2:CAMELLIA256-SHA: usage: s_client args
`-SSLv2:CAMELLIA256-SHA: 
`-SSLv2:CAMELLIA256-SHA:  -host host     - use -connect instead
`-SSLv2:CAMELLIA256-SHA:  -port port     - use -connect instead
`-SSLv2:CAMELLIA256-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:CAMELLIA256-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:CAMELLIA256-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:CAMELLIA256-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:CAMELLIA256-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:CAMELLIA256-SHA:                  not specified but cert file is.
`-SSLv2:CAMELLIA256-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:CAMELLIA256-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:CAMELLIA256-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:CAMELLIA256-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:CAMELLIA256-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:CAMELLIA256-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:CAMELLIA256-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:CAMELLIA256-SHA:  -debug        - extra output
`-SSLv2:CAMELLIA256-SHA:  -msg          - Show protocol messages
`-SSLv2:CAMELLIA256-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:CAMELLIA256-SHA:  -state        - print the 'ssl' states
`-SSLv2:CAMELLIA256-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:CAMELLIA256-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:CAMELLIA256-SHA:  -quiet        - no s_client output
`-SSLv2:CAMELLIA256-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:CAMELLIA256-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:CAMELLIA256-SHA:  -psk_identity arg - PSK identity
`-SSLv2:CAMELLIA256-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:CAMELLIA256-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:CAMELLIA256-SHA:  -srppass arg      - password for 'user'
`-SSLv2:CAMELLIA256-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:CAMELLIA256-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:CAMELLIA256-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:CAMELLIA256-SHA:  -ssl2         - just use SSLv2
`-SSLv2:CAMELLIA256-SHA:  -ssl3         - just use SSLv3
`-SSLv2:CAMELLIA256-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:CAMELLIA256-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:CAMELLIA256-SHA:  -tls1         - just use TLSv1
`-SSLv2:CAMELLIA256-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:CAMELLIA256-SHA:  -mtu          - set the link layer MTU
`-SSLv2:CAMELLIA256-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:CAMELLIA256-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:CAMELLIA256-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:CAMELLIA256-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:CAMELLIA256-SHA:                  command to see what is available
`-SSLv2:CAMELLIA256-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:CAMELLIA256-SHA:                  for those protocols that support it, where
`-SSLv2:CAMELLIA256-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:CAMELLIA256-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:CAMELLIA256-SHA:                  are supported.
`-SSLv2:CAMELLIA256-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:CAMELLIA256-SHA:  -rand file:file:...
`-SSLv2:CAMELLIA256-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:CAMELLIA256-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:CAMELLIA256-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:CAMELLIA256-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:CAMELLIA256-SHA:  -status           - request certificate status from server
`-SSLv2:CAMELLIA256-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:CAMELLIA256-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:CAMELLIA256-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:CAMELLIA256-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:CAMELLIA256-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:CAMELLIA256-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:CAMELLIA256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:CAMELLIA256-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:CAMELLIA256-SHA: verify error:num=20:unable to get local issuer certificate
`-SSLv3:CAMELLIA256-SHA: verify return:1
`-SSLv3:CAMELLIA256-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:CAMELLIA256-SHA: verify error:num=27:certificate not trusted
`-SSLv3:CAMELLIA256-SHA: verify return:1
`-SSLv3:CAMELLIA256-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:CAMELLIA256-SHA: verify error:num=21:unable to verify the first certificate
`-SSLv3:CAMELLIA256-SHA: verify return:1
`-SSLv3:CAMELLIA256-SHA: CONNECTED(00000003)
`-SSLv3:CAMELLIA256-SHA: ---
`-SSLv3:CAMELLIA256-SHA: Certificate chain
`-SSLv3:CAMELLIA256-SHA:  0 s:/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-SSLv3:CAMELLIA256-SHA:    i:/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-SSLv3:CAMELLIA256-SHA: ---
`-SSLv3:CAMELLIA256-SHA: Server certificate
`-SSLv3:CAMELLIA256-SHA: -----BEGIN CERTIFICATE-----
`-SSLv3:CAMELLIA256-SHA: MIIC+zCCAmQCFQFW9mR5x0Bx5RE0plmguZNsQgfuwzANBgkqhkiG9w0BAQUFADCB
`-SSLv3:CAMELLIA256-SHA: hzELMAkGA1UEBhMCUk8xDjAMBgNVBAgMBVRpbWlzMRIwEAYDVQQHDAlUaW1pc29h
`-SSLv3:CAMELLIA256-SHA: cmExDjAMBgNVBAoMBU9XQVNQMQwwCgYDVQQLDANTZWMxDzANBgNVBAMMBkNvcm5l
`-SSLv3:CAMELLIA256-SHA: bDElMCMGCSqGSIb3DQEJARYWY29ybmVsLnB1bmdhQGdtYWlsLmNvbTAeFw0xNDA2
`-SSLv3:CAMELLIA256-SHA: MDIxMDQ5NTNaFw0xNTA2MDIxMDQ5NTNaMGwxCzAJBgNVBAYTAklOMQswCQYDVQQI
`-SSLv3:CAMELLIA256-SHA: EwJBUDESMBAGA1UEBxMJMTI3LjAuMC4xMQ0wCwYDVQQKEwRPV1RGMRYwFAYDVQQL
`-SSLv3:CAMELLIA256-SHA: Ew1JbmJvdW5kLVByb3h5MRUwEwYDVQQDFAwqLjE3MC4xODguODQwggEiMA0GCSqG
`-SSLv3:CAMELLIA256-SHA: SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPMd28MEd6Bl1mlUwMxCJRwojZOpu0dQc+
`-SSLv3:CAMELLIA256-SHA: 1JGqEJYvaCBgRfP7izHsWFpV8rjWO4+34FciopX8a11W5bu+lE5S0esoN7tzci88
`-SSLv3:CAMELLIA256-SHA: M80NH7BjgsjT8akcH8yvGFatXS1WCWiCN2M23Pevvpvo0JDKpUiRaiDPumZ8/aI0
`-SSLv3:CAMELLIA256-SHA: XR/ZOlvGylSU5wl4FG7zihf0EcfCWLfe1+PgMP3hkawdG6Ehe8DO95rxa4GaUdSN
`-SSLv3:CAMELLIA256-SHA: LEF+6bUlV4yYWBLQKHKpDLrQJm7Y8YVTqRzqX1oE7rctISrGKrsG0+ni9ibshlEr
`-SSLv3:CAMELLIA256-SHA: lu+XpQJyDk06ilrYAc3BByEDPw0tyu6SWR37bbM22NfxI8zc89QjAgMBAAEwDQYJ
`-SSLv3:CAMELLIA256-SHA: KoZIhvcNAQEFBQADgYEAfcPJfa3gTUkas22HxgDuyNfiM8VOX2syNmIBBp+4LtaO
`-SSLv3:CAMELLIA256-SHA: 3eTu3mJ7JrbNE2pouTx5SOvVeoqkhijeNnLOb7gyc904BHqBQRp7Lxxo0mTpoW1q
`-SSLv3:CAMELLIA256-SHA: F7ZexLWp2LQIQnMzWwdf/bc/zOZklwF2nBm+Kz/V//Ye/vxQdX9SqF6BWnLG5JM=
`-SSLv3:CAMELLIA256-SHA: -----END CERTIFICATE-----
`-SSLv3:CAMELLIA256-SHA: subject=/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-SSLv3:CAMELLIA256-SHA: issuer=/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-SSLv3:CAMELLIA256-SHA: ---
`-SSLv3:CAMELLIA256-SHA: No client certificate CA names sent
`-SSLv3:CAMELLIA256-SHA: ---
`-SSLv3:CAMELLIA256-SHA: SSL handshake has read 968 bytes and written 409 bytes
`-SSLv3:CAMELLIA256-SHA: ---
`-SSLv3:CAMELLIA256-SHA: New, TLSv1/SSLv3, Cipher is CAMELLIA256-SHA
`-SSLv3:CAMELLIA256-SHA: Server public key is 2048 bit
`-SSLv3:CAMELLIA256-SHA: Secure Renegotiation IS supported
`-SSLv3:CAMELLIA256-SHA: Compression: zlib compression
`-SSLv3:CAMELLIA256-SHA: Expansion: zlib compression
`-SSLv3:CAMELLIA256-SHA: SSL-Session:
`-SSLv3:CAMELLIA256-SHA:     Protocol  : SSLv3
`-SSLv3:CAMELLIA256-SHA:     Cipher    : CAMELLIA256-SHA
`-SSLv3:CAMELLIA256-SHA:     Session-ID: 1E7986F30D6FF7B549EAF2C6598DFE3471978794C0BFAB419516A1A1E5B1B76B
`-SSLv3:CAMELLIA256-SHA:     Session-ID-ctx: 
`-SSLv3:CAMELLIA256-SHA:     Master-Key: 853240860C2837601997287A54AAE7F3F66926757F114F7E5DA714E01EDE92B5C16F1CCF6948F9558F783E8304BC435F
`-SSLv3:CAMELLIA256-SHA:     Key-Arg   : None
`-SSLv3:CAMELLIA256-SHA:     PSK identity: None
`-SSLv3:CAMELLIA256-SHA:     PSK identity hint: None
`-SSLv3:CAMELLIA256-SHA:     SRP username: None
`-SSLv3:CAMELLIA256-SHA:     Compression: 1 (zlib compression)
`-SSLv3:CAMELLIA256-SHA:     Start Time: 1401715112
`-SSLv3:CAMELLIA256-SHA:     Timeout   : 7200 (sec)
`-SSLv3:CAMELLIA256-SHA:     Verify return code: 21 (unable to verify the first certificate)
`-SSLv3:CAMELLIA256-SHA: ---
`-SSLv3:CAMELLIA256-SHA: DONE
------------------------------------------------------------------------
Mon Jun  2 16:18:32 2014 DES-CBC-SHA
`-TLS1:DES-CBC-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DES-CBC-SHA: 139799339312808:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:DES-CBC-SHA: 139799339312808:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:DES-CBC-SHA: CONNECTED(00000003)
`-TLS1:DES-CBC-SHA: ---
`-TLS1:DES-CBC-SHA: no peer certificate available
`-TLS1:DES-CBC-SHA: ---
`-TLS1:DES-CBC-SHA: No client certificate CA names sent
`-TLS1:DES-CBC-SHA: ---
`-TLS1:DES-CBC-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:DES-CBC-SHA: ---
`-TLS1:DES-CBC-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:DES-CBC-SHA: Secure Renegotiation IS NOT supported
`-TLS1:DES-CBC-SHA: Compression: NONE
`-TLS1:DES-CBC-SHA: Expansion: NONE
`-TLS1:DES-CBC-SHA: SSL-Session:
`-TLS1:DES-CBC-SHA:     Protocol  : TLSv1
`-TLS1:DES-CBC-SHA:     Cipher    : 0000
`-TLS1:DES-CBC-SHA:     Session-ID: 
`-TLS1:DES-CBC-SHA:     Session-ID-ctx: 
`-TLS1:DES-CBC-SHA:     Master-Key: 
`-TLS1:DES-CBC-SHA:     Key-Arg   : None
`-TLS1:DES-CBC-SHA:     PSK identity: None
`-TLS1:DES-CBC-SHA:     PSK identity hint: None
`-TLS1:DES-CBC-SHA:     SRP username: None
`-TLS1:DES-CBC-SHA:     Start Time: 1401715113
`-TLS1:DES-CBC-SHA:     Timeout   : 7200 (sec)
`-TLS1:DES-CBC-SHA:     Verify return code: 0 (ok)
`-TLS1:DES-CBC-SHA: ---

`-SSLv2:DES-CBC-SHA: unknown option -ssl2
`-SSLv2:DES-CBC-SHA: usage: s_client args
`-SSLv2:DES-CBC-SHA: 
`-SSLv2:DES-CBC-SHA:  -host host     - use -connect instead
`-SSLv2:DES-CBC-SHA:  -port port     - use -connect instead
`-SSLv2:DES-CBC-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DES-CBC-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:DES-CBC-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DES-CBC-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DES-CBC-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DES-CBC-SHA:                  not specified but cert file is.
`-SSLv2:DES-CBC-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DES-CBC-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:DES-CBC-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DES-CBC-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DES-CBC-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DES-CBC-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DES-CBC-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:DES-CBC-SHA:  -debug        - extra output
`-SSLv2:DES-CBC-SHA:  -msg          - Show protocol messages
`-SSLv2:DES-CBC-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:DES-CBC-SHA:  -state        - print the 'ssl' states
`-SSLv2:DES-CBC-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:DES-CBC-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DES-CBC-SHA:  -quiet        - no s_client output
`-SSLv2:DES-CBC-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DES-CBC-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DES-CBC-SHA:  -psk_identity arg - PSK identity
`-SSLv2:DES-CBC-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DES-CBC-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DES-CBC-SHA:  -srppass arg      - password for 'user'
`-SSLv2:DES-CBC-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DES-CBC-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DES-CBC-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DES-CBC-SHA:  -ssl2         - just use SSLv2
`-SSLv2:DES-CBC-SHA:  -ssl3         - just use SSLv3
`-SSLv2:DES-CBC-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:DES-CBC-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:DES-CBC-SHA:  -tls1         - just use TLSv1
`-SSLv2:DES-CBC-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:DES-CBC-SHA:  -mtu          - set the link layer MTU
`-SSLv2:DES-CBC-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DES-CBC-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DES-CBC-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DES-CBC-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DES-CBC-SHA:                  command to see what is available
`-SSLv2:DES-CBC-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DES-CBC-SHA:                  for those protocols that support it, where
`-SSLv2:DES-CBC-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DES-CBC-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DES-CBC-SHA:                  are supported.
`-SSLv2:DES-CBC-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:DES-CBC-SHA:  -rand file:file:...
`-SSLv2:DES-CBC-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:DES-CBC-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:DES-CBC-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DES-CBC-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DES-CBC-SHA:  -status           - request certificate status from server
`-SSLv2:DES-CBC-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DES-CBC-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DES-CBC-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DES-CBC-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DES-CBC-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:DES-CBC-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DES-CBC-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DES-CBC-SHA: 140657585866408:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:DES-CBC-SHA: 140657585866408:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:DES-CBC-SHA: CONNECTED(00000003)
`-SSLv3:DES-CBC-SHA: ---
`-SSLv3:DES-CBC-SHA: no peer certificate available
`-SSLv3:DES-CBC-SHA: ---
`-SSLv3:DES-CBC-SHA: No client certificate CA names sent
`-SSLv3:DES-CBC-SHA: ---
`-SSLv3:DES-CBC-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:DES-CBC-SHA: ---
`-SSLv3:DES-CBC-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:DES-CBC-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:DES-CBC-SHA: Compression: NONE
`-SSLv3:DES-CBC-SHA: Expansion: NONE
`-SSLv3:DES-CBC-SHA: SSL-Session:
`-SSLv3:DES-CBC-SHA:     Protocol  : SSLv3
`-SSLv3:DES-CBC-SHA:     Cipher    : 0000
`-SSLv3:DES-CBC-SHA:     Session-ID: 
`-SSLv3:DES-CBC-SHA:     Session-ID-ctx: 
`-SSLv3:DES-CBC-SHA:     Master-Key: 
`-SSLv3:DES-CBC-SHA:     Key-Arg   : None
`-SSLv3:DES-CBC-SHA:     PSK identity: None
`-SSLv3:DES-CBC-SHA:     PSK identity hint: None
`-SSLv3:DES-CBC-SHA:     SRP username: None
`-SSLv3:DES-CBC-SHA:     Start Time: 1401715113
`-SSLv3:DES-CBC-SHA:     Timeout   : 7200 (sec)
`-SSLv3:DES-CBC-SHA:     Verify return code: 0 (ok)
`-SSLv3:DES-CBC-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:33 2014 DES-CBC3-SHA
`-TLS1:DES-CBC3-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DES-CBC3-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:DES-CBC3-SHA: verify error:num=20:unable to get local issuer certificate
`-TLS1:DES-CBC3-SHA: verify return:1
`-TLS1:DES-CBC3-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:DES-CBC3-SHA: verify error:num=27:certificate not trusted
`-TLS1:DES-CBC3-SHA: verify return:1
`-TLS1:DES-CBC3-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-TLS1:DES-CBC3-SHA: verify error:num=21:unable to verify the first certificate
`-TLS1:DES-CBC3-SHA: verify return:1
`-TLS1:DES-CBC3-SHA: CONNECTED(00000003)
`-TLS1:DES-CBC3-SHA: ---
`-TLS1:DES-CBC3-SHA: Certificate chain
`-TLS1:DES-CBC3-SHA:  0 s:/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-TLS1:DES-CBC3-SHA:    i:/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-TLS1:DES-CBC3-SHA: ---
`-TLS1:DES-CBC3-SHA: Server certificate
`-TLS1:DES-CBC3-SHA: -----BEGIN CERTIFICATE-----
`-TLS1:DES-CBC3-SHA: MIIC+zCCAmQCFQFW9mR5x0Bx5RE0plmguZNsQgfuwzANBgkqhkiG9w0BAQUFADCB
`-TLS1:DES-CBC3-SHA: hzELMAkGA1UEBhMCUk8xDjAMBgNVBAgMBVRpbWlzMRIwEAYDVQQHDAlUaW1pc29h
`-TLS1:DES-CBC3-SHA: cmExDjAMBgNVBAoMBU9XQVNQMQwwCgYDVQQLDANTZWMxDzANBgNVBAMMBkNvcm5l
`-TLS1:DES-CBC3-SHA: bDElMCMGCSqGSIb3DQEJARYWY29ybmVsLnB1bmdhQGdtYWlsLmNvbTAeFw0xNDA2
`-TLS1:DES-CBC3-SHA: MDIxMDQ5NTNaFw0xNTA2MDIxMDQ5NTNaMGwxCzAJBgNVBAYTAklOMQswCQYDVQQI
`-TLS1:DES-CBC3-SHA: EwJBUDESMBAGA1UEBxMJMTI3LjAuMC4xMQ0wCwYDVQQKEwRPV1RGMRYwFAYDVQQL
`-TLS1:DES-CBC3-SHA: Ew1JbmJvdW5kLVByb3h5MRUwEwYDVQQDFAwqLjE3MC4xODguODQwggEiMA0GCSqG
`-TLS1:DES-CBC3-SHA: SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPMd28MEd6Bl1mlUwMxCJRwojZOpu0dQc+
`-TLS1:DES-CBC3-SHA: 1JGqEJYvaCBgRfP7izHsWFpV8rjWO4+34FciopX8a11W5bu+lE5S0esoN7tzci88
`-TLS1:DES-CBC3-SHA: M80NH7BjgsjT8akcH8yvGFatXS1WCWiCN2M23Pevvpvo0JDKpUiRaiDPumZ8/aI0
`-TLS1:DES-CBC3-SHA: XR/ZOlvGylSU5wl4FG7zihf0EcfCWLfe1+PgMP3hkawdG6Ehe8DO95rxa4GaUdSN
`-TLS1:DES-CBC3-SHA: LEF+6bUlV4yYWBLQKHKpDLrQJm7Y8YVTqRzqX1oE7rctISrGKrsG0+ni9ibshlEr
`-TLS1:DES-CBC3-SHA: lu+XpQJyDk06ilrYAc3BByEDPw0tyu6SWR37bbM22NfxI8zc89QjAgMBAAEwDQYJ
`-TLS1:DES-CBC3-SHA: KoZIhvcNAQEFBQADgYEAfcPJfa3gTUkas22HxgDuyNfiM8VOX2syNmIBBp+4LtaO
`-TLS1:DES-CBC3-SHA: 3eTu3mJ7JrbNE2pouTx5SOvVeoqkhijeNnLOb7gyc904BHqBQRp7Lxxo0mTpoW1q
`-TLS1:DES-CBC3-SHA: F7ZexLWp2LQIQnMzWwdf/bc/zOZklwF2nBm+Kz/V//Ye/vxQdX9SqF6BWnLG5JM=
`-TLS1:DES-CBC3-SHA: -----END CERTIFICATE-----
`-TLS1:DES-CBC3-SHA: subject=/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-TLS1:DES-CBC3-SHA: issuer=/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-TLS1:DES-CBC3-SHA: ---
`-TLS1:DES-CBC3-SHA: No client certificate CA names sent
`-TLS1:DES-CBC3-SHA: ---
`-TLS1:DES-CBC3-SHA: SSL handshake has read 1088 bytes and written 390 bytes
`-TLS1:DES-CBC3-SHA: ---
`-TLS1:DES-CBC3-SHA: New, TLSv1/SSLv3, Cipher is DES-CBC3-SHA
`-TLS1:DES-CBC3-SHA: Server public key is 2048 bit
`-TLS1:DES-CBC3-SHA: Secure Renegotiation IS supported
`-TLS1:DES-CBC3-SHA: Compression: zlib compression
`-TLS1:DES-CBC3-SHA: Expansion: zlib compression
`-TLS1:DES-CBC3-SHA: SSL-Session:
`-TLS1:DES-CBC3-SHA:     Protocol  : TLSv1
`-TLS1:DES-CBC3-SHA:     Cipher    : DES-CBC3-SHA
`-TLS1:DES-CBC3-SHA:     Session-ID: 7CC363F2A5D13AE1CB2063E4926BA084A2625E7D842E9D856E4450107174D7FD
`-TLS1:DES-CBC3-SHA:     Session-ID-ctx: 
`-TLS1:DES-CBC3-SHA:     Master-Key: 7DE05328BE2A75BA20C7EBA3D4D0F235EEE3DB10FBDD9C3A12757690B5AF986692B0D68CA92A03613F3B91E05C8779F7
`-TLS1:DES-CBC3-SHA:     Key-Arg   : None
`-TLS1:DES-CBC3-SHA:     PSK identity: None
`-TLS1:DES-CBC3-SHA:     PSK identity hint: None
`-TLS1:DES-CBC3-SHA:     SRP username: None
`-TLS1:DES-CBC3-SHA:     TLS session ticket lifetime hint: 300 (seconds)
`-TLS1:DES-CBC3-SHA:     TLS session ticket:
`-TLS1:DES-CBC3-SHA:     0000 - 1b 33 52 ec 21 2f bd 6d-78 f8 71 98 07 a7 1c ba   .3R.!/.mx.q.....
`-TLS1:DES-CBC3-SHA:     0010 - 3c d7 9c ea bb 4c 4d a0-0f 18 d1 08 17 82 c1 b2   <....LM.........
`-TLS1:DES-CBC3-SHA:     0020 - 97 c8 7a 0f 32 23 4d 26-af cf e2 4f f0 0a 34 3e   ..z.2#M&...O..4>
`-TLS1:DES-CBC3-SHA:     0030 - ea 39 31 7a 87 54 a3 7c-21 45 d2 60 74 0b e5 2f   .91z.T.|!E.`t../
`-TLS1:DES-CBC3-SHA:     0040 - 6d d8 91 d3 de 5b ca 60-b5 27 77 c1 d3 3b b9 c7   m....[.`.'w..;..
`-TLS1:DES-CBC3-SHA:     0050 - 6d 9b 7f cf 30 8a 7d 56-6f e6 1d 6c 74 49 18 19   m...0.}Vo..ltI..
`-TLS1:DES-CBC3-SHA:     0060 - be 4d 3b 08 fd a2 20 ed-ab b2 e6 67 f2 79 43 a6   .M;... ....g.yC.
`-TLS1:DES-CBC3-SHA:     0070 - ce 13 6e 26 d3 fe dd 17-d7 b3 32 5e 7e 1a 73 d3   ..n&......2^~.s.
`-TLS1:DES-CBC3-SHA:     0080 - e5 ba 33 89 24 90 c8 34-bd 2f db 5b c1 5f 4f a9   ..3.$..4./.[._O.
`-TLS1:DES-CBC3-SHA:     0090 - f1 57 43 d7 b6 54 fa e2-60 8c 1e e8 ac 9b 5b 8f   .WC..T..`.....[.
`-TLS1:DES-CBC3-SHA: 
`-TLS1:DES-CBC3-SHA:     Compression: 1 (zlib compression)
`-TLS1:DES-CBC3-SHA:     Start Time: 1401715114
`-TLS1:DES-CBC3-SHA:     Timeout   : 7200 (sec)
`-TLS1:DES-CBC3-SHA:     Verify return code: 21 (unable to verify the first certificate)
`-TLS1:DES-CBC3-SHA: ---
`-TLS1:DES-CBC3-SHA: DONE

`-SSLv2:DES-CBC3-SHA: unknown option -ssl2
`-SSLv2:DES-CBC3-SHA: usage: s_client args
`-SSLv2:DES-CBC3-SHA: 
`-SSLv2:DES-CBC3-SHA:  -host host     - use -connect instead
`-SSLv2:DES-CBC3-SHA:  -port port     - use -connect instead
`-SSLv2:DES-CBC3-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DES-CBC3-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:DES-CBC3-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DES-CBC3-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DES-CBC3-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DES-CBC3-SHA:                  not specified but cert file is.
`-SSLv2:DES-CBC3-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DES-CBC3-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:DES-CBC3-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DES-CBC3-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DES-CBC3-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DES-CBC3-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DES-CBC3-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:DES-CBC3-SHA:  -debug        - extra output
`-SSLv2:DES-CBC3-SHA:  -msg          - Show protocol messages
`-SSLv2:DES-CBC3-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:DES-CBC3-SHA:  -state        - print the 'ssl' states
`-SSLv2:DES-CBC3-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:DES-CBC3-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DES-CBC3-SHA:  -quiet        - no s_client output
`-SSLv2:DES-CBC3-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DES-CBC3-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DES-CBC3-SHA:  -psk_identity arg - PSK identity
`-SSLv2:DES-CBC3-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DES-CBC3-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DES-CBC3-SHA:  -srppass arg      - password for 'user'
`-SSLv2:DES-CBC3-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DES-CBC3-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DES-CBC3-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DES-CBC3-SHA:  -ssl2         - just use SSLv2
`-SSLv2:DES-CBC3-SHA:  -ssl3         - just use SSLv3
`-SSLv2:DES-CBC3-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:DES-CBC3-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:DES-CBC3-SHA:  -tls1         - just use TLSv1
`-SSLv2:DES-CBC3-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:DES-CBC3-SHA:  -mtu          - set the link layer MTU
`-SSLv2:DES-CBC3-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DES-CBC3-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DES-CBC3-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DES-CBC3-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DES-CBC3-SHA:                  command to see what is available
`-SSLv2:DES-CBC3-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DES-CBC3-SHA:                  for those protocols that support it, where
`-SSLv2:DES-CBC3-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DES-CBC3-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DES-CBC3-SHA:                  are supported.
`-SSLv2:DES-CBC3-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:DES-CBC3-SHA:  -rand file:file:...
`-SSLv2:DES-CBC3-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:DES-CBC3-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:DES-CBC3-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DES-CBC3-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DES-CBC3-SHA:  -status           - request certificate status from server
`-SSLv2:DES-CBC3-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DES-CBC3-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DES-CBC3-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DES-CBC3-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DES-CBC3-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:DES-CBC3-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DES-CBC3-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DES-CBC3-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:DES-CBC3-SHA: verify error:num=20:unable to get local issuer certificate
`-SSLv3:DES-CBC3-SHA: verify return:1
`-SSLv3:DES-CBC3-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:DES-CBC3-SHA: verify error:num=27:certificate not trusted
`-SSLv3:DES-CBC3-SHA: verify return:1
`-SSLv3:DES-CBC3-SHA: depth=0 C = IN, ST = AP, L = 127.0.0.1, O = OWTF, OU = Inbound-Proxy, CN = *.170.188.84
`-SSLv3:DES-CBC3-SHA: verify error:num=21:unable to verify the first certificate
`-SSLv3:DES-CBC3-SHA: verify return:1
`-SSLv3:DES-CBC3-SHA: CONNECTED(00000003)
`-SSLv3:DES-CBC3-SHA: ---
`-SSLv3:DES-CBC3-SHA: Certificate chain
`-SSLv3:DES-CBC3-SHA:  0 s:/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-SSLv3:DES-CBC3-SHA:    i:/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-SSLv3:DES-CBC3-SHA: ---
`-SSLv3:DES-CBC3-SHA: Server certificate
`-SSLv3:DES-CBC3-SHA: -----BEGIN CERTIFICATE-----
`-SSLv3:DES-CBC3-SHA: MIIC+zCCAmQCFQFW9mR5x0Bx5RE0plmguZNsQgfuwzANBgkqhkiG9w0BAQUFADCB
`-SSLv3:DES-CBC3-SHA: hzELMAkGA1UEBhMCUk8xDjAMBgNVBAgMBVRpbWlzMRIwEAYDVQQHDAlUaW1pc29h
`-SSLv3:DES-CBC3-SHA: cmExDjAMBgNVBAoMBU9XQVNQMQwwCgYDVQQLDANTZWMxDzANBgNVBAMMBkNvcm5l
`-SSLv3:DES-CBC3-SHA: bDElMCMGCSqGSIb3DQEJARYWY29ybmVsLnB1bmdhQGdtYWlsLmNvbTAeFw0xNDA2
`-SSLv3:DES-CBC3-SHA: MDIxMDQ5NTNaFw0xNTA2MDIxMDQ5NTNaMGwxCzAJBgNVBAYTAklOMQswCQYDVQQI
`-SSLv3:DES-CBC3-SHA: EwJBUDESMBAGA1UEBxMJMTI3LjAuMC4xMQ0wCwYDVQQKEwRPV1RGMRYwFAYDVQQL
`-SSLv3:DES-CBC3-SHA: Ew1JbmJvdW5kLVByb3h5MRUwEwYDVQQDFAwqLjE3MC4xODguODQwggEiMA0GCSqG
`-SSLv3:DES-CBC3-SHA: SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPMd28MEd6Bl1mlUwMxCJRwojZOpu0dQc+
`-SSLv3:DES-CBC3-SHA: 1JGqEJYvaCBgRfP7izHsWFpV8rjWO4+34FciopX8a11W5bu+lE5S0esoN7tzci88
`-SSLv3:DES-CBC3-SHA: M80NH7BjgsjT8akcH8yvGFatXS1WCWiCN2M23Pevvpvo0JDKpUiRaiDPumZ8/aI0
`-SSLv3:DES-CBC3-SHA: XR/ZOlvGylSU5wl4FG7zihf0EcfCWLfe1+PgMP3hkawdG6Ehe8DO95rxa4GaUdSN
`-SSLv3:DES-CBC3-SHA: LEF+6bUlV4yYWBLQKHKpDLrQJm7Y8YVTqRzqX1oE7rctISrGKrsG0+ni9ibshlEr
`-SSLv3:DES-CBC3-SHA: lu+XpQJyDk06ilrYAc3BByEDPw0tyu6SWR37bbM22NfxI8zc89QjAgMBAAEwDQYJ
`-SSLv3:DES-CBC3-SHA: KoZIhvcNAQEFBQADgYEAfcPJfa3gTUkas22HxgDuyNfiM8VOX2syNmIBBp+4LtaO
`-SSLv3:DES-CBC3-SHA: 3eTu3mJ7JrbNE2pouTx5SOvVeoqkhijeNnLOb7gyc904BHqBQRp7Lxxo0mTpoW1q
`-SSLv3:DES-CBC3-SHA: F7ZexLWp2LQIQnMzWwdf/bc/zOZklwF2nBm+Kz/V//Ye/vxQdX9SqF6BWnLG5JM=
`-SSLv3:DES-CBC3-SHA: -----END CERTIFICATE-----
`-SSLv3:DES-CBC3-SHA: subject=/C=IN/ST=AP/L=127.0.0.1/O=OWTF/OU=Inbound-Proxy/CN=*.170.188.84
`-SSLv3:DES-CBC3-SHA: issuer=/C=RO/ST=Timis/L=Timisoara/O=OWASP/OU=Sec/CN=Cornel/emailAddress=cornel.punga@gmail.com
`-SSLv3:DES-CBC3-SHA: ---
`-SSLv3:DES-CBC3-SHA: No client certificate CA names sent
`-SSLv3:DES-CBC3-SHA: ---
`-SSLv3:DES-CBC3-SHA: SSL handshake has read 960 bytes and written 401 bytes
`-SSLv3:DES-CBC3-SHA: ---
`-SSLv3:DES-CBC3-SHA: New, TLSv1/SSLv3, Cipher is DES-CBC3-SHA
`-SSLv3:DES-CBC3-SHA: Server public key is 2048 bit
`-SSLv3:DES-CBC3-SHA: Secure Renegotiation IS supported
`-SSLv3:DES-CBC3-SHA: Compression: zlib compression
`-SSLv3:DES-CBC3-SHA: Expansion: zlib compression
`-SSLv3:DES-CBC3-SHA: SSL-Session:
`-SSLv3:DES-CBC3-SHA:     Protocol  : SSLv3
`-SSLv3:DES-CBC3-SHA:     Cipher    : DES-CBC3-SHA
`-SSLv3:DES-CBC3-SHA:     Session-ID: C6D70017989FC184176F042CA837F8D6F4F5FB6D45CCBEF8D1EE945B6F71B05C
`-SSLv3:DES-CBC3-SHA:     Session-ID-ctx: 
`-SSLv3:DES-CBC3-SHA:     Master-Key: 5CF41187D47BBFF91C1B9972F5DF3F52457DBD961174430BDAA4CBCC4F1A2270B975B8D02753E1E3CB6D313C875F737B
`-SSLv3:DES-CBC3-SHA:     Key-Arg   : None
`-SSLv3:DES-CBC3-SHA:     PSK identity: None
`-SSLv3:DES-CBC3-SHA:     PSK identity hint: None
`-SSLv3:DES-CBC3-SHA:     SRP username: None
`-SSLv3:DES-CBC3-SHA:     Compression: 1 (zlib compression)
`-SSLv3:DES-CBC3-SHA:     Start Time: 1401715114
`-SSLv3:DES-CBC3-SHA:     Timeout   : 7200 (sec)
`-SSLv3:DES-CBC3-SHA:     Verify return code: 21 (unable to verify the first certificate)
`-SSLv3:DES-CBC3-SHA: ---
`-SSLv3:DES-CBC3-SHA: DONE
------------------------------------------------------------------------
Mon Jun  2 16:18:34 2014 DHE-DSS-AES128-GCM-SHA256
`-TLS1:DHE-DSS-AES128-GCM-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-DSS-AES128-GCM-SHA256: 140030871975592:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:DHE-DSS-AES128-GCM-SHA256: CONNECTED(00000003)
`-TLS1:DHE-DSS-AES128-GCM-SHA256: ---
`-TLS1:DHE-DSS-AES128-GCM-SHA256: no peer certificate available
`-TLS1:DHE-DSS-AES128-GCM-SHA256: ---
`-TLS1:DHE-DSS-AES128-GCM-SHA256: No client certificate CA names sent
`-TLS1:DHE-DSS-AES128-GCM-SHA256: ---
`-TLS1:DHE-DSS-AES128-GCM-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:DHE-DSS-AES128-GCM-SHA256: ---
`-TLS1:DHE-DSS-AES128-GCM-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-DSS-AES128-GCM-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:DHE-DSS-AES128-GCM-SHA256: Compression: NONE
`-TLS1:DHE-DSS-AES128-GCM-SHA256: Expansion: NONE
`-TLS1:DHE-DSS-AES128-GCM-SHA256: SSL-Session:
`-TLS1:DHE-DSS-AES128-GCM-SHA256:     Protocol  : TLSv1
`-TLS1:DHE-DSS-AES128-GCM-SHA256:     Cipher    : 0000
`-TLS1:DHE-DSS-AES128-GCM-SHA256:     Session-ID: 
`-TLS1:DHE-DSS-AES128-GCM-SHA256:     Session-ID-ctx: 
`-TLS1:DHE-DSS-AES128-GCM-SHA256:     Master-Key: 
`-TLS1:DHE-DSS-AES128-GCM-SHA256:     Key-Arg   : None
`-TLS1:DHE-DSS-AES128-GCM-SHA256:     PSK identity: None
`-TLS1:DHE-DSS-AES128-GCM-SHA256:     PSK identity hint: None
`-TLS1:DHE-DSS-AES128-GCM-SHA256:     SRP username: None
`-TLS1:DHE-DSS-AES128-GCM-SHA256:     Start Time: 1401715115
`-TLS1:DHE-DSS-AES128-GCM-SHA256:     Timeout   : 7200 (sec)
`-TLS1:DHE-DSS-AES128-GCM-SHA256:     Verify return code: 0 (ok)
`-TLS1:DHE-DSS-AES128-GCM-SHA256: ---

`-SSLv2:DHE-DSS-AES128-GCM-SHA256: unknown option -ssl2
`-SSLv2:DHE-DSS-AES128-GCM-SHA256: usage: s_client args
`-SSLv2:DHE-DSS-AES128-GCM-SHA256: 
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -host host     - use -connect instead
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -port port     - use -connect instead
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:                  not specified but cert file is.
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -debug        - extra output
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -msg          - Show protocol messages
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -state        - print the 'ssl' states
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -quiet        - no s_client output
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -tls1         - just use TLSv1
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:                  command to see what is available
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:                  for those protocols that support it, where
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:                  are supported.
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -rand file:file:...
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -status           - request certificate status from server
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-DSS-AES128-GCM-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-DSS-AES128-GCM-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: 140409801283240:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: CONNECTED(00000003)
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: ---
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: no peer certificate available
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: ---
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: No client certificate CA names sent
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: ---
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: ---
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: Compression: NONE
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: Expansion: NONE
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: SSL-Session:
`-SSLv3:DHE-DSS-AES128-GCM-SHA256:     Protocol  : SSLv3
`-SSLv3:DHE-DSS-AES128-GCM-SHA256:     Cipher    : 0000
`-SSLv3:DHE-DSS-AES128-GCM-SHA256:     Session-ID: 
`-SSLv3:DHE-DSS-AES128-GCM-SHA256:     Session-ID-ctx: 
`-SSLv3:DHE-DSS-AES128-GCM-SHA256:     Master-Key: 
`-SSLv3:DHE-DSS-AES128-GCM-SHA256:     Key-Arg   : None
`-SSLv3:DHE-DSS-AES128-GCM-SHA256:     PSK identity: None
`-SSLv3:DHE-DSS-AES128-GCM-SHA256:     PSK identity hint: None
`-SSLv3:DHE-DSS-AES128-GCM-SHA256:     SRP username: None
`-SSLv3:DHE-DSS-AES128-GCM-SHA256:     Start Time: 1401715115
`-SSLv3:DHE-DSS-AES128-GCM-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:DHE-DSS-AES128-GCM-SHA256:     Verify return code: 0 (ok)
`-SSLv3:DHE-DSS-AES128-GCM-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:35 2014 DHE-DSS-AES128-SHA
`-TLS1:DHE-DSS-AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-DSS-AES128-SHA: 139636877559464:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:DHE-DSS-AES128-SHA: 139636877559464:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:DHE-DSS-AES128-SHA: CONNECTED(00000003)
`-TLS1:DHE-DSS-AES128-SHA: ---
`-TLS1:DHE-DSS-AES128-SHA: no peer certificate available
`-TLS1:DHE-DSS-AES128-SHA: ---
`-TLS1:DHE-DSS-AES128-SHA: No client certificate CA names sent
`-TLS1:DHE-DSS-AES128-SHA: ---
`-TLS1:DHE-DSS-AES128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:DHE-DSS-AES128-SHA: ---
`-TLS1:DHE-DSS-AES128-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-DSS-AES128-SHA: Secure Renegotiation IS NOT supported
`-TLS1:DHE-DSS-AES128-SHA: Compression: NONE
`-TLS1:DHE-DSS-AES128-SHA: Expansion: NONE
`-TLS1:DHE-DSS-AES128-SHA: SSL-Session:
`-TLS1:DHE-DSS-AES128-SHA:     Protocol  : TLSv1
`-TLS1:DHE-DSS-AES128-SHA:     Cipher    : 0000
`-TLS1:DHE-DSS-AES128-SHA:     Session-ID: 
`-TLS1:DHE-DSS-AES128-SHA:     Session-ID-ctx: 
`-TLS1:DHE-DSS-AES128-SHA:     Master-Key: 
`-TLS1:DHE-DSS-AES128-SHA:     Key-Arg   : None
`-TLS1:DHE-DSS-AES128-SHA:     PSK identity: None
`-TLS1:DHE-DSS-AES128-SHA:     PSK identity hint: None
`-TLS1:DHE-DSS-AES128-SHA:     SRP username: None
`-TLS1:DHE-DSS-AES128-SHA:     Start Time: 1401715116
`-TLS1:DHE-DSS-AES128-SHA:     Timeout   : 7200 (sec)
`-TLS1:DHE-DSS-AES128-SHA:     Verify return code: 0 (ok)
`-TLS1:DHE-DSS-AES128-SHA: ---

`-SSLv2:DHE-DSS-AES128-SHA: unknown option -ssl2
`-SSLv2:DHE-DSS-AES128-SHA: usage: s_client args
`-SSLv2:DHE-DSS-AES128-SHA: 
`-SSLv2:DHE-DSS-AES128-SHA:  -host host     - use -connect instead
`-SSLv2:DHE-DSS-AES128-SHA:  -port port     - use -connect instead
`-SSLv2:DHE-DSS-AES128-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-DSS-AES128-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-DSS-AES128-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-DSS-AES128-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-AES128-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-DSS-AES128-SHA:                  not specified but cert file is.
`-SSLv2:DHE-DSS-AES128-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-AES128-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-DSS-AES128-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-DSS-AES128-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-DSS-AES128-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-DSS-AES128-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-DSS-AES128-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-DSS-AES128-SHA:  -debug        - extra output
`-SSLv2:DHE-DSS-AES128-SHA:  -msg          - Show protocol messages
`-SSLv2:DHE-DSS-AES128-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-DSS-AES128-SHA:  -state        - print the 'ssl' states
`-SSLv2:DHE-DSS-AES128-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-DSS-AES128-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-DSS-AES128-SHA:  -quiet        - no s_client output
`-SSLv2:DHE-DSS-AES128-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-DSS-AES128-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-DSS-AES128-SHA:  -psk_identity arg - PSK identity
`-SSLv2:DHE-DSS-AES128-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-DSS-AES128-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-DSS-AES128-SHA:  -srppass arg      - password for 'user'
`-SSLv2:DHE-DSS-AES128-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-DSS-AES128-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-DSS-AES128-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-DSS-AES128-SHA:  -ssl2         - just use SSLv2
`-SSLv2:DHE-DSS-AES128-SHA:  -ssl3         - just use SSLv3
`-SSLv2:DHE-DSS-AES128-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-DSS-AES128-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-DSS-AES128-SHA:  -tls1         - just use TLSv1
`-SSLv2:DHE-DSS-AES128-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-DSS-AES128-SHA:  -mtu          - set the link layer MTU
`-SSLv2:DHE-DSS-AES128-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-DSS-AES128-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-DSS-AES128-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-DSS-AES128-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-DSS-AES128-SHA:                  command to see what is available
`-SSLv2:DHE-DSS-AES128-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-DSS-AES128-SHA:                  for those protocols that support it, where
`-SSLv2:DHE-DSS-AES128-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-DSS-AES128-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-DSS-AES128-SHA:                  are supported.
`-SSLv2:DHE-DSS-AES128-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-DSS-AES128-SHA:  -rand file:file:...
`-SSLv2:DHE-DSS-AES128-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-DSS-AES128-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-DSS-AES128-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-DSS-AES128-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-DSS-AES128-SHA:  -status           - request certificate status from server
`-SSLv2:DHE-DSS-AES128-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-DSS-AES128-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-DSS-AES128-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-DSS-AES128-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-DSS-AES128-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-DSS-AES128-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-DSS-AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-DSS-AES128-SHA: 139697466295976:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:DHE-DSS-AES128-SHA: 139697466295976:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:DHE-DSS-AES128-SHA: CONNECTED(00000003)
`-SSLv3:DHE-DSS-AES128-SHA: ---
`-SSLv3:DHE-DSS-AES128-SHA: no peer certificate available
`-SSLv3:DHE-DSS-AES128-SHA: ---
`-SSLv3:DHE-DSS-AES128-SHA: No client certificate CA names sent
`-SSLv3:DHE-DSS-AES128-SHA: ---
`-SSLv3:DHE-DSS-AES128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:DHE-DSS-AES128-SHA: ---
`-SSLv3:DHE-DSS-AES128-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-DSS-AES128-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-DSS-AES128-SHA: Compression: NONE
`-SSLv3:DHE-DSS-AES128-SHA: Expansion: NONE
`-SSLv3:DHE-DSS-AES128-SHA: SSL-Session:
`-SSLv3:DHE-DSS-AES128-SHA:     Protocol  : SSLv3
`-SSLv3:DHE-DSS-AES128-SHA:     Cipher    : 0000
`-SSLv3:DHE-DSS-AES128-SHA:     Session-ID: 
`-SSLv3:DHE-DSS-AES128-SHA:     Session-ID-ctx: 
`-SSLv3:DHE-DSS-AES128-SHA:     Master-Key: 
`-SSLv3:DHE-DSS-AES128-SHA:     Key-Arg   : None
`-SSLv3:DHE-DSS-AES128-SHA:     PSK identity: None
`-SSLv3:DHE-DSS-AES128-SHA:     PSK identity hint: None
`-SSLv3:DHE-DSS-AES128-SHA:     SRP username: None
`-SSLv3:DHE-DSS-AES128-SHA:     Start Time: 1401715117
`-SSLv3:DHE-DSS-AES128-SHA:     Timeout   : 7200 (sec)
`-SSLv3:DHE-DSS-AES128-SHA:     Verify return code: 0 (ok)
`-SSLv3:DHE-DSS-AES128-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:37 2014 DHE-DSS-AES128-SHA256
`-TLS1:DHE-DSS-AES128-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-DSS-AES128-SHA256: 139655548966568:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:DHE-DSS-AES128-SHA256: CONNECTED(00000003)
`-TLS1:DHE-DSS-AES128-SHA256: ---
`-TLS1:DHE-DSS-AES128-SHA256: no peer certificate available
`-TLS1:DHE-DSS-AES128-SHA256: ---
`-TLS1:DHE-DSS-AES128-SHA256: No client certificate CA names sent
`-TLS1:DHE-DSS-AES128-SHA256: ---
`-TLS1:DHE-DSS-AES128-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:DHE-DSS-AES128-SHA256: ---
`-TLS1:DHE-DSS-AES128-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-DSS-AES128-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:DHE-DSS-AES128-SHA256: Compression: NONE
`-TLS1:DHE-DSS-AES128-SHA256: Expansion: NONE
`-TLS1:DHE-DSS-AES128-SHA256: SSL-Session:
`-TLS1:DHE-DSS-AES128-SHA256:     Protocol  : TLSv1
`-TLS1:DHE-DSS-AES128-SHA256:     Cipher    : 0000
`-TLS1:DHE-DSS-AES128-SHA256:     Session-ID: 
`-TLS1:DHE-DSS-AES128-SHA256:     Session-ID-ctx: 
`-TLS1:DHE-DSS-AES128-SHA256:     Master-Key: 
`-TLS1:DHE-DSS-AES128-SHA256:     Key-Arg   : None
`-TLS1:DHE-DSS-AES128-SHA256:     PSK identity: None
`-TLS1:DHE-DSS-AES128-SHA256:     PSK identity hint: None
`-TLS1:DHE-DSS-AES128-SHA256:     SRP username: None
`-TLS1:DHE-DSS-AES128-SHA256:     Start Time: 1401715117
`-TLS1:DHE-DSS-AES128-SHA256:     Timeout   : 7200 (sec)
`-TLS1:DHE-DSS-AES128-SHA256:     Verify return code: 0 (ok)
`-TLS1:DHE-DSS-AES128-SHA256: ---

`-SSLv2:DHE-DSS-AES128-SHA256: unknown option -ssl2
`-SSLv2:DHE-DSS-AES128-SHA256: usage: s_client args
`-SSLv2:DHE-DSS-AES128-SHA256: 
`-SSLv2:DHE-DSS-AES128-SHA256:  -host host     - use -connect instead
`-SSLv2:DHE-DSS-AES128-SHA256:  -port port     - use -connect instead
`-SSLv2:DHE-DSS-AES128-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-DSS-AES128-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-DSS-AES128-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-DSS-AES128-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-AES128-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-DSS-AES128-SHA256:                  not specified but cert file is.
`-SSLv2:DHE-DSS-AES128-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-AES128-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-DSS-AES128-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-DSS-AES128-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-DSS-AES128-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-DSS-AES128-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-DSS-AES128-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-DSS-AES128-SHA256:  -debug        - extra output
`-SSLv2:DHE-DSS-AES128-SHA256:  -msg          - Show protocol messages
`-SSLv2:DHE-DSS-AES128-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-DSS-AES128-SHA256:  -state        - print the 'ssl' states
`-SSLv2:DHE-DSS-AES128-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-DSS-AES128-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-DSS-AES128-SHA256:  -quiet        - no s_client output
`-SSLv2:DHE-DSS-AES128-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-DSS-AES128-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-DSS-AES128-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:DHE-DSS-AES128-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-DSS-AES128-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-DSS-AES128-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:DHE-DSS-AES128-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-DSS-AES128-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-DSS-AES128-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-DSS-AES128-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:DHE-DSS-AES128-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:DHE-DSS-AES128-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-DSS-AES128-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-DSS-AES128-SHA256:  -tls1         - just use TLSv1
`-SSLv2:DHE-DSS-AES128-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-DSS-AES128-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:DHE-DSS-AES128-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-DSS-AES128-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-DSS-AES128-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-DSS-AES128-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-DSS-AES128-SHA256:                  command to see what is available
`-SSLv2:DHE-DSS-AES128-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-DSS-AES128-SHA256:                  for those protocols that support it, where
`-SSLv2:DHE-DSS-AES128-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-DSS-AES128-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-DSS-AES128-SHA256:                  are supported.
`-SSLv2:DHE-DSS-AES128-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-DSS-AES128-SHA256:  -rand file:file:...
`-SSLv2:DHE-DSS-AES128-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-DSS-AES128-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-DSS-AES128-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-DSS-AES128-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-DSS-AES128-SHA256:  -status           - request certificate status from server
`-SSLv2:DHE-DSS-AES128-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-DSS-AES128-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-DSS-AES128-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-DSS-AES128-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-DSS-AES128-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-DSS-AES128-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-DSS-AES128-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-DSS-AES128-SHA256: 140412940215976:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:DHE-DSS-AES128-SHA256: CONNECTED(00000003)
`-SSLv3:DHE-DSS-AES128-SHA256: ---
`-SSLv3:DHE-DSS-AES128-SHA256: no peer certificate available
`-SSLv3:DHE-DSS-AES128-SHA256: ---
`-SSLv3:DHE-DSS-AES128-SHA256: No client certificate CA names sent
`-SSLv3:DHE-DSS-AES128-SHA256: ---
`-SSLv3:DHE-DSS-AES128-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:DHE-DSS-AES128-SHA256: ---
`-SSLv3:DHE-DSS-AES128-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-DSS-AES128-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-DSS-AES128-SHA256: Compression: NONE
`-SSLv3:DHE-DSS-AES128-SHA256: Expansion: NONE
`-SSLv3:DHE-DSS-AES128-SHA256: SSL-Session:
`-SSLv3:DHE-DSS-AES128-SHA256:     Protocol  : SSLv3
`-SSLv3:DHE-DSS-AES128-SHA256:     Cipher    : 0000
`-SSLv3:DHE-DSS-AES128-SHA256:     Session-ID: 
`-SSLv3:DHE-DSS-AES128-SHA256:     Session-ID-ctx: 
`-SSLv3:DHE-DSS-AES128-SHA256:     Master-Key: 
`-SSLv3:DHE-DSS-AES128-SHA256:     Key-Arg   : None
`-SSLv3:DHE-DSS-AES128-SHA256:     PSK identity: None
`-SSLv3:DHE-DSS-AES128-SHA256:     PSK identity hint: None
`-SSLv3:DHE-DSS-AES128-SHA256:     SRP username: None
`-SSLv3:DHE-DSS-AES128-SHA256:     Start Time: 1401715118
`-SSLv3:DHE-DSS-AES128-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:DHE-DSS-AES128-SHA256:     Verify return code: 0 (ok)
`-SSLv3:DHE-DSS-AES128-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:38 2014 DHE-DSS-AES256-GCM-SHA384
`-TLS1:DHE-DSS-AES256-GCM-SHA384: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-DSS-AES256-GCM-SHA384: 139761106618024:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:DHE-DSS-AES256-GCM-SHA384: CONNECTED(00000003)
`-TLS1:DHE-DSS-AES256-GCM-SHA384: ---
`-TLS1:DHE-DSS-AES256-GCM-SHA384: no peer certificate available
`-TLS1:DHE-DSS-AES256-GCM-SHA384: ---
`-TLS1:DHE-DSS-AES256-GCM-SHA384: No client certificate CA names sent
`-TLS1:DHE-DSS-AES256-GCM-SHA384: ---
`-TLS1:DHE-DSS-AES256-GCM-SHA384: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:DHE-DSS-AES256-GCM-SHA384: ---
`-TLS1:DHE-DSS-AES256-GCM-SHA384: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-DSS-AES256-GCM-SHA384: Secure Renegotiation IS NOT supported
`-TLS1:DHE-DSS-AES256-GCM-SHA384: Compression: NONE
`-TLS1:DHE-DSS-AES256-GCM-SHA384: Expansion: NONE
`-TLS1:DHE-DSS-AES256-GCM-SHA384: SSL-Session:
`-TLS1:DHE-DSS-AES256-GCM-SHA384:     Protocol  : TLSv1
`-TLS1:DHE-DSS-AES256-GCM-SHA384:     Cipher    : 0000
`-TLS1:DHE-DSS-AES256-GCM-SHA384:     Session-ID: 
`-TLS1:DHE-DSS-AES256-GCM-SHA384:     Session-ID-ctx: 
`-TLS1:DHE-DSS-AES256-GCM-SHA384:     Master-Key: 
`-TLS1:DHE-DSS-AES256-GCM-SHA384:     Key-Arg   : None
`-TLS1:DHE-DSS-AES256-GCM-SHA384:     PSK identity: None
`-TLS1:DHE-DSS-AES256-GCM-SHA384:     PSK identity hint: None
`-TLS1:DHE-DSS-AES256-GCM-SHA384:     SRP username: None
`-TLS1:DHE-DSS-AES256-GCM-SHA384:     Start Time: 1401715118
`-TLS1:DHE-DSS-AES256-GCM-SHA384:     Timeout   : 7200 (sec)
`-TLS1:DHE-DSS-AES256-GCM-SHA384:     Verify return code: 0 (ok)
`-TLS1:DHE-DSS-AES256-GCM-SHA384: ---

`-SSLv2:DHE-DSS-AES256-GCM-SHA384: unknown option -ssl2
`-SSLv2:DHE-DSS-AES256-GCM-SHA384: usage: s_client args
`-SSLv2:DHE-DSS-AES256-GCM-SHA384: 
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -host host     - use -connect instead
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -port port     - use -connect instead
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:                  not specified but cert file is.
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -debug        - extra output
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -msg          - Show protocol messages
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -state        - print the 'ssl' states
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -quiet        - no s_client output
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -psk_identity arg - PSK identity
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -srppass arg      - password for 'user'
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -ssl2         - just use SSLv2
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -ssl3         - just use SSLv3
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -tls1         - just use TLSv1
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -mtu          - set the link layer MTU
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:                  command to see what is available
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:                  for those protocols that support it, where
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:                  are supported.
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -rand file:file:...
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -status           - request certificate status from server
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-DSS-AES256-GCM-SHA384:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-DSS-AES256-GCM-SHA384: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: 139712058472104:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: CONNECTED(00000003)
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: ---
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: no peer certificate available
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: ---
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: No client certificate CA names sent
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: ---
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: ---
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: Compression: NONE
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: Expansion: NONE
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: SSL-Session:
`-SSLv3:DHE-DSS-AES256-GCM-SHA384:     Protocol  : SSLv3
`-SSLv3:DHE-DSS-AES256-GCM-SHA384:     Cipher    : 0000
`-SSLv3:DHE-DSS-AES256-GCM-SHA384:     Session-ID: 
`-SSLv3:DHE-DSS-AES256-GCM-SHA384:     Session-ID-ctx: 
`-SSLv3:DHE-DSS-AES256-GCM-SHA384:     Master-Key: 
`-SSLv3:DHE-DSS-AES256-GCM-SHA384:     Key-Arg   : None
`-SSLv3:DHE-DSS-AES256-GCM-SHA384:     PSK identity: None
`-SSLv3:DHE-DSS-AES256-GCM-SHA384:     PSK identity hint: None
`-SSLv3:DHE-DSS-AES256-GCM-SHA384:     SRP username: None
`-SSLv3:DHE-DSS-AES256-GCM-SHA384:     Start Time: 1401715119
`-SSLv3:DHE-DSS-AES256-GCM-SHA384:     Timeout   : 7200 (sec)
`-SSLv3:DHE-DSS-AES256-GCM-SHA384:     Verify return code: 0 (ok)
`-SSLv3:DHE-DSS-AES256-GCM-SHA384: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:39 2014 DHE-DSS-AES256-SHA
`-TLS1:DHE-DSS-AES256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-DSS-AES256-SHA: 140058018727592:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:DHE-DSS-AES256-SHA: 140058018727592:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:DHE-DSS-AES256-SHA: CONNECTED(00000003)
`-TLS1:DHE-DSS-AES256-SHA: ---
`-TLS1:DHE-DSS-AES256-SHA: no peer certificate available
`-TLS1:DHE-DSS-AES256-SHA: ---
`-TLS1:DHE-DSS-AES256-SHA: No client certificate CA names sent
`-TLS1:DHE-DSS-AES256-SHA: ---
`-TLS1:DHE-DSS-AES256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:DHE-DSS-AES256-SHA: ---
`-TLS1:DHE-DSS-AES256-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-DSS-AES256-SHA: Secure Renegotiation IS NOT supported
`-TLS1:DHE-DSS-AES256-SHA: Compression: NONE
`-TLS1:DHE-DSS-AES256-SHA: Expansion: NONE
`-TLS1:DHE-DSS-AES256-SHA: SSL-Session:
`-TLS1:DHE-DSS-AES256-SHA:     Protocol  : TLSv1
`-TLS1:DHE-DSS-AES256-SHA:     Cipher    : 0000
`-TLS1:DHE-DSS-AES256-SHA:     Session-ID: 
`-TLS1:DHE-DSS-AES256-SHA:     Session-ID-ctx: 
`-TLS1:DHE-DSS-AES256-SHA:     Master-Key: 
`-TLS1:DHE-DSS-AES256-SHA:     Key-Arg   : None
`-TLS1:DHE-DSS-AES256-SHA:     PSK identity: None
`-TLS1:DHE-DSS-AES256-SHA:     PSK identity hint: None
`-TLS1:DHE-DSS-AES256-SHA:     SRP username: None
`-TLS1:DHE-DSS-AES256-SHA:     Start Time: 1401715119
`-TLS1:DHE-DSS-AES256-SHA:     Timeout   : 7200 (sec)
`-TLS1:DHE-DSS-AES256-SHA:     Verify return code: 0 (ok)
`-TLS1:DHE-DSS-AES256-SHA: ---

`-SSLv2:DHE-DSS-AES256-SHA: unknown option -ssl2
`-SSLv2:DHE-DSS-AES256-SHA: usage: s_client args
`-SSLv2:DHE-DSS-AES256-SHA: 
`-SSLv2:DHE-DSS-AES256-SHA:  -host host     - use -connect instead
`-SSLv2:DHE-DSS-AES256-SHA:  -port port     - use -connect instead
`-SSLv2:DHE-DSS-AES256-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-DSS-AES256-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-DSS-AES256-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-DSS-AES256-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-AES256-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-DSS-AES256-SHA:                  not specified but cert file is.
`-SSLv2:DHE-DSS-AES256-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-AES256-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-DSS-AES256-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-DSS-AES256-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-DSS-AES256-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-DSS-AES256-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-DSS-AES256-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-DSS-AES256-SHA:  -debug        - extra output
`-SSLv2:DHE-DSS-AES256-SHA:  -msg          - Show protocol messages
`-SSLv2:DHE-DSS-AES256-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-DSS-AES256-SHA:  -state        - print the 'ssl' states
`-SSLv2:DHE-DSS-AES256-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-DSS-AES256-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-DSS-AES256-SHA:  -quiet        - no s_client output
`-SSLv2:DHE-DSS-AES256-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-DSS-AES256-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-DSS-AES256-SHA:  -psk_identity arg - PSK identity
`-SSLv2:DHE-DSS-AES256-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-DSS-AES256-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-DSS-AES256-SHA:  -srppass arg      - password for 'user'
`-SSLv2:DHE-DSS-AES256-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-DSS-AES256-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-DSS-AES256-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-DSS-AES256-SHA:  -ssl2         - just use SSLv2
`-SSLv2:DHE-DSS-AES256-SHA:  -ssl3         - just use SSLv3
`-SSLv2:DHE-DSS-AES256-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-DSS-AES256-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-DSS-AES256-SHA:  -tls1         - just use TLSv1
`-SSLv2:DHE-DSS-AES256-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-DSS-AES256-SHA:  -mtu          - set the link layer MTU
`-SSLv2:DHE-DSS-AES256-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-DSS-AES256-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-DSS-AES256-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-DSS-AES256-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-DSS-AES256-SHA:                  command to see what is available
`-SSLv2:DHE-DSS-AES256-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-DSS-AES256-SHA:                  for those protocols that support it, where
`-SSLv2:DHE-DSS-AES256-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-DSS-AES256-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-DSS-AES256-SHA:                  are supported.
`-SSLv2:DHE-DSS-AES256-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-DSS-AES256-SHA:  -rand file:file:...
`-SSLv2:DHE-DSS-AES256-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-DSS-AES256-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-DSS-AES256-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-DSS-AES256-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-DSS-AES256-SHA:  -status           - request certificate status from server
`-SSLv2:DHE-DSS-AES256-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-DSS-AES256-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-DSS-AES256-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-DSS-AES256-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-DSS-AES256-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-DSS-AES256-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-DSS-AES256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-DSS-AES256-SHA: 139983691912872:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:DHE-DSS-AES256-SHA: 139983691912872:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:DHE-DSS-AES256-SHA: CONNECTED(00000003)
`-SSLv3:DHE-DSS-AES256-SHA: ---
`-SSLv3:DHE-DSS-AES256-SHA: no peer certificate available
`-SSLv3:DHE-DSS-AES256-SHA: ---
`-SSLv3:DHE-DSS-AES256-SHA: No client certificate CA names sent
`-SSLv3:DHE-DSS-AES256-SHA: ---
`-SSLv3:DHE-DSS-AES256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:DHE-DSS-AES256-SHA: ---
`-SSLv3:DHE-DSS-AES256-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-DSS-AES256-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-DSS-AES256-SHA: Compression: NONE
`-SSLv3:DHE-DSS-AES256-SHA: Expansion: NONE
`-SSLv3:DHE-DSS-AES256-SHA: SSL-Session:
`-SSLv3:DHE-DSS-AES256-SHA:     Protocol  : SSLv3
`-SSLv3:DHE-DSS-AES256-SHA:     Cipher    : 0000
`-SSLv3:DHE-DSS-AES256-SHA:     Session-ID: 
`-SSLv3:DHE-DSS-AES256-SHA:     Session-ID-ctx: 
`-SSLv3:DHE-DSS-AES256-SHA:     Master-Key: 
`-SSLv3:DHE-DSS-AES256-SHA:     Key-Arg   : None
`-SSLv3:DHE-DSS-AES256-SHA:     PSK identity: None
`-SSLv3:DHE-DSS-AES256-SHA:     PSK identity hint: None
`-SSLv3:DHE-DSS-AES256-SHA:     SRP username: None
`-SSLv3:DHE-DSS-AES256-SHA:     Start Time: 1401715120
`-SSLv3:DHE-DSS-AES256-SHA:     Timeout   : 7200 (sec)
`-SSLv3:DHE-DSS-AES256-SHA:     Verify return code: 0 (ok)
`-SSLv3:DHE-DSS-AES256-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:40 2014 DHE-DSS-AES256-SHA256
`-TLS1:DHE-DSS-AES256-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-DSS-AES256-SHA256: 139941160863400:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:DHE-DSS-AES256-SHA256: CONNECTED(00000003)
`-TLS1:DHE-DSS-AES256-SHA256: ---
`-TLS1:DHE-DSS-AES256-SHA256: no peer certificate available
`-TLS1:DHE-DSS-AES256-SHA256: ---
`-TLS1:DHE-DSS-AES256-SHA256: No client certificate CA names sent
`-TLS1:DHE-DSS-AES256-SHA256: ---
`-TLS1:DHE-DSS-AES256-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:DHE-DSS-AES256-SHA256: ---
`-TLS1:DHE-DSS-AES256-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-DSS-AES256-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:DHE-DSS-AES256-SHA256: Compression: NONE
`-TLS1:DHE-DSS-AES256-SHA256: Expansion: NONE
`-TLS1:DHE-DSS-AES256-SHA256: SSL-Session:
`-TLS1:DHE-DSS-AES256-SHA256:     Protocol  : TLSv1
`-TLS1:DHE-DSS-AES256-SHA256:     Cipher    : 0000
`-TLS1:DHE-DSS-AES256-SHA256:     Session-ID: 
`-TLS1:DHE-DSS-AES256-SHA256:     Session-ID-ctx: 
`-TLS1:DHE-DSS-AES256-SHA256:     Master-Key: 
`-TLS1:DHE-DSS-AES256-SHA256:     Key-Arg   : None
`-TLS1:DHE-DSS-AES256-SHA256:     PSK identity: None
`-TLS1:DHE-DSS-AES256-SHA256:     PSK identity hint: None
`-TLS1:DHE-DSS-AES256-SHA256:     SRP username: None
`-TLS1:DHE-DSS-AES256-SHA256:     Start Time: 1401715121
`-TLS1:DHE-DSS-AES256-SHA256:     Timeout   : 7200 (sec)
`-TLS1:DHE-DSS-AES256-SHA256:     Verify return code: 0 (ok)
`-TLS1:DHE-DSS-AES256-SHA256: ---

`-SSLv2:DHE-DSS-AES256-SHA256: unknown option -ssl2
`-SSLv2:DHE-DSS-AES256-SHA256: usage: s_client args
`-SSLv2:DHE-DSS-AES256-SHA256: 
`-SSLv2:DHE-DSS-AES256-SHA256:  -host host     - use -connect instead
`-SSLv2:DHE-DSS-AES256-SHA256:  -port port     - use -connect instead
`-SSLv2:DHE-DSS-AES256-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-DSS-AES256-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-DSS-AES256-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-DSS-AES256-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-AES256-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-DSS-AES256-SHA256:                  not specified but cert file is.
`-SSLv2:DHE-DSS-AES256-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-AES256-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-DSS-AES256-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-DSS-AES256-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-DSS-AES256-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-DSS-AES256-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-DSS-AES256-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-DSS-AES256-SHA256:  -debug        - extra output
`-SSLv2:DHE-DSS-AES256-SHA256:  -msg          - Show protocol messages
`-SSLv2:DHE-DSS-AES256-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-DSS-AES256-SHA256:  -state        - print the 'ssl' states
`-SSLv2:DHE-DSS-AES256-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-DSS-AES256-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-DSS-AES256-SHA256:  -quiet        - no s_client output
`-SSLv2:DHE-DSS-AES256-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-DSS-AES256-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-DSS-AES256-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:DHE-DSS-AES256-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-DSS-AES256-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-DSS-AES256-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:DHE-DSS-AES256-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-DSS-AES256-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-DSS-AES256-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-DSS-AES256-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:DHE-DSS-AES256-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:DHE-DSS-AES256-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-DSS-AES256-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-DSS-AES256-SHA256:  -tls1         - just use TLSv1
`-SSLv2:DHE-DSS-AES256-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-DSS-AES256-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:DHE-DSS-AES256-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-DSS-AES256-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-DSS-AES256-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-DSS-AES256-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-DSS-AES256-SHA256:                  command to see what is available
`-SSLv2:DHE-DSS-AES256-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-DSS-AES256-SHA256:                  for those protocols that support it, where
`-SSLv2:DHE-DSS-AES256-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-DSS-AES256-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-DSS-AES256-SHA256:                  are supported.
`-SSLv2:DHE-DSS-AES256-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-DSS-AES256-SHA256:  -rand file:file:...
`-SSLv2:DHE-DSS-AES256-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-DSS-AES256-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-DSS-AES256-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-DSS-AES256-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-DSS-AES256-SHA256:  -status           - request certificate status from server
`-SSLv2:DHE-DSS-AES256-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-DSS-AES256-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-DSS-AES256-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-DSS-AES256-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-DSS-AES256-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-DSS-AES256-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-DSS-AES256-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-DSS-AES256-SHA256: 139913850689192:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:DHE-DSS-AES256-SHA256: CONNECTED(00000003)
`-SSLv3:DHE-DSS-AES256-SHA256: ---
`-SSLv3:DHE-DSS-AES256-SHA256: no peer certificate available
`-SSLv3:DHE-DSS-AES256-SHA256: ---
`-SSLv3:DHE-DSS-AES256-SHA256: No client certificate CA names sent
`-SSLv3:DHE-DSS-AES256-SHA256: ---
`-SSLv3:DHE-DSS-AES256-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:DHE-DSS-AES256-SHA256: ---
`-SSLv3:DHE-DSS-AES256-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-DSS-AES256-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-DSS-AES256-SHA256: Compression: NONE
`-SSLv3:DHE-DSS-AES256-SHA256: Expansion: NONE
`-SSLv3:DHE-DSS-AES256-SHA256: SSL-Session:
`-SSLv3:DHE-DSS-AES256-SHA256:     Protocol  : SSLv3
`-SSLv3:DHE-DSS-AES256-SHA256:     Cipher    : 0000
`-SSLv3:DHE-DSS-AES256-SHA256:     Session-ID: 
`-SSLv3:DHE-DSS-AES256-SHA256:     Session-ID-ctx: 
`-SSLv3:DHE-DSS-AES256-SHA256:     Master-Key: 
`-SSLv3:DHE-DSS-AES256-SHA256:     Key-Arg   : None
`-SSLv3:DHE-DSS-AES256-SHA256:     PSK identity: None
`-SSLv3:DHE-DSS-AES256-SHA256:     PSK identity hint: None
`-SSLv3:DHE-DSS-AES256-SHA256:     SRP username: None
`-SSLv3:DHE-DSS-AES256-SHA256:     Start Time: 1401715121
`-SSLv3:DHE-DSS-AES256-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:DHE-DSS-AES256-SHA256:     Verify return code: 0 (ok)
`-SSLv3:DHE-DSS-AES256-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:41 2014 DHE-DSS-CAMELLIA128-SHA
`-TLS1:DHE-DSS-CAMELLIA128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-DSS-CAMELLIA128-SHA: 139741207590568:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:DHE-DSS-CAMELLIA128-SHA: 139741207590568:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:DHE-DSS-CAMELLIA128-SHA: CONNECTED(00000003)
`-TLS1:DHE-DSS-CAMELLIA128-SHA: ---
`-TLS1:DHE-DSS-CAMELLIA128-SHA: no peer certificate available
`-TLS1:DHE-DSS-CAMELLIA128-SHA: ---
`-TLS1:DHE-DSS-CAMELLIA128-SHA: No client certificate CA names sent
`-TLS1:DHE-DSS-CAMELLIA128-SHA: ---
`-TLS1:DHE-DSS-CAMELLIA128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:DHE-DSS-CAMELLIA128-SHA: ---
`-TLS1:DHE-DSS-CAMELLIA128-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-DSS-CAMELLIA128-SHA: Secure Renegotiation IS NOT supported
`-TLS1:DHE-DSS-CAMELLIA128-SHA: Compression: NONE
`-TLS1:DHE-DSS-CAMELLIA128-SHA: Expansion: NONE
`-TLS1:DHE-DSS-CAMELLIA128-SHA: SSL-Session:
`-TLS1:DHE-DSS-CAMELLIA128-SHA:     Protocol  : TLSv1
`-TLS1:DHE-DSS-CAMELLIA128-SHA:     Cipher    : 0000
`-TLS1:DHE-DSS-CAMELLIA128-SHA:     Session-ID: 
`-TLS1:DHE-DSS-CAMELLIA128-SHA:     Session-ID-ctx: 
`-TLS1:DHE-DSS-CAMELLIA128-SHA:     Master-Key: 
`-TLS1:DHE-DSS-CAMELLIA128-SHA:     Key-Arg   : None
`-TLS1:DHE-DSS-CAMELLIA128-SHA:     PSK identity: None
`-TLS1:DHE-DSS-CAMELLIA128-SHA:     PSK identity hint: None
`-TLS1:DHE-DSS-CAMELLIA128-SHA:     SRP username: None
`-TLS1:DHE-DSS-CAMELLIA128-SHA:     Start Time: 1401715122
`-TLS1:DHE-DSS-CAMELLIA128-SHA:     Timeout   : 7200 (sec)
`-TLS1:DHE-DSS-CAMELLIA128-SHA:     Verify return code: 0 (ok)
`-TLS1:DHE-DSS-CAMELLIA128-SHA: ---

`-SSLv2:DHE-DSS-CAMELLIA128-SHA: unknown option -ssl2
`-SSLv2:DHE-DSS-CAMELLIA128-SHA: usage: s_client args
`-SSLv2:DHE-DSS-CAMELLIA128-SHA: 
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -host host     - use -connect instead
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -port port     - use -connect instead
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:                  not specified but cert file is.
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -debug        - extra output
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -msg          - Show protocol messages
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -state        - print the 'ssl' states
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -quiet        - no s_client output
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -psk_identity arg - PSK identity
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -srppass arg      - password for 'user'
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -ssl2         - just use SSLv2
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -ssl3         - just use SSLv3
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -tls1         - just use TLSv1
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -mtu          - set the link layer MTU
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:                  command to see what is available
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:                  for those protocols that support it, where
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:                  are supported.
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -rand file:file:...
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -status           - request certificate status from server
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-DSS-CAMELLIA128-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-DSS-CAMELLIA128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: 139642802759336:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: 139642802759336:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: CONNECTED(00000003)
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: ---
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: no peer certificate available
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: ---
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: No client certificate CA names sent
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: ---
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: ---
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: Compression: NONE
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: Expansion: NONE
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: SSL-Session:
`-SSLv3:DHE-DSS-CAMELLIA128-SHA:     Protocol  : SSLv3
`-SSLv3:DHE-DSS-CAMELLIA128-SHA:     Cipher    : 0000
`-SSLv3:DHE-DSS-CAMELLIA128-SHA:     Session-ID: 
`-SSLv3:DHE-DSS-CAMELLIA128-SHA:     Session-ID-ctx: 
`-SSLv3:DHE-DSS-CAMELLIA128-SHA:     Master-Key: 
`-SSLv3:DHE-DSS-CAMELLIA128-SHA:     Key-Arg   : None
`-SSLv3:DHE-DSS-CAMELLIA128-SHA:     PSK identity: None
`-SSLv3:DHE-DSS-CAMELLIA128-SHA:     PSK identity hint: None
`-SSLv3:DHE-DSS-CAMELLIA128-SHA:     SRP username: None
`-SSLv3:DHE-DSS-CAMELLIA128-SHA:     Start Time: 1401715122
`-SSLv3:DHE-DSS-CAMELLIA128-SHA:     Timeout   : 7200 (sec)
`-SSLv3:DHE-DSS-CAMELLIA128-SHA:     Verify return code: 0 (ok)
`-SSLv3:DHE-DSS-CAMELLIA128-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:42 2014 DHE-DSS-CAMELLIA256-SHA
`-TLS1:DHE-DSS-CAMELLIA256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-DSS-CAMELLIA256-SHA: 140703294748328:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:DHE-DSS-CAMELLIA256-SHA: 140703294748328:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:DHE-DSS-CAMELLIA256-SHA: CONNECTED(00000003)
`-TLS1:DHE-DSS-CAMELLIA256-SHA: ---
`-TLS1:DHE-DSS-CAMELLIA256-SHA: no peer certificate available
`-TLS1:DHE-DSS-CAMELLIA256-SHA: ---
`-TLS1:DHE-DSS-CAMELLIA256-SHA: No client certificate CA names sent
`-TLS1:DHE-DSS-CAMELLIA256-SHA: ---
`-TLS1:DHE-DSS-CAMELLIA256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:DHE-DSS-CAMELLIA256-SHA: ---
`-TLS1:DHE-DSS-CAMELLIA256-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-DSS-CAMELLIA256-SHA: Secure Renegotiation IS NOT supported
`-TLS1:DHE-DSS-CAMELLIA256-SHA: Compression: NONE
`-TLS1:DHE-DSS-CAMELLIA256-SHA: Expansion: NONE
`-TLS1:DHE-DSS-CAMELLIA256-SHA: SSL-Session:
`-TLS1:DHE-DSS-CAMELLIA256-SHA:     Protocol  : TLSv1
`-TLS1:DHE-DSS-CAMELLIA256-SHA:     Cipher    : 0000
`-TLS1:DHE-DSS-CAMELLIA256-SHA:     Session-ID: 
`-TLS1:DHE-DSS-CAMELLIA256-SHA:     Session-ID-ctx: 
`-TLS1:DHE-DSS-CAMELLIA256-SHA:     Master-Key: 
`-TLS1:DHE-DSS-CAMELLIA256-SHA:     Key-Arg   : None
`-TLS1:DHE-DSS-CAMELLIA256-SHA:     PSK identity: None
`-TLS1:DHE-DSS-CAMELLIA256-SHA:     PSK identity hint: None
`-TLS1:DHE-DSS-CAMELLIA256-SHA:     SRP username: None
`-TLS1:DHE-DSS-CAMELLIA256-SHA:     Start Time: 1401715123
`-TLS1:DHE-DSS-CAMELLIA256-SHA:     Timeout   : 7200 (sec)
`-TLS1:DHE-DSS-CAMELLIA256-SHA:     Verify return code: 0 (ok)
`-TLS1:DHE-DSS-CAMELLIA256-SHA: ---

`-SSLv2:DHE-DSS-CAMELLIA256-SHA: unknown option -ssl2
`-SSLv2:DHE-DSS-CAMELLIA256-SHA: usage: s_client args
`-SSLv2:DHE-DSS-CAMELLIA256-SHA: 
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -host host     - use -connect instead
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -port port     - use -connect instead
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:                  not specified but cert file is.
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -debug        - extra output
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -msg          - Show protocol messages
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -state        - print the 'ssl' states
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -quiet        - no s_client output
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -psk_identity arg - PSK identity
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -srppass arg      - password for 'user'
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -ssl2         - just use SSLv2
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -ssl3         - just use SSLv3
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -tls1         - just use TLSv1
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -mtu          - set the link layer MTU
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:                  command to see what is available
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:                  for those protocols that support it, where
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:                  are supported.
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -rand file:file:...
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -status           - request certificate status from server
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-DSS-CAMELLIA256-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-DSS-CAMELLIA256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: 139813517625000:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: 139813517625000:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: CONNECTED(00000003)
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: ---
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: no peer certificate available
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: ---
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: No client certificate CA names sent
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: ---
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: ---
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: Compression: NONE
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: Expansion: NONE
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: SSL-Session:
`-SSLv3:DHE-DSS-CAMELLIA256-SHA:     Protocol  : SSLv3
`-SSLv3:DHE-DSS-CAMELLIA256-SHA:     Cipher    : 0000
`-SSLv3:DHE-DSS-CAMELLIA256-SHA:     Session-ID: 
`-SSLv3:DHE-DSS-CAMELLIA256-SHA:     Session-ID-ctx: 
`-SSLv3:DHE-DSS-CAMELLIA256-SHA:     Master-Key: 
`-SSLv3:DHE-DSS-CAMELLIA256-SHA:     Key-Arg   : None
`-SSLv3:DHE-DSS-CAMELLIA256-SHA:     PSK identity: None
`-SSLv3:DHE-DSS-CAMELLIA256-SHA:     PSK identity hint: None
`-SSLv3:DHE-DSS-CAMELLIA256-SHA:     SRP username: None
`-SSLv3:DHE-DSS-CAMELLIA256-SHA:     Start Time: 1401715123
`-SSLv3:DHE-DSS-CAMELLIA256-SHA:     Timeout   : 7200 (sec)
`-SSLv3:DHE-DSS-CAMELLIA256-SHA:     Verify return code: 0 (ok)
`-SSLv3:DHE-DSS-CAMELLIA256-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:43 2014 DHE-DSS-SEED-SHA
`-TLS1:DHE-DSS-SEED-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-DSS-SEED-SHA: 140398424069800:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:DHE-DSS-SEED-SHA: 140398424069800:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:DHE-DSS-SEED-SHA: CONNECTED(00000003)
`-TLS1:DHE-DSS-SEED-SHA: ---
`-TLS1:DHE-DSS-SEED-SHA: no peer certificate available
`-TLS1:DHE-DSS-SEED-SHA: ---
`-TLS1:DHE-DSS-SEED-SHA: No client certificate CA names sent
`-TLS1:DHE-DSS-SEED-SHA: ---
`-TLS1:DHE-DSS-SEED-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:DHE-DSS-SEED-SHA: ---
`-TLS1:DHE-DSS-SEED-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-DSS-SEED-SHA: Secure Renegotiation IS NOT supported
`-TLS1:DHE-DSS-SEED-SHA: Compression: NONE
`-TLS1:DHE-DSS-SEED-SHA: Expansion: NONE
`-TLS1:DHE-DSS-SEED-SHA: SSL-Session:
`-TLS1:DHE-DSS-SEED-SHA:     Protocol  : TLSv1
`-TLS1:DHE-DSS-SEED-SHA:     Cipher    : 0000
`-TLS1:DHE-DSS-SEED-SHA:     Session-ID: 
`-TLS1:DHE-DSS-SEED-SHA:     Session-ID-ctx: 
`-TLS1:DHE-DSS-SEED-SHA:     Master-Key: 
`-TLS1:DHE-DSS-SEED-SHA:     Key-Arg   : None
`-TLS1:DHE-DSS-SEED-SHA:     PSK identity: None
`-TLS1:DHE-DSS-SEED-SHA:     PSK identity hint: None
`-TLS1:DHE-DSS-SEED-SHA:     SRP username: None
`-TLS1:DHE-DSS-SEED-SHA:     Start Time: 1401715124
`-TLS1:DHE-DSS-SEED-SHA:     Timeout   : 7200 (sec)
`-TLS1:DHE-DSS-SEED-SHA:     Verify return code: 0 (ok)
`-TLS1:DHE-DSS-SEED-SHA: ---

`-SSLv2:DHE-DSS-SEED-SHA: unknown option -ssl2
`-SSLv2:DHE-DSS-SEED-SHA: usage: s_client args
`-SSLv2:DHE-DSS-SEED-SHA: 
`-SSLv2:DHE-DSS-SEED-SHA:  -host host     - use -connect instead
`-SSLv2:DHE-DSS-SEED-SHA:  -port port     - use -connect instead
`-SSLv2:DHE-DSS-SEED-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-DSS-SEED-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-DSS-SEED-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-DSS-SEED-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-SEED-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-DSS-SEED-SHA:                  not specified but cert file is.
`-SSLv2:DHE-DSS-SEED-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-DSS-SEED-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-DSS-SEED-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-DSS-SEED-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-DSS-SEED-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-DSS-SEED-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-DSS-SEED-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-DSS-SEED-SHA:  -debug        - extra output
`-SSLv2:DHE-DSS-SEED-SHA:  -msg          - Show protocol messages
`-SSLv2:DHE-DSS-SEED-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-DSS-SEED-SHA:  -state        - print the 'ssl' states
`-SSLv2:DHE-DSS-SEED-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-DSS-SEED-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-DSS-SEED-SHA:  -quiet        - no s_client output
`-SSLv2:DHE-DSS-SEED-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-DSS-SEED-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-DSS-SEED-SHA:  -psk_identity arg - PSK identity
`-SSLv2:DHE-DSS-SEED-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-DSS-SEED-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-DSS-SEED-SHA:  -srppass arg      - password for 'user'
`-SSLv2:DHE-DSS-SEED-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-DSS-SEED-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-DSS-SEED-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-DSS-SEED-SHA:  -ssl2         - just use SSLv2
`-SSLv2:DHE-DSS-SEED-SHA:  -ssl3         - just use SSLv3
`-SSLv2:DHE-DSS-SEED-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-DSS-SEED-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-DSS-SEED-SHA:  -tls1         - just use TLSv1
`-SSLv2:DHE-DSS-SEED-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-DSS-SEED-SHA:  -mtu          - set the link layer MTU
`-SSLv2:DHE-DSS-SEED-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-DSS-SEED-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-DSS-SEED-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-DSS-SEED-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-DSS-SEED-SHA:                  command to see what is available
`-SSLv2:DHE-DSS-SEED-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-DSS-SEED-SHA:                  for those protocols that support it, where
`-SSLv2:DHE-DSS-SEED-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-DSS-SEED-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-DSS-SEED-SHA:                  are supported.
`-SSLv2:DHE-DSS-SEED-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-DSS-SEED-SHA:  -rand file:file:...
`-SSLv2:DHE-DSS-SEED-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-DSS-SEED-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-DSS-SEED-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-DSS-SEED-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-DSS-SEED-SHA:  -status           - request certificate status from server
`-SSLv2:DHE-DSS-SEED-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-DSS-SEED-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-DSS-SEED-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-DSS-SEED-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-DSS-SEED-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-DSS-SEED-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-DSS-SEED-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-DSS-SEED-SHA: 140334109419176:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:DHE-DSS-SEED-SHA: 140334109419176:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:DHE-DSS-SEED-SHA: CONNECTED(00000003)
`-SSLv3:DHE-DSS-SEED-SHA: ---
`-SSLv3:DHE-DSS-SEED-SHA: no peer certificate available
`-SSLv3:DHE-DSS-SEED-SHA: ---
`-SSLv3:DHE-DSS-SEED-SHA: No client certificate CA names sent
`-SSLv3:DHE-DSS-SEED-SHA: ---
`-SSLv3:DHE-DSS-SEED-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:DHE-DSS-SEED-SHA: ---
`-SSLv3:DHE-DSS-SEED-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-DSS-SEED-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-DSS-SEED-SHA: Compression: NONE
`-SSLv3:DHE-DSS-SEED-SHA: Expansion: NONE
`-SSLv3:DHE-DSS-SEED-SHA: SSL-Session:
`-SSLv3:DHE-DSS-SEED-SHA:     Protocol  : SSLv3
`-SSLv3:DHE-DSS-SEED-SHA:     Cipher    : 0000
`-SSLv3:DHE-DSS-SEED-SHA:     Session-ID: 
`-SSLv3:DHE-DSS-SEED-SHA:     Session-ID-ctx: 
`-SSLv3:DHE-DSS-SEED-SHA:     Master-Key: 
`-SSLv3:DHE-DSS-SEED-SHA:     Key-Arg   : None
`-SSLv3:DHE-DSS-SEED-SHA:     PSK identity: None
`-SSLv3:DHE-DSS-SEED-SHA:     PSK identity hint: None
`-SSLv3:DHE-DSS-SEED-SHA:     SRP username: None
`-SSLv3:DHE-DSS-SEED-SHA:     Start Time: 1401715125
`-SSLv3:DHE-DSS-SEED-SHA:     Timeout   : 7200 (sec)
`-SSLv3:DHE-DSS-SEED-SHA:     Verify return code: 0 (ok)
`-SSLv3:DHE-DSS-SEED-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:45 2014 DHE-RSA-AES128-GCM-SHA256
`-TLS1:DHE-RSA-AES128-GCM-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-RSA-AES128-GCM-SHA256: 139701121988264:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:DHE-RSA-AES128-GCM-SHA256: CONNECTED(00000003)
`-TLS1:DHE-RSA-AES128-GCM-SHA256: ---
`-TLS1:DHE-RSA-AES128-GCM-SHA256: no peer certificate available
`-TLS1:DHE-RSA-AES128-GCM-SHA256: ---
`-TLS1:DHE-RSA-AES128-GCM-SHA256: No client certificate CA names sent
`-TLS1:DHE-RSA-AES128-GCM-SHA256: ---
`-TLS1:DHE-RSA-AES128-GCM-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:DHE-RSA-AES128-GCM-SHA256: ---
`-TLS1:DHE-RSA-AES128-GCM-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-RSA-AES128-GCM-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:DHE-RSA-AES128-GCM-SHA256: Compression: NONE
`-TLS1:DHE-RSA-AES128-GCM-SHA256: Expansion: NONE
`-TLS1:DHE-RSA-AES128-GCM-SHA256: SSL-Session:
`-TLS1:DHE-RSA-AES128-GCM-SHA256:     Protocol  : TLSv1
`-TLS1:DHE-RSA-AES128-GCM-SHA256:     Cipher    : 0000
`-TLS1:DHE-RSA-AES128-GCM-SHA256:     Session-ID: 
`-TLS1:DHE-RSA-AES128-GCM-SHA256:     Session-ID-ctx: 
`-TLS1:DHE-RSA-AES128-GCM-SHA256:     Master-Key: 
`-TLS1:DHE-RSA-AES128-GCM-SHA256:     Key-Arg   : None
`-TLS1:DHE-RSA-AES128-GCM-SHA256:     PSK identity: None
`-TLS1:DHE-RSA-AES128-GCM-SHA256:     PSK identity hint: None
`-TLS1:DHE-RSA-AES128-GCM-SHA256:     SRP username: None
`-TLS1:DHE-RSA-AES128-GCM-SHA256:     Start Time: 1401715125
`-TLS1:DHE-RSA-AES128-GCM-SHA256:     Timeout   : 7200 (sec)
`-TLS1:DHE-RSA-AES128-GCM-SHA256:     Verify return code: 0 (ok)
`-TLS1:DHE-RSA-AES128-GCM-SHA256: ---

`-SSLv2:DHE-RSA-AES128-GCM-SHA256: unknown option -ssl2
`-SSLv2:DHE-RSA-AES128-GCM-SHA256: usage: s_client args
`-SSLv2:DHE-RSA-AES128-GCM-SHA256: 
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -host host     - use -connect instead
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -port port     - use -connect instead
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:                  not specified but cert file is.
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -debug        - extra output
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -msg          - Show protocol messages
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -state        - print the 'ssl' states
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -quiet        - no s_client output
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -tls1         - just use TLSv1
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:                  command to see what is available
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:                  for those protocols that support it, where
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:                  are supported.
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -rand file:file:...
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -status           - request certificate status from server
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-RSA-AES128-GCM-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-RSA-AES128-GCM-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: 140685673916072:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: CONNECTED(00000003)
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: ---
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: no peer certificate available
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: ---
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: No client certificate CA names sent
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: ---
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: ---
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: Compression: NONE
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: Expansion: NONE
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: SSL-Session:
`-SSLv3:DHE-RSA-AES128-GCM-SHA256:     Protocol  : SSLv3
`-SSLv3:DHE-RSA-AES128-GCM-SHA256:     Cipher    : 0000
`-SSLv3:DHE-RSA-AES128-GCM-SHA256:     Session-ID: 
`-SSLv3:DHE-RSA-AES128-GCM-SHA256:     Session-ID-ctx: 
`-SSLv3:DHE-RSA-AES128-GCM-SHA256:     Master-Key: 
`-SSLv3:DHE-RSA-AES128-GCM-SHA256:     Key-Arg   : None
`-SSLv3:DHE-RSA-AES128-GCM-SHA256:     PSK identity: None
`-SSLv3:DHE-RSA-AES128-GCM-SHA256:     PSK identity hint: None
`-SSLv3:DHE-RSA-AES128-GCM-SHA256:     SRP username: None
`-SSLv3:DHE-RSA-AES128-GCM-SHA256:     Start Time: 1401715126
`-SSLv3:DHE-RSA-AES128-GCM-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:DHE-RSA-AES128-GCM-SHA256:     Verify return code: 0 (ok)
`-SSLv3:DHE-RSA-AES128-GCM-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:46 2014 DHE-RSA-AES128-SHA
`-TLS1:DHE-RSA-AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-RSA-AES128-SHA: 140615030625960:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:DHE-RSA-AES128-SHA: 140615030625960:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:DHE-RSA-AES128-SHA: CONNECTED(00000003)
`-TLS1:DHE-RSA-AES128-SHA: ---
`-TLS1:DHE-RSA-AES128-SHA: no peer certificate available
`-TLS1:DHE-RSA-AES128-SHA: ---
`-TLS1:DHE-RSA-AES128-SHA: No client certificate CA names sent
`-TLS1:DHE-RSA-AES128-SHA: ---
`-TLS1:DHE-RSA-AES128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:DHE-RSA-AES128-SHA: ---
`-TLS1:DHE-RSA-AES128-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-RSA-AES128-SHA: Secure Renegotiation IS NOT supported
`-TLS1:DHE-RSA-AES128-SHA: Compression: NONE
`-TLS1:DHE-RSA-AES128-SHA: Expansion: NONE
`-TLS1:DHE-RSA-AES128-SHA: SSL-Session:
`-TLS1:DHE-RSA-AES128-SHA:     Protocol  : TLSv1
`-TLS1:DHE-RSA-AES128-SHA:     Cipher    : 0000
`-TLS1:DHE-RSA-AES128-SHA:     Session-ID: 
`-TLS1:DHE-RSA-AES128-SHA:     Session-ID-ctx: 
`-TLS1:DHE-RSA-AES128-SHA:     Master-Key: 
`-TLS1:DHE-RSA-AES128-SHA:     Key-Arg   : None
`-TLS1:DHE-RSA-AES128-SHA:     PSK identity: None
`-TLS1:DHE-RSA-AES128-SHA:     PSK identity hint: None
`-TLS1:DHE-RSA-AES128-SHA:     SRP username: None
`-TLS1:DHE-RSA-AES128-SHA:     Start Time: 1401715126
`-TLS1:DHE-RSA-AES128-SHA:     Timeout   : 7200 (sec)
`-TLS1:DHE-RSA-AES128-SHA:     Verify return code: 0 (ok)
`-TLS1:DHE-RSA-AES128-SHA: ---

`-SSLv2:DHE-RSA-AES128-SHA: unknown option -ssl2
`-SSLv2:DHE-RSA-AES128-SHA: usage: s_client args
`-SSLv2:DHE-RSA-AES128-SHA: 
`-SSLv2:DHE-RSA-AES128-SHA:  -host host     - use -connect instead
`-SSLv2:DHE-RSA-AES128-SHA:  -port port     - use -connect instead
`-SSLv2:DHE-RSA-AES128-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-RSA-AES128-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-RSA-AES128-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-RSA-AES128-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-AES128-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-RSA-AES128-SHA:                  not specified but cert file is.
`-SSLv2:DHE-RSA-AES128-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-AES128-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-RSA-AES128-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-RSA-AES128-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-RSA-AES128-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-RSA-AES128-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-RSA-AES128-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-RSA-AES128-SHA:  -debug        - extra output
`-SSLv2:DHE-RSA-AES128-SHA:  -msg          - Show protocol messages
`-SSLv2:DHE-RSA-AES128-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-RSA-AES128-SHA:  -state        - print the 'ssl' states
`-SSLv2:DHE-RSA-AES128-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-RSA-AES128-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-RSA-AES128-SHA:  -quiet        - no s_client output
`-SSLv2:DHE-RSA-AES128-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-RSA-AES128-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-RSA-AES128-SHA:  -psk_identity arg - PSK identity
`-SSLv2:DHE-RSA-AES128-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-RSA-AES128-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-RSA-AES128-SHA:  -srppass arg      - password for 'user'
`-SSLv2:DHE-RSA-AES128-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-RSA-AES128-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-RSA-AES128-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-RSA-AES128-SHA:  -ssl2         - just use SSLv2
`-SSLv2:DHE-RSA-AES128-SHA:  -ssl3         - just use SSLv3
`-SSLv2:DHE-RSA-AES128-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-RSA-AES128-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-RSA-AES128-SHA:  -tls1         - just use TLSv1
`-SSLv2:DHE-RSA-AES128-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-RSA-AES128-SHA:  -mtu          - set the link layer MTU
`-SSLv2:DHE-RSA-AES128-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-RSA-AES128-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-RSA-AES128-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-RSA-AES128-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-RSA-AES128-SHA:                  command to see what is available
`-SSLv2:DHE-RSA-AES128-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-RSA-AES128-SHA:                  for those protocols that support it, where
`-SSLv2:DHE-RSA-AES128-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-RSA-AES128-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-RSA-AES128-SHA:                  are supported.
`-SSLv2:DHE-RSA-AES128-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-RSA-AES128-SHA:  -rand file:file:...
`-SSLv2:DHE-RSA-AES128-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-RSA-AES128-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-RSA-AES128-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-RSA-AES128-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-RSA-AES128-SHA:  -status           - request certificate status from server
`-SSLv2:DHE-RSA-AES128-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-RSA-AES128-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-RSA-AES128-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-RSA-AES128-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-RSA-AES128-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-RSA-AES128-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-RSA-AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-RSA-AES128-SHA: 140056013129384:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:DHE-RSA-AES128-SHA: 140056013129384:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:DHE-RSA-AES128-SHA: CONNECTED(00000003)
`-SSLv3:DHE-RSA-AES128-SHA: ---
`-SSLv3:DHE-RSA-AES128-SHA: no peer certificate available
`-SSLv3:DHE-RSA-AES128-SHA: ---
`-SSLv3:DHE-RSA-AES128-SHA: No client certificate CA names sent
`-SSLv3:DHE-RSA-AES128-SHA: ---
`-SSLv3:DHE-RSA-AES128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:DHE-RSA-AES128-SHA: ---
`-SSLv3:DHE-RSA-AES128-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-RSA-AES128-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-RSA-AES128-SHA: Compression: NONE
`-SSLv3:DHE-RSA-AES128-SHA: Expansion: NONE
`-SSLv3:DHE-RSA-AES128-SHA: SSL-Session:
`-SSLv3:DHE-RSA-AES128-SHA:     Protocol  : SSLv3
`-SSLv3:DHE-RSA-AES128-SHA:     Cipher    : 0000
`-SSLv3:DHE-RSA-AES128-SHA:     Session-ID: 
`-SSLv3:DHE-RSA-AES128-SHA:     Session-ID-ctx: 
`-SSLv3:DHE-RSA-AES128-SHA:     Master-Key: 
`-SSLv3:DHE-RSA-AES128-SHA:     Key-Arg   : None
`-SSLv3:DHE-RSA-AES128-SHA:     PSK identity: None
`-SSLv3:DHE-RSA-AES128-SHA:     PSK identity hint: None
`-SSLv3:DHE-RSA-AES128-SHA:     SRP username: None
`-SSLv3:DHE-RSA-AES128-SHA:     Start Time: 1401715127
`-SSLv3:DHE-RSA-AES128-SHA:     Timeout   : 7200 (sec)
`-SSLv3:DHE-RSA-AES128-SHA:     Verify return code: 0 (ok)
`-SSLv3:DHE-RSA-AES128-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:47 2014 DHE-RSA-AES128-SHA256
`-TLS1:DHE-RSA-AES128-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-RSA-AES128-SHA256: 139885292177064:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:DHE-RSA-AES128-SHA256: CONNECTED(00000003)
`-TLS1:DHE-RSA-AES128-SHA256: ---
`-TLS1:DHE-RSA-AES128-SHA256: no peer certificate available
`-TLS1:DHE-RSA-AES128-SHA256: ---
`-TLS1:DHE-RSA-AES128-SHA256: No client certificate CA names sent
`-TLS1:DHE-RSA-AES128-SHA256: ---
`-TLS1:DHE-RSA-AES128-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:DHE-RSA-AES128-SHA256: ---
`-TLS1:DHE-RSA-AES128-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-RSA-AES128-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:DHE-RSA-AES128-SHA256: Compression: NONE
`-TLS1:DHE-RSA-AES128-SHA256: Expansion: NONE
`-TLS1:DHE-RSA-AES128-SHA256: SSL-Session:
`-TLS1:DHE-RSA-AES128-SHA256:     Protocol  : TLSv1
`-TLS1:DHE-RSA-AES128-SHA256:     Cipher    : 0000
`-TLS1:DHE-RSA-AES128-SHA256:     Session-ID: 
`-TLS1:DHE-RSA-AES128-SHA256:     Session-ID-ctx: 
`-TLS1:DHE-RSA-AES128-SHA256:     Master-Key: 
`-TLS1:DHE-RSA-AES128-SHA256:     Key-Arg   : None
`-TLS1:DHE-RSA-AES128-SHA256:     PSK identity: None
`-TLS1:DHE-RSA-AES128-SHA256:     PSK identity hint: None
`-TLS1:DHE-RSA-AES128-SHA256:     SRP username: None
`-TLS1:DHE-RSA-AES128-SHA256:     Start Time: 1401715127
`-TLS1:DHE-RSA-AES128-SHA256:     Timeout   : 7200 (sec)
`-TLS1:DHE-RSA-AES128-SHA256:     Verify return code: 0 (ok)
`-TLS1:DHE-RSA-AES128-SHA256: ---

`-SSLv2:DHE-RSA-AES128-SHA256: unknown option -ssl2
`-SSLv2:DHE-RSA-AES128-SHA256: usage: s_client args
`-SSLv2:DHE-RSA-AES128-SHA256: 
`-SSLv2:DHE-RSA-AES128-SHA256:  -host host     - use -connect instead
`-SSLv2:DHE-RSA-AES128-SHA256:  -port port     - use -connect instead
`-SSLv2:DHE-RSA-AES128-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-RSA-AES128-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-RSA-AES128-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-RSA-AES128-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-AES128-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-RSA-AES128-SHA256:                  not specified but cert file is.
`-SSLv2:DHE-RSA-AES128-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-AES128-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-RSA-AES128-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-RSA-AES128-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-RSA-AES128-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-RSA-AES128-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-RSA-AES128-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-RSA-AES128-SHA256:  -debug        - extra output
`-SSLv2:DHE-RSA-AES128-SHA256:  -msg          - Show protocol messages
`-SSLv2:DHE-RSA-AES128-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-RSA-AES128-SHA256:  -state        - print the 'ssl' states
`-SSLv2:DHE-RSA-AES128-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-RSA-AES128-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-RSA-AES128-SHA256:  -quiet        - no s_client output
`-SSLv2:DHE-RSA-AES128-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-RSA-AES128-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-RSA-AES128-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:DHE-RSA-AES128-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-RSA-AES128-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-RSA-AES128-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:DHE-RSA-AES128-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-RSA-AES128-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-RSA-AES128-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-RSA-AES128-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:DHE-RSA-AES128-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:DHE-RSA-AES128-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-RSA-AES128-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-RSA-AES128-SHA256:  -tls1         - just use TLSv1
`-SSLv2:DHE-RSA-AES128-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-RSA-AES128-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:DHE-RSA-AES128-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-RSA-AES128-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-RSA-AES128-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-RSA-AES128-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-RSA-AES128-SHA256:                  command to see what is available
`-SSLv2:DHE-RSA-AES128-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-RSA-AES128-SHA256:                  for those protocols that support it, where
`-SSLv2:DHE-RSA-AES128-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-RSA-AES128-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-RSA-AES128-SHA256:                  are supported.
`-SSLv2:DHE-RSA-AES128-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-RSA-AES128-SHA256:  -rand file:file:...
`-SSLv2:DHE-RSA-AES128-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-RSA-AES128-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-RSA-AES128-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-RSA-AES128-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-RSA-AES128-SHA256:  -status           - request certificate status from server
`-SSLv2:DHE-RSA-AES128-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-RSA-AES128-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-RSA-AES128-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-RSA-AES128-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-RSA-AES128-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-RSA-AES128-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-RSA-AES128-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-RSA-AES128-SHA256: 140619669903016:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:DHE-RSA-AES128-SHA256: CONNECTED(00000003)
`-SSLv3:DHE-RSA-AES128-SHA256: ---
`-SSLv3:DHE-RSA-AES128-SHA256: no peer certificate available
`-SSLv3:DHE-RSA-AES128-SHA256: ---
`-SSLv3:DHE-RSA-AES128-SHA256: No client certificate CA names sent
`-SSLv3:DHE-RSA-AES128-SHA256: ---
`-SSLv3:DHE-RSA-AES128-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:DHE-RSA-AES128-SHA256: ---
`-SSLv3:DHE-RSA-AES128-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-RSA-AES128-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-RSA-AES128-SHA256: Compression: NONE
`-SSLv3:DHE-RSA-AES128-SHA256: Expansion: NONE
`-SSLv3:DHE-RSA-AES128-SHA256: SSL-Session:
`-SSLv3:DHE-RSA-AES128-SHA256:     Protocol  : SSLv3
`-SSLv3:DHE-RSA-AES128-SHA256:     Cipher    : 0000
`-SSLv3:DHE-RSA-AES128-SHA256:     Session-ID: 
`-SSLv3:DHE-RSA-AES128-SHA256:     Session-ID-ctx: 
`-SSLv3:DHE-RSA-AES128-SHA256:     Master-Key: 
`-SSLv3:DHE-RSA-AES128-SHA256:     Key-Arg   : None
`-SSLv3:DHE-RSA-AES128-SHA256:     PSK identity: None
`-SSLv3:DHE-RSA-AES128-SHA256:     PSK identity hint: None
`-SSLv3:DHE-RSA-AES128-SHA256:     SRP username: None
`-SSLv3:DHE-RSA-AES128-SHA256:     Start Time: 1401715128
`-SSLv3:DHE-RSA-AES128-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:DHE-RSA-AES128-SHA256:     Verify return code: 0 (ok)
`-SSLv3:DHE-RSA-AES128-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:48 2014 DHE-RSA-AES256-GCM-SHA384
`-TLS1:DHE-RSA-AES256-GCM-SHA384: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-RSA-AES256-GCM-SHA384: 140730377766568:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:DHE-RSA-AES256-GCM-SHA384: CONNECTED(00000003)
`-TLS1:DHE-RSA-AES256-GCM-SHA384: ---
`-TLS1:DHE-RSA-AES256-GCM-SHA384: no peer certificate available
`-TLS1:DHE-RSA-AES256-GCM-SHA384: ---
`-TLS1:DHE-RSA-AES256-GCM-SHA384: No client certificate CA names sent
`-TLS1:DHE-RSA-AES256-GCM-SHA384: ---
`-TLS1:DHE-RSA-AES256-GCM-SHA384: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:DHE-RSA-AES256-GCM-SHA384: ---
`-TLS1:DHE-RSA-AES256-GCM-SHA384: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-RSA-AES256-GCM-SHA384: Secure Renegotiation IS NOT supported
`-TLS1:DHE-RSA-AES256-GCM-SHA384: Compression: NONE
`-TLS1:DHE-RSA-AES256-GCM-SHA384: Expansion: NONE
`-TLS1:DHE-RSA-AES256-GCM-SHA384: SSL-Session:
`-TLS1:DHE-RSA-AES256-GCM-SHA384:     Protocol  : TLSv1
`-TLS1:DHE-RSA-AES256-GCM-SHA384:     Cipher    : 0000
`-TLS1:DHE-RSA-AES256-GCM-SHA384:     Session-ID: 
`-TLS1:DHE-RSA-AES256-GCM-SHA384:     Session-ID-ctx: 
`-TLS1:DHE-RSA-AES256-GCM-SHA384:     Master-Key: 
`-TLS1:DHE-RSA-AES256-GCM-SHA384:     Key-Arg   : None
`-TLS1:DHE-RSA-AES256-GCM-SHA384:     PSK identity: None
`-TLS1:DHE-RSA-AES256-GCM-SHA384:     PSK identity hint: None
`-TLS1:DHE-RSA-AES256-GCM-SHA384:     SRP username: None
`-TLS1:DHE-RSA-AES256-GCM-SHA384:     Start Time: 1401715129
`-TLS1:DHE-RSA-AES256-GCM-SHA384:     Timeout   : 7200 (sec)
`-TLS1:DHE-RSA-AES256-GCM-SHA384:     Verify return code: 0 (ok)
`-TLS1:DHE-RSA-AES256-GCM-SHA384: ---

`-SSLv2:DHE-RSA-AES256-GCM-SHA384: unknown option -ssl2
`-SSLv2:DHE-RSA-AES256-GCM-SHA384: usage: s_client args
`-SSLv2:DHE-RSA-AES256-GCM-SHA384: 
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -host host     - use -connect instead
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -port port     - use -connect instead
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:                  not specified but cert file is.
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -debug        - extra output
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -msg          - Show protocol messages
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -state        - print the 'ssl' states
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -quiet        - no s_client output
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -psk_identity arg - PSK identity
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -srppass arg      - password for 'user'
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -ssl2         - just use SSLv2
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -ssl3         - just use SSLv3
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -tls1         - just use TLSv1
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -mtu          - set the link layer MTU
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:                  command to see what is available
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:                  for those protocols that support it, where
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:                  are supported.
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -rand file:file:...
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -status           - request certificate status from server
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-RSA-AES256-GCM-SHA384:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-RSA-AES256-GCM-SHA384: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: 139695538378408:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: CONNECTED(00000003)
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: ---
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: no peer certificate available
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: ---
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: No client certificate CA names sent
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: ---
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: ---
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: Compression: NONE
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: Expansion: NONE
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: SSL-Session:
`-SSLv3:DHE-RSA-AES256-GCM-SHA384:     Protocol  : SSLv3
`-SSLv3:DHE-RSA-AES256-GCM-SHA384:     Cipher    : 0000
`-SSLv3:DHE-RSA-AES256-GCM-SHA384:     Session-ID: 
`-SSLv3:DHE-RSA-AES256-GCM-SHA384:     Session-ID-ctx: 
`-SSLv3:DHE-RSA-AES256-GCM-SHA384:     Master-Key: 
`-SSLv3:DHE-RSA-AES256-GCM-SHA384:     Key-Arg   : None
`-SSLv3:DHE-RSA-AES256-GCM-SHA384:     PSK identity: None
`-SSLv3:DHE-RSA-AES256-GCM-SHA384:     PSK identity hint: None
`-SSLv3:DHE-RSA-AES256-GCM-SHA384:     SRP username: None
`-SSLv3:DHE-RSA-AES256-GCM-SHA384:     Start Time: 1401715129
`-SSLv3:DHE-RSA-AES256-GCM-SHA384:     Timeout   : 7200 (sec)
`-SSLv3:DHE-RSA-AES256-GCM-SHA384:     Verify return code: 0 (ok)
`-SSLv3:DHE-RSA-AES256-GCM-SHA384: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:49 2014 DHE-RSA-AES256-SHA
`-TLS1:DHE-RSA-AES256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-RSA-AES256-SHA: 140255928034984:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:DHE-RSA-AES256-SHA: 140255928034984:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:DHE-RSA-AES256-SHA: CONNECTED(00000003)
`-TLS1:DHE-RSA-AES256-SHA: ---
`-TLS1:DHE-RSA-AES256-SHA: no peer certificate available
`-TLS1:DHE-RSA-AES256-SHA: ---
`-TLS1:DHE-RSA-AES256-SHA: No client certificate CA names sent
`-TLS1:DHE-RSA-AES256-SHA: ---
`-TLS1:DHE-RSA-AES256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:DHE-RSA-AES256-SHA: ---
`-TLS1:DHE-RSA-AES256-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-RSA-AES256-SHA: Secure Renegotiation IS NOT supported
`-TLS1:DHE-RSA-AES256-SHA: Compression: NONE
`-TLS1:DHE-RSA-AES256-SHA: Expansion: NONE
`-TLS1:DHE-RSA-AES256-SHA: SSL-Session:
`-TLS1:DHE-RSA-AES256-SHA:     Protocol  : TLSv1
`-TLS1:DHE-RSA-AES256-SHA:     Cipher    : 0000
`-TLS1:DHE-RSA-AES256-SHA:     Session-ID: 
`-TLS1:DHE-RSA-AES256-SHA:     Session-ID-ctx: 
`-TLS1:DHE-RSA-AES256-SHA:     Master-Key: 
`-TLS1:DHE-RSA-AES256-SHA:     Key-Arg   : None
`-TLS1:DHE-RSA-AES256-SHA:     PSK identity: None
`-TLS1:DHE-RSA-AES256-SHA:     PSK identity hint: None
`-TLS1:DHE-RSA-AES256-SHA:     SRP username: None
`-TLS1:DHE-RSA-AES256-SHA:     Start Time: 1401715130
`-TLS1:DHE-RSA-AES256-SHA:     Timeout   : 7200 (sec)
`-TLS1:DHE-RSA-AES256-SHA:     Verify return code: 0 (ok)
`-TLS1:DHE-RSA-AES256-SHA: ---

`-SSLv2:DHE-RSA-AES256-SHA: unknown option -ssl2
`-SSLv2:DHE-RSA-AES256-SHA: usage: s_client args
`-SSLv2:DHE-RSA-AES256-SHA: 
`-SSLv2:DHE-RSA-AES256-SHA:  -host host     - use -connect instead
`-SSLv2:DHE-RSA-AES256-SHA:  -port port     - use -connect instead
`-SSLv2:DHE-RSA-AES256-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-RSA-AES256-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-RSA-AES256-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-RSA-AES256-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-AES256-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-RSA-AES256-SHA:                  not specified but cert file is.
`-SSLv2:DHE-RSA-AES256-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-AES256-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-RSA-AES256-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-RSA-AES256-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-RSA-AES256-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-RSA-AES256-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-RSA-AES256-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-RSA-AES256-SHA:  -debug        - extra output
`-SSLv2:DHE-RSA-AES256-SHA:  -msg          - Show protocol messages
`-SSLv2:DHE-RSA-AES256-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-RSA-AES256-SHA:  -state        - print the 'ssl' states
`-SSLv2:DHE-RSA-AES256-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-RSA-AES256-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-RSA-AES256-SHA:  -quiet        - no s_client output
`-SSLv2:DHE-RSA-AES256-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-RSA-AES256-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-RSA-AES256-SHA:  -psk_identity arg - PSK identity
`-SSLv2:DHE-RSA-AES256-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-RSA-AES256-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-RSA-AES256-SHA:  -srppass arg      - password for 'user'
`-SSLv2:DHE-RSA-AES256-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-RSA-AES256-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-RSA-AES256-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-RSA-AES256-SHA:  -ssl2         - just use SSLv2
`-SSLv2:DHE-RSA-AES256-SHA:  -ssl3         - just use SSLv3
`-SSLv2:DHE-RSA-AES256-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-RSA-AES256-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-RSA-AES256-SHA:  -tls1         - just use TLSv1
`-SSLv2:DHE-RSA-AES256-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-RSA-AES256-SHA:  -mtu          - set the link layer MTU
`-SSLv2:DHE-RSA-AES256-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-RSA-AES256-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-RSA-AES256-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-RSA-AES256-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-RSA-AES256-SHA:                  command to see what is available
`-SSLv2:DHE-RSA-AES256-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-RSA-AES256-SHA:                  for those protocols that support it, where
`-SSLv2:DHE-RSA-AES256-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-RSA-AES256-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-RSA-AES256-SHA:                  are supported.
`-SSLv2:DHE-RSA-AES256-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-RSA-AES256-SHA:  -rand file:file:...
`-SSLv2:DHE-RSA-AES256-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-RSA-AES256-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-RSA-AES256-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-RSA-AES256-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-RSA-AES256-SHA:  -status           - request certificate status from server
`-SSLv2:DHE-RSA-AES256-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-RSA-AES256-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-RSA-AES256-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-RSA-AES256-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-RSA-AES256-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-RSA-AES256-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-RSA-AES256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-RSA-AES256-SHA: 140626530354856:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:DHE-RSA-AES256-SHA: 140626530354856:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:DHE-RSA-AES256-SHA: CONNECTED(00000003)
`-SSLv3:DHE-RSA-AES256-SHA: ---
`-SSLv3:DHE-RSA-AES256-SHA: no peer certificate available
`-SSLv3:DHE-RSA-AES256-SHA: ---
`-SSLv3:DHE-RSA-AES256-SHA: No client certificate CA names sent
`-SSLv3:DHE-RSA-AES256-SHA: ---
`-SSLv3:DHE-RSA-AES256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:DHE-RSA-AES256-SHA: ---
`-SSLv3:DHE-RSA-AES256-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-RSA-AES256-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-RSA-AES256-SHA: Compression: NONE
`-SSLv3:DHE-RSA-AES256-SHA: Expansion: NONE
`-SSLv3:DHE-RSA-AES256-SHA: SSL-Session:
`-SSLv3:DHE-RSA-AES256-SHA:     Protocol  : SSLv3
`-SSLv3:DHE-RSA-AES256-SHA:     Cipher    : 0000
`-SSLv3:DHE-RSA-AES256-SHA:     Session-ID: 
`-SSLv3:DHE-RSA-AES256-SHA:     Session-ID-ctx: 
`-SSLv3:DHE-RSA-AES256-SHA:     Master-Key: 
`-SSLv3:DHE-RSA-AES256-SHA:     Key-Arg   : None
`-SSLv3:DHE-RSA-AES256-SHA:     PSK identity: None
`-SSLv3:DHE-RSA-AES256-SHA:     PSK identity hint: None
`-SSLv3:DHE-RSA-AES256-SHA:     SRP username: None
`-SSLv3:DHE-RSA-AES256-SHA:     Start Time: 1401715130
`-SSLv3:DHE-RSA-AES256-SHA:     Timeout   : 7200 (sec)
`-SSLv3:DHE-RSA-AES256-SHA:     Verify return code: 0 (ok)
`-SSLv3:DHE-RSA-AES256-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:50 2014 DHE-RSA-AES256-SHA256
`-TLS1:DHE-RSA-AES256-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-RSA-AES256-SHA256: 140447050892968:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:DHE-RSA-AES256-SHA256: CONNECTED(00000003)
`-TLS1:DHE-RSA-AES256-SHA256: ---
`-TLS1:DHE-RSA-AES256-SHA256: no peer certificate available
`-TLS1:DHE-RSA-AES256-SHA256: ---
`-TLS1:DHE-RSA-AES256-SHA256: No client certificate CA names sent
`-TLS1:DHE-RSA-AES256-SHA256: ---
`-TLS1:DHE-RSA-AES256-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:DHE-RSA-AES256-SHA256: ---
`-TLS1:DHE-RSA-AES256-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-RSA-AES256-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:DHE-RSA-AES256-SHA256: Compression: NONE
`-TLS1:DHE-RSA-AES256-SHA256: Expansion: NONE
`-TLS1:DHE-RSA-AES256-SHA256: SSL-Session:
`-TLS1:DHE-RSA-AES256-SHA256:     Protocol  : TLSv1
`-TLS1:DHE-RSA-AES256-SHA256:     Cipher    : 0000
`-TLS1:DHE-RSA-AES256-SHA256:     Session-ID: 
`-TLS1:DHE-RSA-AES256-SHA256:     Session-ID-ctx: 
`-TLS1:DHE-RSA-AES256-SHA256:     Master-Key: 
`-TLS1:DHE-RSA-AES256-SHA256:     Key-Arg   : None
`-TLS1:DHE-RSA-AES256-SHA256:     PSK identity: None
`-TLS1:DHE-RSA-AES256-SHA256:     PSK identity hint: None
`-TLS1:DHE-RSA-AES256-SHA256:     SRP username: None
`-TLS1:DHE-RSA-AES256-SHA256:     Start Time: 1401715131
`-TLS1:DHE-RSA-AES256-SHA256:     Timeout   : 7200 (sec)
`-TLS1:DHE-RSA-AES256-SHA256:     Verify return code: 0 (ok)
`-TLS1:DHE-RSA-AES256-SHA256: ---

`-SSLv2:DHE-RSA-AES256-SHA256: unknown option -ssl2
`-SSLv2:DHE-RSA-AES256-SHA256: usage: s_client args
`-SSLv2:DHE-RSA-AES256-SHA256: 
`-SSLv2:DHE-RSA-AES256-SHA256:  -host host     - use -connect instead
`-SSLv2:DHE-RSA-AES256-SHA256:  -port port     - use -connect instead
`-SSLv2:DHE-RSA-AES256-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-RSA-AES256-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-RSA-AES256-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-RSA-AES256-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-AES256-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-RSA-AES256-SHA256:                  not specified but cert file is.
`-SSLv2:DHE-RSA-AES256-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-AES256-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-RSA-AES256-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-RSA-AES256-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-RSA-AES256-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-RSA-AES256-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-RSA-AES256-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-RSA-AES256-SHA256:  -debug        - extra output
`-SSLv2:DHE-RSA-AES256-SHA256:  -msg          - Show protocol messages
`-SSLv2:DHE-RSA-AES256-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-RSA-AES256-SHA256:  -state        - print the 'ssl' states
`-SSLv2:DHE-RSA-AES256-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-RSA-AES256-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-RSA-AES256-SHA256:  -quiet        - no s_client output
`-SSLv2:DHE-RSA-AES256-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-RSA-AES256-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-RSA-AES256-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:DHE-RSA-AES256-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-RSA-AES256-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-RSA-AES256-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:DHE-RSA-AES256-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-RSA-AES256-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-RSA-AES256-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-RSA-AES256-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:DHE-RSA-AES256-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:DHE-RSA-AES256-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-RSA-AES256-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-RSA-AES256-SHA256:  -tls1         - just use TLSv1
`-SSLv2:DHE-RSA-AES256-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-RSA-AES256-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:DHE-RSA-AES256-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-RSA-AES256-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-RSA-AES256-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-RSA-AES256-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-RSA-AES256-SHA256:                  command to see what is available
`-SSLv2:DHE-RSA-AES256-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-RSA-AES256-SHA256:                  for those protocols that support it, where
`-SSLv2:DHE-RSA-AES256-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-RSA-AES256-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-RSA-AES256-SHA256:                  are supported.
`-SSLv2:DHE-RSA-AES256-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-RSA-AES256-SHA256:  -rand file:file:...
`-SSLv2:DHE-RSA-AES256-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-RSA-AES256-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-RSA-AES256-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-RSA-AES256-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-RSA-AES256-SHA256:  -status           - request certificate status from server
`-SSLv2:DHE-RSA-AES256-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-RSA-AES256-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-RSA-AES256-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-RSA-AES256-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-RSA-AES256-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-RSA-AES256-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-RSA-AES256-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-RSA-AES256-SHA256: 139986646095528:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:DHE-RSA-AES256-SHA256: CONNECTED(00000003)
`-SSLv3:DHE-RSA-AES256-SHA256: ---
`-SSLv3:DHE-RSA-AES256-SHA256: no peer certificate available
`-SSLv3:DHE-RSA-AES256-SHA256: ---
`-SSLv3:DHE-RSA-AES256-SHA256: No client certificate CA names sent
`-SSLv3:DHE-RSA-AES256-SHA256: ---
`-SSLv3:DHE-RSA-AES256-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:DHE-RSA-AES256-SHA256: ---
`-SSLv3:DHE-RSA-AES256-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-RSA-AES256-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-RSA-AES256-SHA256: Compression: NONE
`-SSLv3:DHE-RSA-AES256-SHA256: Expansion: NONE
`-SSLv3:DHE-RSA-AES256-SHA256: SSL-Session:
`-SSLv3:DHE-RSA-AES256-SHA256:     Protocol  : SSLv3
`-SSLv3:DHE-RSA-AES256-SHA256:     Cipher    : 0000
`-SSLv3:DHE-RSA-AES256-SHA256:     Session-ID: 
`-SSLv3:DHE-RSA-AES256-SHA256:     Session-ID-ctx: 
`-SSLv3:DHE-RSA-AES256-SHA256:     Master-Key: 
`-SSLv3:DHE-RSA-AES256-SHA256:     Key-Arg   : None
`-SSLv3:DHE-RSA-AES256-SHA256:     PSK identity: None
`-SSLv3:DHE-RSA-AES256-SHA256:     PSK identity hint: None
`-SSLv3:DHE-RSA-AES256-SHA256:     SRP username: None
`-SSLv3:DHE-RSA-AES256-SHA256:     Start Time: 1401715131
`-SSLv3:DHE-RSA-AES256-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:DHE-RSA-AES256-SHA256:     Verify return code: 0 (ok)
`-SSLv3:DHE-RSA-AES256-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:51 2014 DHE-RSA-CAMELLIA128-SHA
`-TLS1:DHE-RSA-CAMELLIA128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-RSA-CAMELLIA128-SHA: 139753970341544:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:DHE-RSA-CAMELLIA128-SHA: 139753970341544:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:DHE-RSA-CAMELLIA128-SHA: CONNECTED(00000003)
`-TLS1:DHE-RSA-CAMELLIA128-SHA: ---
`-TLS1:DHE-RSA-CAMELLIA128-SHA: no peer certificate available
`-TLS1:DHE-RSA-CAMELLIA128-SHA: ---
`-TLS1:DHE-RSA-CAMELLIA128-SHA: No client certificate CA names sent
`-TLS1:DHE-RSA-CAMELLIA128-SHA: ---
`-TLS1:DHE-RSA-CAMELLIA128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:DHE-RSA-CAMELLIA128-SHA: ---
`-TLS1:DHE-RSA-CAMELLIA128-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-RSA-CAMELLIA128-SHA: Secure Renegotiation IS NOT supported
`-TLS1:DHE-RSA-CAMELLIA128-SHA: Compression: NONE
`-TLS1:DHE-RSA-CAMELLIA128-SHA: Expansion: NONE
`-TLS1:DHE-RSA-CAMELLIA128-SHA: SSL-Session:
`-TLS1:DHE-RSA-CAMELLIA128-SHA:     Protocol  : TLSv1
`-TLS1:DHE-RSA-CAMELLIA128-SHA:     Cipher    : 0000
`-TLS1:DHE-RSA-CAMELLIA128-SHA:     Session-ID: 
`-TLS1:DHE-RSA-CAMELLIA128-SHA:     Session-ID-ctx: 
`-TLS1:DHE-RSA-CAMELLIA128-SHA:     Master-Key: 
`-TLS1:DHE-RSA-CAMELLIA128-SHA:     Key-Arg   : None
`-TLS1:DHE-RSA-CAMELLIA128-SHA:     PSK identity: None
`-TLS1:DHE-RSA-CAMELLIA128-SHA:     PSK identity hint: None
`-TLS1:DHE-RSA-CAMELLIA128-SHA:     SRP username: None
`-TLS1:DHE-RSA-CAMELLIA128-SHA:     Start Time: 1401715132
`-TLS1:DHE-RSA-CAMELLIA128-SHA:     Timeout   : 7200 (sec)
`-TLS1:DHE-RSA-CAMELLIA128-SHA:     Verify return code: 0 (ok)
`-TLS1:DHE-RSA-CAMELLIA128-SHA: ---

`-SSLv2:DHE-RSA-CAMELLIA128-SHA: unknown option -ssl2
`-SSLv2:DHE-RSA-CAMELLIA128-SHA: usage: s_client args
`-SSLv2:DHE-RSA-CAMELLIA128-SHA: 
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -host host     - use -connect instead
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -port port     - use -connect instead
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:                  not specified but cert file is.
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -debug        - extra output
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -msg          - Show protocol messages
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -state        - print the 'ssl' states
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -quiet        - no s_client output
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -psk_identity arg - PSK identity
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -srppass arg      - password for 'user'
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -ssl2         - just use SSLv2
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -ssl3         - just use SSLv3
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -tls1         - just use TLSv1
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -mtu          - set the link layer MTU
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:                  command to see what is available
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:                  for those protocols that support it, where
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:                  are supported.
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -rand file:file:...
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -status           - request certificate status from server
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-RSA-CAMELLIA128-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-RSA-CAMELLIA128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: 140221999691432:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: 140221999691432:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: CONNECTED(00000003)
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: ---
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: no peer certificate available
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: ---
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: No client certificate CA names sent
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: ---
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: ---
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: Compression: NONE
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: Expansion: NONE
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: SSL-Session:
`-SSLv3:DHE-RSA-CAMELLIA128-SHA:     Protocol  : SSLv3
`-SSLv3:DHE-RSA-CAMELLIA128-SHA:     Cipher    : 0000
`-SSLv3:DHE-RSA-CAMELLIA128-SHA:     Session-ID: 
`-SSLv3:DHE-RSA-CAMELLIA128-SHA:     Session-ID-ctx: 
`-SSLv3:DHE-RSA-CAMELLIA128-SHA:     Master-Key: 
`-SSLv3:DHE-RSA-CAMELLIA128-SHA:     Key-Arg   : None
`-SSLv3:DHE-RSA-CAMELLIA128-SHA:     PSK identity: None
`-SSLv3:DHE-RSA-CAMELLIA128-SHA:     PSK identity hint: None
`-SSLv3:DHE-RSA-CAMELLIA128-SHA:     SRP username: None
`-SSLv3:DHE-RSA-CAMELLIA128-SHA:     Start Time: 1401715133
`-SSLv3:DHE-RSA-CAMELLIA128-SHA:     Timeout   : 7200 (sec)
`-SSLv3:DHE-RSA-CAMELLIA128-SHA:     Verify return code: 0 (ok)
`-SSLv3:DHE-RSA-CAMELLIA128-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:53 2014 DHE-RSA-CAMELLIA256-SHA
`-TLS1:DHE-RSA-CAMELLIA256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-RSA-CAMELLIA256-SHA: 140621012076200:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:DHE-RSA-CAMELLIA256-SHA: 140621012076200:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:DHE-RSA-CAMELLIA256-SHA: CONNECTED(00000003)
`-TLS1:DHE-RSA-CAMELLIA256-SHA: ---
`-TLS1:DHE-RSA-CAMELLIA256-SHA: no peer certificate available
`-TLS1:DHE-RSA-CAMELLIA256-SHA: ---
`-TLS1:DHE-RSA-CAMELLIA256-SHA: No client certificate CA names sent
`-TLS1:DHE-RSA-CAMELLIA256-SHA: ---
`-TLS1:DHE-RSA-CAMELLIA256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:DHE-RSA-CAMELLIA256-SHA: ---
`-TLS1:DHE-RSA-CAMELLIA256-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-RSA-CAMELLIA256-SHA: Secure Renegotiation IS NOT supported
`-TLS1:DHE-RSA-CAMELLIA256-SHA: Compression: NONE
`-TLS1:DHE-RSA-CAMELLIA256-SHA: Expansion: NONE
`-TLS1:DHE-RSA-CAMELLIA256-SHA: SSL-Session:
`-TLS1:DHE-RSA-CAMELLIA256-SHA:     Protocol  : TLSv1
`-TLS1:DHE-RSA-CAMELLIA256-SHA:     Cipher    : 0000
`-TLS1:DHE-RSA-CAMELLIA256-SHA:     Session-ID: 
`-TLS1:DHE-RSA-CAMELLIA256-SHA:     Session-ID-ctx: 
`-TLS1:DHE-RSA-CAMELLIA256-SHA:     Master-Key: 
`-TLS1:DHE-RSA-CAMELLIA256-SHA:     Key-Arg   : None
`-TLS1:DHE-RSA-CAMELLIA256-SHA:     PSK identity: None
`-TLS1:DHE-RSA-CAMELLIA256-SHA:     PSK identity hint: None
`-TLS1:DHE-RSA-CAMELLIA256-SHA:     SRP username: None
`-TLS1:DHE-RSA-CAMELLIA256-SHA:     Start Time: 1401715133
`-TLS1:DHE-RSA-CAMELLIA256-SHA:     Timeout   : 7200 (sec)
`-TLS1:DHE-RSA-CAMELLIA256-SHA:     Verify return code: 0 (ok)
`-TLS1:DHE-RSA-CAMELLIA256-SHA: ---

`-SSLv2:DHE-RSA-CAMELLIA256-SHA: unknown option -ssl2
`-SSLv2:DHE-RSA-CAMELLIA256-SHA: usage: s_client args
`-SSLv2:DHE-RSA-CAMELLIA256-SHA: 
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -host host     - use -connect instead
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -port port     - use -connect instead
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:                  not specified but cert file is.
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -debug        - extra output
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -msg          - Show protocol messages
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -state        - print the 'ssl' states
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -quiet        - no s_client output
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -psk_identity arg - PSK identity
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -srppass arg      - password for 'user'
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -ssl2         - just use SSLv2
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -ssl3         - just use SSLv3
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -tls1         - just use TLSv1
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -mtu          - set the link layer MTU
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:                  command to see what is available
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:                  for those protocols that support it, where
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:                  are supported.
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -rand file:file:...
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -status           - request certificate status from server
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-RSA-CAMELLIA256-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-RSA-CAMELLIA256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: 140343830701736:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: 140343830701736:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: CONNECTED(00000003)
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: ---
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: no peer certificate available
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: ---
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: No client certificate CA names sent
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: ---
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: ---
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: Compression: NONE
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: Expansion: NONE
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: SSL-Session:
`-SSLv3:DHE-RSA-CAMELLIA256-SHA:     Protocol  : SSLv3
`-SSLv3:DHE-RSA-CAMELLIA256-SHA:     Cipher    : 0000
`-SSLv3:DHE-RSA-CAMELLIA256-SHA:     Session-ID: 
`-SSLv3:DHE-RSA-CAMELLIA256-SHA:     Session-ID-ctx: 
`-SSLv3:DHE-RSA-CAMELLIA256-SHA:     Master-Key: 
`-SSLv3:DHE-RSA-CAMELLIA256-SHA:     Key-Arg   : None
`-SSLv3:DHE-RSA-CAMELLIA256-SHA:     PSK identity: None
`-SSLv3:DHE-RSA-CAMELLIA256-SHA:     PSK identity hint: None
`-SSLv3:DHE-RSA-CAMELLIA256-SHA:     SRP username: None
`-SSLv3:DHE-RSA-CAMELLIA256-SHA:     Start Time: 1401715134
`-SSLv3:DHE-RSA-CAMELLIA256-SHA:     Timeout   : 7200 (sec)
`-SSLv3:DHE-RSA-CAMELLIA256-SHA:     Verify return code: 0 (ok)
`-SSLv3:DHE-RSA-CAMELLIA256-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:54 2014 DHE-RSA-SEED-SHA
`-TLS1:DHE-RSA-SEED-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:DHE-RSA-SEED-SHA: 140312008824488:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:DHE-RSA-SEED-SHA: 140312008824488:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:DHE-RSA-SEED-SHA: CONNECTED(00000003)
`-TLS1:DHE-RSA-SEED-SHA: ---
`-TLS1:DHE-RSA-SEED-SHA: no peer certificate available
`-TLS1:DHE-RSA-SEED-SHA: ---
`-TLS1:DHE-RSA-SEED-SHA: No client certificate CA names sent
`-TLS1:DHE-RSA-SEED-SHA: ---
`-TLS1:DHE-RSA-SEED-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:DHE-RSA-SEED-SHA: ---
`-TLS1:DHE-RSA-SEED-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:DHE-RSA-SEED-SHA: Secure Renegotiation IS NOT supported
`-TLS1:DHE-RSA-SEED-SHA: Compression: NONE
`-TLS1:DHE-RSA-SEED-SHA: Expansion: NONE
`-TLS1:DHE-RSA-SEED-SHA: SSL-Session:
`-TLS1:DHE-RSA-SEED-SHA:     Protocol  : TLSv1
`-TLS1:DHE-RSA-SEED-SHA:     Cipher    : 0000
`-TLS1:DHE-RSA-SEED-SHA:     Session-ID: 
`-TLS1:DHE-RSA-SEED-SHA:     Session-ID-ctx: 
`-TLS1:DHE-RSA-SEED-SHA:     Master-Key: 
`-TLS1:DHE-RSA-SEED-SHA:     Key-Arg   : None
`-TLS1:DHE-RSA-SEED-SHA:     PSK identity: None
`-TLS1:DHE-RSA-SEED-SHA:     PSK identity hint: None
`-TLS1:DHE-RSA-SEED-SHA:     SRP username: None
`-TLS1:DHE-RSA-SEED-SHA:     Start Time: 1401715134
`-TLS1:DHE-RSA-SEED-SHA:     Timeout   : 7200 (sec)
`-TLS1:DHE-RSA-SEED-SHA:     Verify return code: 0 (ok)
`-TLS1:DHE-RSA-SEED-SHA: ---

`-SSLv2:DHE-RSA-SEED-SHA: unknown option -ssl2
`-SSLv2:DHE-RSA-SEED-SHA: usage: s_client args
`-SSLv2:DHE-RSA-SEED-SHA: 
`-SSLv2:DHE-RSA-SEED-SHA:  -host host     - use -connect instead
`-SSLv2:DHE-RSA-SEED-SHA:  -port port     - use -connect instead
`-SSLv2:DHE-RSA-SEED-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:DHE-RSA-SEED-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:DHE-RSA-SEED-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:DHE-RSA-SEED-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-SEED-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:DHE-RSA-SEED-SHA:                  not specified but cert file is.
`-SSLv2:DHE-RSA-SEED-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:DHE-RSA-SEED-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:DHE-RSA-SEED-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:DHE-RSA-SEED-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:DHE-RSA-SEED-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:DHE-RSA-SEED-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:DHE-RSA-SEED-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:DHE-RSA-SEED-SHA:  -debug        - extra output
`-SSLv2:DHE-RSA-SEED-SHA:  -msg          - Show protocol messages
`-SSLv2:DHE-RSA-SEED-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:DHE-RSA-SEED-SHA:  -state        - print the 'ssl' states
`-SSLv2:DHE-RSA-SEED-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:DHE-RSA-SEED-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:DHE-RSA-SEED-SHA:  -quiet        - no s_client output
`-SSLv2:DHE-RSA-SEED-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:DHE-RSA-SEED-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:DHE-RSA-SEED-SHA:  -psk_identity arg - PSK identity
`-SSLv2:DHE-RSA-SEED-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:DHE-RSA-SEED-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:DHE-RSA-SEED-SHA:  -srppass arg      - password for 'user'
`-SSLv2:DHE-RSA-SEED-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:DHE-RSA-SEED-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:DHE-RSA-SEED-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:DHE-RSA-SEED-SHA:  -ssl2         - just use SSLv2
`-SSLv2:DHE-RSA-SEED-SHA:  -ssl3         - just use SSLv3
`-SSLv2:DHE-RSA-SEED-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:DHE-RSA-SEED-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:DHE-RSA-SEED-SHA:  -tls1         - just use TLSv1
`-SSLv2:DHE-RSA-SEED-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:DHE-RSA-SEED-SHA:  -mtu          - set the link layer MTU
`-SSLv2:DHE-RSA-SEED-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:DHE-RSA-SEED-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:DHE-RSA-SEED-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:DHE-RSA-SEED-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:DHE-RSA-SEED-SHA:                  command to see what is available
`-SSLv2:DHE-RSA-SEED-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:DHE-RSA-SEED-SHA:                  for those protocols that support it, where
`-SSLv2:DHE-RSA-SEED-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:DHE-RSA-SEED-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:DHE-RSA-SEED-SHA:                  are supported.
`-SSLv2:DHE-RSA-SEED-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:DHE-RSA-SEED-SHA:  -rand file:file:...
`-SSLv2:DHE-RSA-SEED-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:DHE-RSA-SEED-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:DHE-RSA-SEED-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:DHE-RSA-SEED-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:DHE-RSA-SEED-SHA:  -status           - request certificate status from server
`-SSLv2:DHE-RSA-SEED-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:DHE-RSA-SEED-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:DHE-RSA-SEED-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:DHE-RSA-SEED-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:DHE-RSA-SEED-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:DHE-RSA-SEED-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:DHE-RSA-SEED-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:DHE-RSA-SEED-SHA: 140667814639272:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:DHE-RSA-SEED-SHA: 140667814639272:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:DHE-RSA-SEED-SHA: CONNECTED(00000003)
`-SSLv3:DHE-RSA-SEED-SHA: ---
`-SSLv3:DHE-RSA-SEED-SHA: no peer certificate available
`-SSLv3:DHE-RSA-SEED-SHA: ---
`-SSLv3:DHE-RSA-SEED-SHA: No client certificate CA names sent
`-SSLv3:DHE-RSA-SEED-SHA: ---
`-SSLv3:DHE-RSA-SEED-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:DHE-RSA-SEED-SHA: ---
`-SSLv3:DHE-RSA-SEED-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:DHE-RSA-SEED-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:DHE-RSA-SEED-SHA: Compression: NONE
`-SSLv3:DHE-RSA-SEED-SHA: Expansion: NONE
`-SSLv3:DHE-RSA-SEED-SHA: SSL-Session:
`-SSLv3:DHE-RSA-SEED-SHA:     Protocol  : SSLv3
`-SSLv3:DHE-RSA-SEED-SHA:     Cipher    : 0000
`-SSLv3:DHE-RSA-SEED-SHA:     Session-ID: 
`-SSLv3:DHE-RSA-SEED-SHA:     Session-ID-ctx: 
`-SSLv3:DHE-RSA-SEED-SHA:     Master-Key: 
`-SSLv3:DHE-RSA-SEED-SHA:     Key-Arg   : None
`-SSLv3:DHE-RSA-SEED-SHA:     PSK identity: None
`-SSLv3:DHE-RSA-SEED-SHA:     PSK identity hint: None
`-SSLv3:DHE-RSA-SEED-SHA:     SRP username: None
`-SSLv3:DHE-RSA-SEED-SHA:     Start Time: 1401715135
`-SSLv3:DHE-RSA-SEED-SHA:     Timeout   : 7200 (sec)
`-SSLv3:DHE-RSA-SEED-SHA:     Verify return code: 0 (ok)
`-SSLv3:DHE-RSA-SEED-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:55 2014 ECDH-ECDSA-AES128-GCM-SHA256
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: 140704752256680:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: CONNECTED(00000003)
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: ---
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: no peer certificate available
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: ---
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: No client certificate CA names sent
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: ---
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: ---
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: Compression: NONE
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: Expansion: NONE
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: SSL-Session:
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256:     Protocol  : TLSv1
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256:     Cipher    : 0000
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256:     Session-ID: 
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256:     Session-ID-ctx: 
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256:     Master-Key: 
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256:     Key-Arg   : None
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256:     PSK identity: None
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256:     PSK identity hint: None
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256:     SRP username: None
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256:     Start Time: 1401715135
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256:     Timeout   : 7200 (sec)
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256:     Verify return code: 0 (ok)
`-TLS1:ECDH-ECDSA-AES128-GCM-SHA256: ---

`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256: unknown option -ssl2
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256: usage: s_client args
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256: 
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -host host     - use -connect instead
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -port port     - use -connect instead
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:                  not specified but cert file is.
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -debug        - extra output
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -msg          - Show protocol messages
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -state        - print the 'ssl' states
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -quiet        - no s_client output
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -tls1         - just use TLSv1
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:                  command to see what is available
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:                  for those protocols that support it, where
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:                  are supported.
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -rand file:file:...
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -status           - request certificate status from server
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:ECDH-ECDSA-AES128-GCM-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: 140634391373480:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: CONNECTED(00000003)
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: ---
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: no peer certificate available
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: ---
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: No client certificate CA names sent
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: ---
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: ---
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: Compression: NONE
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: Expansion: NONE
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: SSL-Session:
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256:     Protocol  : SSLv3
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256:     Cipher    : 0000
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256:     Session-ID: 
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256:     Session-ID-ctx: 
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256:     Master-Key: 
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256:     Key-Arg   : None
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256:     PSK identity: None
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256:     PSK identity hint: None
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256:     SRP username: None
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256:     Start Time: 1401715136
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256:     Verify return code: 0 (ok)
`-SSLv3:ECDH-ECDSA-AES128-GCM-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:56 2014 ECDH-ECDSA-AES128-SHA
`-TLS1:ECDH-ECDSA-AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:ECDH-ECDSA-AES128-SHA: 140284735043240:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ECDH-ECDSA-AES128-SHA: 140284735043240:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ECDH-ECDSA-AES128-SHA: CONNECTED(00000003)
`-TLS1:ECDH-ECDSA-AES128-SHA: ---
`-TLS1:ECDH-ECDSA-AES128-SHA: no peer certificate available
`-TLS1:ECDH-ECDSA-AES128-SHA: ---
`-TLS1:ECDH-ECDSA-AES128-SHA: No client certificate CA names sent
`-TLS1:ECDH-ECDSA-AES128-SHA: ---
`-TLS1:ECDH-ECDSA-AES128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ECDH-ECDSA-AES128-SHA: ---
`-TLS1:ECDH-ECDSA-AES128-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:ECDH-ECDSA-AES128-SHA: Secure Renegotiation IS NOT supported
`-TLS1:ECDH-ECDSA-AES128-SHA: Compression: NONE
`-TLS1:ECDH-ECDSA-AES128-SHA: Expansion: NONE
`-TLS1:ECDH-ECDSA-AES128-SHA: SSL-Session:
`-TLS1:ECDH-ECDSA-AES128-SHA:     Protocol  : TLSv1
`-TLS1:ECDH-ECDSA-AES128-SHA:     Cipher    : 0000
`-TLS1:ECDH-ECDSA-AES128-SHA:     Session-ID: 
`-TLS1:ECDH-ECDSA-AES128-SHA:     Session-ID-ctx: 
`-TLS1:ECDH-ECDSA-AES128-SHA:     Master-Key: 
`-TLS1:ECDH-ECDSA-AES128-SHA:     Key-Arg   : None
`-TLS1:ECDH-ECDSA-AES128-SHA:     PSK identity: None
`-TLS1:ECDH-ECDSA-AES128-SHA:     PSK identity hint: None
`-TLS1:ECDH-ECDSA-AES128-SHA:     SRP username: None
`-TLS1:ECDH-ECDSA-AES128-SHA:     Start Time: 1401715137
`-TLS1:ECDH-ECDSA-AES128-SHA:     Timeout   : 7200 (sec)
`-TLS1:ECDH-ECDSA-AES128-SHA:     Verify return code: 0 (ok)
`-TLS1:ECDH-ECDSA-AES128-SHA: ---

`-SSLv2:ECDH-ECDSA-AES128-SHA: unknown option -ssl2
`-SSLv2:ECDH-ECDSA-AES128-SHA: usage: s_client args
`-SSLv2:ECDH-ECDSA-AES128-SHA: 
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -host host     - use -connect instead
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -port port     - use -connect instead
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ECDH-ECDSA-AES128-SHA:                  not specified but cert file is.
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -debug        - extra output
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -msg          - Show protocol messages
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -state        - print the 'ssl' states
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -quiet        - no s_client output
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -psk_identity arg - PSK identity
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -srppass arg      - password for 'user'
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -ssl2         - just use SSLv2
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -ssl3         - just use SSLv3
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -tls1         - just use TLSv1
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -mtu          - set the link layer MTU
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ECDH-ECDSA-AES128-SHA:                  command to see what is available
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ECDH-ECDSA-AES128-SHA:                  for those protocols that support it, where
`-SSLv2:ECDH-ECDSA-AES128-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ECDH-ECDSA-AES128-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ECDH-ECDSA-AES128-SHA:                  are supported.
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -rand file:file:...
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -status           - request certificate status from server
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:ECDH-ECDSA-AES128-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ECDH-ECDSA-AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:ECDH-ECDSA-AES128-SHA: 140687377237672:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ECDH-ECDSA-AES128-SHA: 140687377237672:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ECDH-ECDSA-AES128-SHA: CONNECTED(00000003)
`-SSLv3:ECDH-ECDSA-AES128-SHA: ---
`-SSLv3:ECDH-ECDSA-AES128-SHA: no peer certificate available
`-SSLv3:ECDH-ECDSA-AES128-SHA: ---
`-SSLv3:ECDH-ECDSA-AES128-SHA: No client certificate CA names sent
`-SSLv3:ECDH-ECDSA-AES128-SHA: ---
`-SSLv3:ECDH-ECDSA-AES128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ECDH-ECDSA-AES128-SHA: ---
`-SSLv3:ECDH-ECDSA-AES128-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:ECDH-ECDSA-AES128-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:ECDH-ECDSA-AES128-SHA: Compression: NONE
`-SSLv3:ECDH-ECDSA-AES128-SHA: Expansion: NONE
`-SSLv3:ECDH-ECDSA-AES128-SHA: SSL-Session:
`-SSLv3:ECDH-ECDSA-AES128-SHA:     Protocol  : SSLv3
`-SSLv3:ECDH-ECDSA-AES128-SHA:     Cipher    : 0000
`-SSLv3:ECDH-ECDSA-AES128-SHA:     Session-ID: 
`-SSLv3:ECDH-ECDSA-AES128-SHA:     Session-ID-ctx: 
`-SSLv3:ECDH-ECDSA-AES128-SHA:     Master-Key: 
`-SSLv3:ECDH-ECDSA-AES128-SHA:     Key-Arg   : None
`-SSLv3:ECDH-ECDSA-AES128-SHA:     PSK identity: None
`-SSLv3:ECDH-ECDSA-AES128-SHA:     PSK identity hint: None
`-SSLv3:ECDH-ECDSA-AES128-SHA:     SRP username: None
`-SSLv3:ECDH-ECDSA-AES128-SHA:     Start Time: 1401715137
`-SSLv3:ECDH-ECDSA-AES128-SHA:     Timeout   : 7200 (sec)
`-SSLv3:ECDH-ECDSA-AES128-SHA:     Verify return code: 0 (ok)
`-SSLv3:ECDH-ECDSA-AES128-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:57 2014 ECDH-ECDSA-AES128-SHA256
`-TLS1:ECDH-ECDSA-AES128-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:ECDH-ECDSA-AES128-SHA256: 140693341390504:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:ECDH-ECDSA-AES128-SHA256: CONNECTED(00000003)
`-TLS1:ECDH-ECDSA-AES128-SHA256: ---
`-TLS1:ECDH-ECDSA-AES128-SHA256: no peer certificate available
`-TLS1:ECDH-ECDSA-AES128-SHA256: ---
`-TLS1:ECDH-ECDSA-AES128-SHA256: No client certificate CA names sent
`-TLS1:ECDH-ECDSA-AES128-SHA256: ---
`-TLS1:ECDH-ECDSA-AES128-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:ECDH-ECDSA-AES128-SHA256: ---
`-TLS1:ECDH-ECDSA-AES128-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:ECDH-ECDSA-AES128-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:ECDH-ECDSA-AES128-SHA256: Compression: NONE
`-TLS1:ECDH-ECDSA-AES128-SHA256: Expansion: NONE
`-TLS1:ECDH-ECDSA-AES128-SHA256: SSL-Session:
`-TLS1:ECDH-ECDSA-AES128-SHA256:     Protocol  : TLSv1
`-TLS1:ECDH-ECDSA-AES128-SHA256:     Cipher    : 0000
`-TLS1:ECDH-ECDSA-AES128-SHA256:     Session-ID: 
`-TLS1:ECDH-ECDSA-AES128-SHA256:     Session-ID-ctx: 
`-TLS1:ECDH-ECDSA-AES128-SHA256:     Master-Key: 
`-TLS1:ECDH-ECDSA-AES128-SHA256:     Key-Arg   : None
`-TLS1:ECDH-ECDSA-AES128-SHA256:     PSK identity: None
`-TLS1:ECDH-ECDSA-AES128-SHA256:     PSK identity hint: None
`-TLS1:ECDH-ECDSA-AES128-SHA256:     SRP username: None
`-TLS1:ECDH-ECDSA-AES128-SHA256:     Start Time: 1401715138
`-TLS1:ECDH-ECDSA-AES128-SHA256:     Timeout   : 7200 (sec)
`-TLS1:ECDH-ECDSA-AES128-SHA256:     Verify return code: 0 (ok)
`-TLS1:ECDH-ECDSA-AES128-SHA256: ---

`-SSLv2:ECDH-ECDSA-AES128-SHA256: unknown option -ssl2
`-SSLv2:ECDH-ECDSA-AES128-SHA256: usage: s_client args
`-SSLv2:ECDH-ECDSA-AES128-SHA256: 
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -host host     - use -connect instead
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -port port     - use -connect instead
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ECDH-ECDSA-AES128-SHA256:                  not specified but cert file is.
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -debug        - extra output
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -msg          - Show protocol messages
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -state        - print the 'ssl' states
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -quiet        - no s_client output
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -tls1         - just use TLSv1
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ECDH-ECDSA-AES128-SHA256:                  command to see what is available
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ECDH-ECDSA-AES128-SHA256:                  for those protocols that support it, where
`-SSLv2:ECDH-ECDSA-AES128-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ECDH-ECDSA-AES128-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ECDH-ECDSA-AES128-SHA256:                  are supported.
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -rand file:file:...
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -status           - request certificate status from server
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:ECDH-ECDSA-AES128-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ECDH-ECDSA-AES128-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:ECDH-ECDSA-AES128-SHA256: 140562697062056:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:ECDH-ECDSA-AES128-SHA256: CONNECTED(00000003)
`-SSLv3:ECDH-ECDSA-AES128-SHA256: ---
`-SSLv3:ECDH-ECDSA-AES128-SHA256: no peer certificate available
`-SSLv3:ECDH-ECDSA-AES128-SHA256: ---
`-SSLv3:ECDH-ECDSA-AES128-SHA256: No client certificate CA names sent
`-SSLv3:ECDH-ECDSA-AES128-SHA256: ---
`-SSLv3:ECDH-ECDSA-AES128-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:ECDH-ECDSA-AES128-SHA256: ---
`-SSLv3:ECDH-ECDSA-AES128-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:ECDH-ECDSA-AES128-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:ECDH-ECDSA-AES128-SHA256: Compression: NONE
`-SSLv3:ECDH-ECDSA-AES128-SHA256: Expansion: NONE
`-SSLv3:ECDH-ECDSA-AES128-SHA256: SSL-Session:
`-SSLv3:ECDH-ECDSA-AES128-SHA256:     Protocol  : SSLv3
`-SSLv3:ECDH-ECDSA-AES128-SHA256:     Cipher    : 0000
`-SSLv3:ECDH-ECDSA-AES128-SHA256:     Session-ID: 
`-SSLv3:ECDH-ECDSA-AES128-SHA256:     Session-ID-ctx: 
`-SSLv3:ECDH-ECDSA-AES128-SHA256:     Master-Key: 
`-SSLv3:ECDH-ECDSA-AES128-SHA256:     Key-Arg   : None
`-SSLv3:ECDH-ECDSA-AES128-SHA256:     PSK identity: None
`-SSLv3:ECDH-ECDSA-AES128-SHA256:     PSK identity hint: None
`-SSLv3:ECDH-ECDSA-AES128-SHA256:     SRP username: None
`-SSLv3:ECDH-ECDSA-AES128-SHA256:     Start Time: 1401715138
`-SSLv3:ECDH-ECDSA-AES128-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:ECDH-ECDSA-AES128-SHA256:     Verify return code: 0 (ok)
`-SSLv3:ECDH-ECDSA-AES128-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:58 2014 ECDH-ECDSA-AES256-GCM-SHA384
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: 139812845733544:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: CONNECTED(00000003)
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: ---
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: no peer certificate available
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: ---
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: No client certificate CA names sent
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: ---
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: ---
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: New, (NONE), Cipher is (NONE)
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: Secure Renegotiation IS NOT supported
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: Compression: NONE
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: Expansion: NONE
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: SSL-Session:
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384:     Protocol  : TLSv1
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384:     Cipher    : 0000
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384:     Session-ID: 
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384:     Session-ID-ctx: 
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384:     Master-Key: 
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384:     Key-Arg   : None
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384:     PSK identity: None
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384:     PSK identity hint: None
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384:     SRP username: None
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384:     Start Time: 1401715139
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384:     Timeout   : 7200 (sec)
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384:     Verify return code: 0 (ok)
`-TLS1:ECDH-ECDSA-AES256-GCM-SHA384: ---

`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384: unknown option -ssl2
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384: usage: s_client args
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384: 
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -host host     - use -connect instead
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -port port     - use -connect instead
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -verify arg   - turn on peer certificate verification
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:                  not specified but cert file is.
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -pass arg     - private key file pass phrase source
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -showcerts    - show all certificates in the chain
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -debug        - extra output
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -msg          - Show protocol messages
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -nbio_test    - more ssl protocol testing
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -state        - print the 'ssl' states
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -nbio         - Run with non-blocking IO
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -quiet        - no s_client output
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -psk_identity arg - PSK identity
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -srppass arg      - password for 'user'
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -ssl2         - just use SSLv2
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -ssl3         - just use SSLv3
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -tls1_2       - just use TLSv1.2
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -tls1_1       - just use TLSv1.1
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -tls1         - just use TLSv1
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -dtls1        - just use DTLSv1
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -mtu          - set the link layer MTU
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:                  command to see what is available
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:                  for those protocols that support it, where
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:                  are supported.
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -engine id    - Initialise and use the specified engine
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -rand file:file:...
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -sess_out arg - file to write SSL session to
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -sess_in arg  - file to read SSL session from
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -status           - request certificate status from server
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -keymatexport label   - Export keying material using label
`-SSLv2:ECDH-ECDSA-AES256-GCM-SHA384:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: 139672733247144:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: CONNECTED(00000003)
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: ---
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: no peer certificate available
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: ---
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: No client certificate CA names sent
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: ---
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: ---
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: New, (NONE), Cipher is (NONE)
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: Secure Renegotiation IS NOT supported
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: Compression: NONE
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: Expansion: NONE
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: SSL-Session:
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384:     Protocol  : SSLv3
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384:     Cipher    : 0000
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384:     Session-ID: 
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384:     Session-ID-ctx: 
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384:     Master-Key: 
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384:     Key-Arg   : None
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384:     PSK identity: None
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384:     PSK identity hint: None
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384:     SRP username: None
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384:     Start Time: 1401715139
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384:     Timeout   : 7200 (sec)
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384:     Verify return code: 0 (ok)
`-SSLv3:ECDH-ECDSA-AES256-GCM-SHA384: ---
------------------------------------------------------------------------
Mon Jun  2 16:18:59 2014 ECDH-ECDSA-AES256-SHA
`-TLS1:ECDH-ECDSA-AES256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:ECDH-ECDSA-AES256-SHA: 140591470851752:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ECDH-ECDSA-AES256-SHA: 140591470851752:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ECDH-ECDSA-AES256-SHA: CONNECTED(00000003)
`-TLS1:ECDH-ECDSA-AES256-SHA: ---
`-TLS1:ECDH-ECDSA-AES256-SHA: no peer certificate available
`-TLS1:ECDH-ECDSA-AES256-SHA: ---
`-TLS1:ECDH-ECDSA-AES256-SHA: No client certificate CA names sent
`-TLS1:ECDH-ECDSA-AES256-SHA: ---
`-TLS1:ECDH-ECDSA-AES256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ECDH-ECDSA-AES256-SHA: ---
`-TLS1:ECDH-ECDSA-AES256-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:ECDH-ECDSA-AES256-SHA: Secure Renegotiation IS NOT supported
`-TLS1:ECDH-ECDSA-AES256-SHA: Compression: NONE
`-TLS1:ECDH-ECDSA-AES256-SHA: Expansion: NONE
`-TLS1:ECDH-ECDSA-AES256-SHA: SSL-Session:
`-TLS1:ECDH-ECDSA-AES256-SHA:     Protocol  : TLSv1
`-TLS1:ECDH-ECDSA-AES256-SHA:     Cipher    : 0000
`-TLS1:ECDH-ECDSA-AES256-SHA:     Session-ID: 
`-TLS1:ECDH-ECDSA-AES256-SHA:     Session-ID-ctx: 
`-TLS1:ECDH-ECDSA-AES256-SHA:     Master-Key: 
`-TLS1:ECDH-ECDSA-AES256-SHA:     Key-Arg   : None
`-TLS1:ECDH-ECDSA-AES256-SHA:     PSK identity: None
`-TLS1:ECDH-ECDSA-AES256-SHA:     PSK identity hint: None
`-TLS1:ECDH-ECDSA-AES256-SHA:     SRP username: None
`-TLS1:ECDH-ECDSA-AES256-SHA:     Start Time: 1401715140
`-TLS1:ECDH-ECDSA-AES256-SHA:     Timeout   : 7200 (sec)
`-TLS1:ECDH-ECDSA-AES256-SHA:     Verify return code: 0 (ok)
`-TLS1:ECDH-ECDSA-AES256-SHA: ---

`-SSLv2:ECDH-ECDSA-AES256-SHA: unknown option -ssl2
`-SSLv2:ECDH-ECDSA-AES256-SHA: usage: s_client args
`-SSLv2:ECDH-ECDSA-AES256-SHA: 
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -host host     - use -connect instead
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -port port     - use -connect instead
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ECDH-ECDSA-AES256-SHA:                  not specified but cert file is.
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -debug        - extra output
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -msg          - Show protocol messages
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -state        - print the 'ssl' states
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -quiet        - no s_client output
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -psk_identity arg - PSK identity
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -srppass arg      - password for 'user'
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -ssl2         - just use SSLv2
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -ssl3         - just use SSLv3
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -tls1         - just use TLSv1
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -mtu          - set the link layer MTU
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ECDH-ECDSA-AES256-SHA:                  command to see what is available
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ECDH-ECDSA-AES256-SHA:                  for those protocols that support it, where
`-SSLv2:ECDH-ECDSA-AES256-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ECDH-ECDSA-AES256-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ECDH-ECDSA-AES256-SHA:                  are supported.
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -rand file:file:...
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -status           - request certificate status from server
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:ECDH-ECDSA-AES256-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ECDH-ECDSA-AES256-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:ECDH-ECDSA-AES256-SHA: 140679207048872:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ECDH-ECDSA-AES256-SHA: 140679207048872:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ECDH-ECDSA-AES256-SHA: CONNECTED(00000003)
`-SSLv3:ECDH-ECDSA-AES256-SHA: ---
`-SSLv3:ECDH-ECDSA-AES256-SHA: no peer certificate available
`-SSLv3:ECDH-ECDSA-AES256-SHA: ---
`-SSLv3:ECDH-ECDSA-AES256-SHA: No client certificate CA names sent
`-SSLv3:ECDH-ECDSA-AES256-SHA: ---
`-SSLv3:ECDH-ECDSA-AES256-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ECDH-ECDSA-AES256-SHA: ---
`-SSLv3:ECDH-ECDSA-AES256-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:ECDH-ECDSA-AES256-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:ECDH-ECDSA-AES256-SHA: Compression: NONE
`-SSLv3:ECDH-ECDSA-AES256-SHA: Expansion: NONE
`-SSLv3:ECDH-ECDSA-AES256-SHA: SSL-Session:
`-SSLv3:ECDH-ECDSA-AES256-SHA:     Protocol  : SSLv3
`-SSLv3:ECDH-ECDSA-AES256-SHA:     Cipher    : 0000
`-SSLv3:ECDH-ECDSA-AES256-SHA:     Session-ID: 
`-SSLv3:ECDH-ECDSA-AES256-SHA:     Session-ID-ctx: 
`-SSLv3:ECDH-ECDSA-AES256-SHA:     Master-Key: 
`-SSLv3:ECDH-ECDSA-AES256-SHA:     Key-Arg   : None
`-SSLv3:ECDH-ECDSA-AES256-SHA:     PSK identity: None
`-SSLv3:ECDH-ECDSA-AES256-SHA:     PSK identity hint: None
`-SSLv3:ECDH-ECDSA-AES256-SHA:     SRP username: None
`-SSLv3:ECDH-ECDSA-AES256-SHA:     Start Time: 1401715141
`-SSLv3:ECDH-ECDSA-AES256-SHA:     Timeout   : 7200 (sec)
`-SSLv3:ECDH-ECDSA-AES256-SHA:     Verify return code: 0 (ok)
`-SSLv3:ECDH-ECDSA-AES256-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:19:01 2014 ECDH-ECDSA-AES256-SHA384
`-TLS1:ECDH-ECDSA-AES256-SHA384: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:ECDH-ECDSA-AES256-SHA384: 140677225723560:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:ECDH-ECDSA-AES256-SHA384: CONNECTED(00000003)
`-TLS1:ECDH-ECDSA-AES256-SHA384: ---
`-TLS1:ECDH-ECDSA-AES256-SHA384: no peer certificate available
`-TLS1:ECDH-ECDSA-AES256-SHA384: ---
`-TLS1:ECDH-ECDSA-AES256-SHA384: No client certificate CA names sent
`-TLS1:ECDH-ECDSA-AES256-SHA384: ---
`-TLS1:ECDH-ECDSA-AES256-SHA384: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:ECDH-ECDSA-AES256-SHA384: ---
`-TLS1:ECDH-ECDSA-AES256-SHA384: New, (NONE), Cipher is (NONE)
`-TLS1:ECDH-ECDSA-AES256-SHA384: Secure Renegotiation IS NOT supported
`-TLS1:ECDH-ECDSA-AES256-SHA384: Compression: NONE
`-TLS1:ECDH-ECDSA-AES256-SHA384: Expansion: NONE
`-TLS1:ECDH-ECDSA-AES256-SHA384: SSL-Session:
`-TLS1:ECDH-ECDSA-AES256-SHA384:     Protocol  : TLSv1
`-TLS1:ECDH-ECDSA-AES256-SHA384:     Cipher    : 0000
`-TLS1:ECDH-ECDSA-AES256-SHA384:     Session-ID: 
`-TLS1:ECDH-ECDSA-AES256-SHA384:     Session-ID-ctx: 
`-TLS1:ECDH-ECDSA-AES256-SHA384:     Master-Key: 
`-TLS1:ECDH-ECDSA-AES256-SHA384:     Key-Arg   : None
`-TLS1:ECDH-ECDSA-AES256-SHA384:     PSK identity: None
`-TLS1:ECDH-ECDSA-AES256-SHA384:     PSK identity hint: None
`-TLS1:ECDH-ECDSA-AES256-SHA384:     SRP username: None
`-TLS1:ECDH-ECDSA-AES256-SHA384:     Start Time: 1401715141
`-TLS1:ECDH-ECDSA-AES256-SHA384:     Timeout   : 7200 (sec)
`-TLS1:ECDH-ECDSA-AES256-SHA384:     Verify return code: 0 (ok)
`-TLS1:ECDH-ECDSA-AES256-SHA384: ---

`-SSLv2:ECDH-ECDSA-AES256-SHA384: unknown option -ssl2
`-SSLv2:ECDH-ECDSA-AES256-SHA384: usage: s_client args
`-SSLv2:ECDH-ECDSA-AES256-SHA384: 
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -host host     - use -connect instead
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -port port     - use -connect instead
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -verify arg   - turn on peer certificate verification
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ECDH-ECDSA-AES256-SHA384:                  not specified but cert file is.
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -pass arg     - private key file pass phrase source
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -showcerts    - show all certificates in the chain
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -debug        - extra output
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -msg          - Show protocol messages
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -nbio_test    - more ssl protocol testing
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -state        - print the 'ssl' states
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -nbio         - Run with non-blocking IO
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -quiet        - no s_client output
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -psk_identity arg - PSK identity
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -srppass arg      - password for 'user'
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -ssl2         - just use SSLv2
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -ssl3         - just use SSLv3
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -tls1_2       - just use TLSv1.2
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -tls1_1       - just use TLSv1.1
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -tls1         - just use TLSv1
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -dtls1        - just use DTLSv1
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -mtu          - set the link layer MTU
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ECDH-ECDSA-AES256-SHA384:                  command to see what is available
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ECDH-ECDSA-AES256-SHA384:                  for those protocols that support it, where
`-SSLv2:ECDH-ECDSA-AES256-SHA384:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ECDH-ECDSA-AES256-SHA384:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ECDH-ECDSA-AES256-SHA384:                  are supported.
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -engine id    - Initialise and use the specified engine
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -rand file:file:...
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -sess_out arg - file to write SSL session to
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -sess_in arg  - file to read SSL session from
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -status           - request certificate status from server
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -keymatexport label   - Export keying material using label
`-SSLv2:ECDH-ECDSA-AES256-SHA384:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ECDH-ECDSA-AES256-SHA384: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:ECDH-ECDSA-AES256-SHA384: 140553643501224:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:ECDH-ECDSA-AES256-SHA384: CONNECTED(00000003)
`-SSLv3:ECDH-ECDSA-AES256-SHA384: ---
`-SSLv3:ECDH-ECDSA-AES256-SHA384: no peer certificate available
`-SSLv3:ECDH-ECDSA-AES256-SHA384: ---
`-SSLv3:ECDH-ECDSA-AES256-SHA384: No client certificate CA names sent
`-SSLv3:ECDH-ECDSA-AES256-SHA384: ---
`-SSLv3:ECDH-ECDSA-AES256-SHA384: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:ECDH-ECDSA-AES256-SHA384: ---
`-SSLv3:ECDH-ECDSA-AES256-SHA384: New, (NONE), Cipher is (NONE)
`-SSLv3:ECDH-ECDSA-AES256-SHA384: Secure Renegotiation IS NOT supported
`-SSLv3:ECDH-ECDSA-AES256-SHA384: Compression: NONE
`-SSLv3:ECDH-ECDSA-AES256-SHA384: Expansion: NONE
`-SSLv3:ECDH-ECDSA-AES256-SHA384: SSL-Session:
`-SSLv3:ECDH-ECDSA-AES256-SHA384:     Protocol  : SSLv3
`-SSLv3:ECDH-ECDSA-AES256-SHA384:     Cipher    : 0000
`-SSLv3:ECDH-ECDSA-AES256-SHA384:     Session-ID: 
`-SSLv3:ECDH-ECDSA-AES256-SHA384:     Session-ID-ctx: 
`-SSLv3:ECDH-ECDSA-AES256-SHA384:     Master-Key: 
`-SSLv3:ECDH-ECDSA-AES256-SHA384:     Key-Arg   : None
`-SSLv3:ECDH-ECDSA-AES256-SHA384:     PSK identity: None
`-SSLv3:ECDH-ECDSA-AES256-SHA384:     PSK identity hint: None
`-SSLv3:ECDH-ECDSA-AES256-SHA384:     SRP username: None
`-SSLv3:ECDH-ECDSA-AES256-SHA384:     Start Time: 1401715142
`-SSLv3:ECDH-ECDSA-AES256-SHA384:     Timeout   : 7200 (sec)
`-SSLv3:ECDH-ECDSA-AES256-SHA384:     Verify return code: 0 (ok)
`-SSLv3:ECDH-ECDSA-AES256-SHA384: ---
------------------------------------------------------------------------
Mon Jun  2 16:19:02 2014 ECDH-ECDSA-DES-CBC3-SHA
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: 139884339488424:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: 139884339488424:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: CONNECTED(00000003)
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: ---
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: no peer certificate available
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: ---
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: No client certificate CA names sent
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: ---
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: ---
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: Secure Renegotiation IS NOT supported
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: Compression: NONE
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: Expansion: NONE
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: SSL-Session:
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA:     Protocol  : TLSv1
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA:     Cipher    : 0000
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA:     Session-ID: 
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA:     Session-ID-ctx: 
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA:     Master-Key: 
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA:     Key-Arg   : None
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA:     PSK identity: None
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA:     PSK identity hint: None
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA:     SRP username: None
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA:     Start Time: 1401715142
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA:     Timeout   : 7200 (sec)
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA:     Verify return code: 0 (ok)
`-TLS1:ECDH-ECDSA-DES-CBC3-SHA: ---

`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA: unknown option -ssl2
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA: usage: s_client args
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA: 
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -host host     - use -connect instead
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -port port     - use -connect instead
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:                  not specified but cert file is.
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -debug        - extra output
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -msg          - Show protocol messages
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -state        - print the 'ssl' states
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -quiet        - no s_client output
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -psk_identity arg - PSK identity
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -srppass arg      - password for 'user'
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -ssl2         - just use SSLv2
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -ssl3         - just use SSLv3
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -tls1         - just use TLSv1
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -mtu          - set the link layer MTU
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:                  command to see what is available
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:                  for those protocols that support it, where
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:                  are supported.
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -rand file:file:...
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -status           - request certificate status from server
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:ECDH-ECDSA-DES-CBC3-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: 139664441005736:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: 139664441005736:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: CONNECTED(00000003)
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: ---
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: no peer certificate available
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: ---
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: No client certificate CA names sent
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: ---
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: ---
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: Compression: NONE
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: Expansion: NONE
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: SSL-Session:
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA:     Protocol  : SSLv3
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA:     Cipher    : 0000
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA:     Session-ID: 
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA:     Session-ID-ctx: 
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA:     Master-Key: 
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA:     Key-Arg   : None
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA:     PSK identity: None
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA:     PSK identity hint: None
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA:     SRP username: None
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA:     Start Time: 1401715143
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA:     Timeout   : 7200 (sec)
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA:     Verify return code: 0 (ok)
`-SSLv3:ECDH-ECDSA-DES-CBC3-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:19:03 2014 ECDH-ECDSA-NULL-SHA
`-TLS1:ECDH-ECDSA-NULL-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:ECDH-ECDSA-NULL-SHA: 140262747625128:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ECDH-ECDSA-NULL-SHA: 140262747625128:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ECDH-ECDSA-NULL-SHA: CONNECTED(00000003)
`-TLS1:ECDH-ECDSA-NULL-SHA: ---
`-TLS1:ECDH-ECDSA-NULL-SHA: no peer certificate available
`-TLS1:ECDH-ECDSA-NULL-SHA: ---
`-TLS1:ECDH-ECDSA-NULL-SHA: No client certificate CA names sent
`-TLS1:ECDH-ECDSA-NULL-SHA: ---
`-TLS1:ECDH-ECDSA-NULL-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ECDH-ECDSA-NULL-SHA: ---
`-TLS1:ECDH-ECDSA-NULL-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:ECDH-ECDSA-NULL-SHA: Secure Renegotiation IS NOT supported
`-TLS1:ECDH-ECDSA-NULL-SHA: Compression: NONE
`-TLS1:ECDH-ECDSA-NULL-SHA: Expansion: NONE
`-TLS1:ECDH-ECDSA-NULL-SHA: SSL-Session:
`-TLS1:ECDH-ECDSA-NULL-SHA:     Protocol  : TLSv1
`-TLS1:ECDH-ECDSA-NULL-SHA:     Cipher    : 0000
`-TLS1:ECDH-ECDSA-NULL-SHA:     Session-ID: 
`-TLS1:ECDH-ECDSA-NULL-SHA:     Session-ID-ctx: 
`-TLS1:ECDH-ECDSA-NULL-SHA:     Master-Key: 
`-TLS1:ECDH-ECDSA-NULL-SHA:     Key-Arg   : None
`-TLS1:ECDH-ECDSA-NULL-SHA:     PSK identity: None
`-TLS1:ECDH-ECDSA-NULL-SHA:     PSK identity hint: None
`-TLS1:ECDH-ECDSA-NULL-SHA:     SRP username: None
`-TLS1:ECDH-ECDSA-NULL-SHA:     Start Time: 1401715143
`-TLS1:ECDH-ECDSA-NULL-SHA:     Timeout   : 7200 (sec)
`-TLS1:ECDH-ECDSA-NULL-SHA:     Verify return code: 0 (ok)
`-TLS1:ECDH-ECDSA-NULL-SHA: ---

`-SSLv2:ECDH-ECDSA-NULL-SHA: unknown option -ssl2
`-SSLv2:ECDH-ECDSA-NULL-SHA: usage: s_client args
`-SSLv2:ECDH-ECDSA-NULL-SHA: 
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -host host     - use -connect instead
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -port port     - use -connect instead
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ECDH-ECDSA-NULL-SHA:                  not specified but cert file is.
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -debug        - extra output
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -msg          - Show protocol messages
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -state        - print the 'ssl' states
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -quiet        - no s_client output
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -psk_identity arg - PSK identity
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -srppass arg      - password for 'user'
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -ssl2         - just use SSLv2
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -ssl3         - just use SSLv3
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -tls1         - just use TLSv1
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -mtu          - set the link layer MTU
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ECDH-ECDSA-NULL-SHA:                  command to see what is available
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ECDH-ECDSA-NULL-SHA:                  for those protocols that support it, where
`-SSLv2:ECDH-ECDSA-NULL-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ECDH-ECDSA-NULL-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ECDH-ECDSA-NULL-SHA:                  are supported.
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -rand file:file:...
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -status           - request certificate status from server
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:ECDH-ECDSA-NULL-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ECDH-ECDSA-NULL-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:ECDH-ECDSA-NULL-SHA: 139891253364392:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ECDH-ECDSA-NULL-SHA: 139891253364392:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ECDH-ECDSA-NULL-SHA: CONNECTED(00000003)
`-SSLv3:ECDH-ECDSA-NULL-SHA: ---
`-SSLv3:ECDH-ECDSA-NULL-SHA: no peer certificate available
`-SSLv3:ECDH-ECDSA-NULL-SHA: ---
`-SSLv3:ECDH-ECDSA-NULL-SHA: No client certificate CA names sent
`-SSLv3:ECDH-ECDSA-NULL-SHA: ---
`-SSLv3:ECDH-ECDSA-NULL-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ECDH-ECDSA-NULL-SHA: ---
`-SSLv3:ECDH-ECDSA-NULL-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:ECDH-ECDSA-NULL-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:ECDH-ECDSA-NULL-SHA: Compression: NONE
`-SSLv3:ECDH-ECDSA-NULL-SHA: Expansion: NONE
`-SSLv3:ECDH-ECDSA-NULL-SHA: SSL-Session:
`-SSLv3:ECDH-ECDSA-NULL-SHA:     Protocol  : SSLv3
`-SSLv3:ECDH-ECDSA-NULL-SHA:     Cipher    : 0000
`-SSLv3:ECDH-ECDSA-NULL-SHA:     Session-ID: 
`-SSLv3:ECDH-ECDSA-NULL-SHA:     Session-ID-ctx: 
`-SSLv3:ECDH-ECDSA-NULL-SHA:     Master-Key: 
`-SSLv3:ECDH-ECDSA-NULL-SHA:     Key-Arg   : None
`-SSLv3:ECDH-ECDSA-NULL-SHA:     PSK identity: None
`-SSLv3:ECDH-ECDSA-NULL-SHA:     PSK identity hint: None
`-SSLv3:ECDH-ECDSA-NULL-SHA:     SRP username: None
`-SSLv3:ECDH-ECDSA-NULL-SHA:     Start Time: 1401715144
`-SSLv3:ECDH-ECDSA-NULL-SHA:     Timeout   : 7200 (sec)
`-SSLv3:ECDH-ECDSA-NULL-SHA:     Verify return code: 0 (ok)
`-SSLv3:ECDH-ECDSA-NULL-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:19:04 2014 ECDH-ECDSA-RC4-SHA
`-TLS1:ECDH-ECDSA-RC4-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:ECDH-ECDSA-RC4-SHA: 140516352759464:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ECDH-ECDSA-RC4-SHA: 140516352759464:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ECDH-ECDSA-RC4-SHA: CONNECTED(00000003)
`-TLS1:ECDH-ECDSA-RC4-SHA: ---
`-TLS1:ECDH-ECDSA-RC4-SHA: no peer certificate available
`-TLS1:ECDH-ECDSA-RC4-SHA: ---
`-TLS1:ECDH-ECDSA-RC4-SHA: No client certificate CA names sent
`-TLS1:ECDH-ECDSA-RC4-SHA: ---
`-TLS1:ECDH-ECDSA-RC4-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ECDH-ECDSA-RC4-SHA: ---
`-TLS1:ECDH-ECDSA-RC4-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:ECDH-ECDSA-RC4-SHA: Secure Renegotiation IS NOT supported
`-TLS1:ECDH-ECDSA-RC4-SHA: Compression: NONE
`-TLS1:ECDH-ECDSA-RC4-SHA: Expansion: NONE
`-TLS1:ECDH-ECDSA-RC4-SHA: SSL-Session:
`-TLS1:ECDH-ECDSA-RC4-SHA:     Protocol  : TLSv1
`-TLS1:ECDH-ECDSA-RC4-SHA:     Cipher    : 0000
`-TLS1:ECDH-ECDSA-RC4-SHA:     Session-ID: 
`-TLS1:ECDH-ECDSA-RC4-SHA:     Session-ID-ctx: 
`-TLS1:ECDH-ECDSA-RC4-SHA:     Master-Key: 
`-TLS1:ECDH-ECDSA-RC4-SHA:     Key-Arg   : None
`-TLS1:ECDH-ECDSA-RC4-SHA:     PSK identity: None
`-TLS1:ECDH-ECDSA-RC4-SHA:     PSK identity hint: None
`-TLS1:ECDH-ECDSA-RC4-SHA:     SRP username: None
`-TLS1:ECDH-ECDSA-RC4-SHA:     Start Time: 1401715145
`-TLS1:ECDH-ECDSA-RC4-SHA:     Timeout   : 7200 (sec)
`-TLS1:ECDH-ECDSA-RC4-SHA:     Verify return code: 0 (ok)
`-TLS1:ECDH-ECDSA-RC4-SHA: ---

`-SSLv2:ECDH-ECDSA-RC4-SHA: unknown option -ssl2
`-SSLv2:ECDH-ECDSA-RC4-SHA: usage: s_client args
`-SSLv2:ECDH-ECDSA-RC4-SHA: 
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -host host     - use -connect instead
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -port port     - use -connect instead
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ECDH-ECDSA-RC4-SHA:                  not specified but cert file is.
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -debug        - extra output
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -msg          - Show protocol messages
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -state        - print the 'ssl' states
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -quiet        - no s_client output
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -psk_identity arg - PSK identity
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -srppass arg      - password for 'user'
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -ssl2         - just use SSLv2
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -ssl3         - just use SSLv3
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -tls1         - just use TLSv1
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -mtu          - set the link layer MTU
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ECDH-ECDSA-RC4-SHA:                  command to see what is available
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ECDH-ECDSA-RC4-SHA:                  for those protocols that support it, where
`-SSLv2:ECDH-ECDSA-RC4-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ECDH-ECDSA-RC4-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ECDH-ECDSA-RC4-SHA:                  are supported.
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -rand file:file:...
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -status           - request certificate status from server
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:ECDH-ECDSA-RC4-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ECDH-ECDSA-RC4-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:ECDH-ECDSA-RC4-SHA: 140285101741736:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ECDH-ECDSA-RC4-SHA: 140285101741736:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ECDH-ECDSA-RC4-SHA: CONNECTED(00000003)
`-SSLv3:ECDH-ECDSA-RC4-SHA: ---
`-SSLv3:ECDH-ECDSA-RC4-SHA: no peer certificate available
`-SSLv3:ECDH-ECDSA-RC4-SHA: ---
`-SSLv3:ECDH-ECDSA-RC4-SHA: No client certificate CA names sent
`-SSLv3:ECDH-ECDSA-RC4-SHA: ---
`-SSLv3:ECDH-ECDSA-RC4-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ECDH-ECDSA-RC4-SHA: ---
`-SSLv3:ECDH-ECDSA-RC4-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:ECDH-ECDSA-RC4-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:ECDH-ECDSA-RC4-SHA: Compression: NONE
`-SSLv3:ECDH-ECDSA-RC4-SHA: Expansion: NONE
`-SSLv3:ECDH-ECDSA-RC4-SHA: SSL-Session:
`-SSLv3:ECDH-ECDSA-RC4-SHA:     Protocol  : SSLv3
`-SSLv3:ECDH-ECDSA-RC4-SHA:     Cipher    : 0000
`-SSLv3:ECDH-ECDSA-RC4-SHA:     Session-ID: 
`-SSLv3:ECDH-ECDSA-RC4-SHA:     Session-ID-ctx: 
`-SSLv3:ECDH-ECDSA-RC4-SHA:     Master-Key: 
`-SSLv3:ECDH-ECDSA-RC4-SHA:     Key-Arg   : None
`-SSLv3:ECDH-ECDSA-RC4-SHA:     PSK identity: None
`-SSLv3:ECDH-ECDSA-RC4-SHA:     PSK identity hint: None
`-SSLv3:ECDH-ECDSA-RC4-SHA:     SRP username: None
`-SSLv3:ECDH-ECDSA-RC4-SHA:     Start Time: 1401715145
`-SSLv3:ECDH-ECDSA-RC4-SHA:     Timeout   : 7200 (sec)
`-SSLv3:ECDH-ECDSA-RC4-SHA:     Verify return code: 0 (ok)
`-SSLv3:ECDH-ECDSA-RC4-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:19:05 2014 ECDH-RSA-AES128-GCM-SHA256
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: 139903797069480:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: CONNECTED(00000003)
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: ---
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: no peer certificate available
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: ---
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: No client certificate CA names sent
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: ---
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: ---
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: New, (NONE), Cipher is (NONE)
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: Secure Renegotiation IS NOT supported
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: Compression: NONE
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: Expansion: NONE
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: SSL-Session:
`-TLS1:ECDH-RSA-AES128-GCM-SHA256:     Protocol  : TLSv1
`-TLS1:ECDH-RSA-AES128-GCM-SHA256:     Cipher    : 0000
`-TLS1:ECDH-RSA-AES128-GCM-SHA256:     Session-ID: 
`-TLS1:ECDH-RSA-AES128-GCM-SHA256:     Session-ID-ctx: 
`-TLS1:ECDH-RSA-AES128-GCM-SHA256:     Master-Key: 
`-TLS1:ECDH-RSA-AES128-GCM-SHA256:     Key-Arg   : None
`-TLS1:ECDH-RSA-AES128-GCM-SHA256:     PSK identity: None
`-TLS1:ECDH-RSA-AES128-GCM-SHA256:     PSK identity hint: None
`-TLS1:ECDH-RSA-AES128-GCM-SHA256:     SRP username: None
`-TLS1:ECDH-RSA-AES128-GCM-SHA256:     Start Time: 1401715146
`-TLS1:ECDH-RSA-AES128-GCM-SHA256:     Timeout   : 7200 (sec)
`-TLS1:ECDH-RSA-AES128-GCM-SHA256:     Verify return code: 0 (ok)
`-TLS1:ECDH-RSA-AES128-GCM-SHA256: ---

`-SSLv2:ECDH-RSA-AES128-GCM-SHA256: unknown option -ssl2
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256: usage: s_client args
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256: 
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -host host     - use -connect instead
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -port port     - use -connect instead
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -verify arg   - turn on peer certificate verification
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:                  not specified but cert file is.
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -pass arg     - private key file pass phrase source
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -showcerts    - show all certificates in the chain
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -debug        - extra output
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -msg          - Show protocol messages
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -nbio_test    - more ssl protocol testing
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -state        - print the 'ssl' states
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -nbio         - Run with non-blocking IO
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -quiet        - no s_client output
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -psk_identity arg - PSK identity
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -srppass arg      - password for 'user'
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -ssl2         - just use SSLv2
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -ssl3         - just use SSLv3
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -tls1_2       - just use TLSv1.2
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -tls1_1       - just use TLSv1.1
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -tls1         - just use TLSv1
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -dtls1        - just use DTLSv1
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -mtu          - set the link layer MTU
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:                  command to see what is available
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:                  for those protocols that support it, where
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:                  are supported.
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -engine id    - Initialise and use the specified engine
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -rand file:file:...
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -sess_out arg - file to write SSL session to
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -sess_in arg  - file to read SSL session from
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -status           - request certificate status from server
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -keymatexport label   - Export keying material using label
`-SSLv2:ECDH-RSA-AES128-GCM-SHA256:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: 140267024615080:error:140830B5:SSL routines:SSL3_CLIENT_HELLO:no ciphers available:s3_clnt.c:754:
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: CONNECTED(00000003)
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: ---
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: no peer certificate available
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: ---
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: No client certificate CA names sent
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: ---
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: SSL handshake has read 0 bytes and written 0 bytes
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: ---
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: New, (NONE), Cipher is (NONE)
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: Secure Renegotiation IS NOT supported
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: Compression: NONE
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: Expansion: NONE
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: SSL-Session:
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256:     Protocol  : SSLv3
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256:     Cipher    : 0000
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256:     Session-ID: 
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256:     Session-ID-ctx: 
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256:     Master-Key: 
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256:     Key-Arg   : None
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256:     PSK identity: None
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256:     PSK identity hint: None
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256:     SRP username: None
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256:     Start Time: 1401715146
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256:     Timeout   : 7200 (sec)
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256:     Verify return code: 0 (ok)
`-SSLv3:ECDH-RSA-AES128-GCM-SHA256: ---
------------------------------------------------------------------------
Mon Jun  2 16:19:06 2014 ECDH-RSA-AES128-SHA
`-TLS1:ECDH-RSA-AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-TLS1:ECDH-RSA-AES128-SHA: 140487680415400:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-TLS1:ECDH-RSA-AES128-SHA: 140487680415400:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-TLS1:ECDH-RSA-AES128-SHA: CONNECTED(00000003)
`-TLS1:ECDH-RSA-AES128-SHA: ---
`-TLS1:ECDH-RSA-AES128-SHA: no peer certificate available
`-TLS1:ECDH-RSA-AES128-SHA: ---
`-TLS1:ECDH-RSA-AES128-SHA: No client certificate CA names sent
`-TLS1:ECDH-RSA-AES128-SHA: ---
`-TLS1:ECDH-RSA-AES128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-TLS1:ECDH-RSA-AES128-SHA: ---
`-TLS1:ECDH-RSA-AES128-SHA: New, (NONE), Cipher is (NONE)
`-TLS1:ECDH-RSA-AES128-SHA: Secure Renegotiation IS NOT supported
`-TLS1:ECDH-RSA-AES128-SHA: Compression: NONE
`-TLS1:ECDH-RSA-AES128-SHA: Expansion: NONE
`-TLS1:ECDH-RSA-AES128-SHA: SSL-Session:
`-TLS1:ECDH-RSA-AES128-SHA:     Protocol  : TLSv1
`-TLS1:ECDH-RSA-AES128-SHA:     Cipher    : 0000
`-TLS1:ECDH-RSA-AES128-SHA:     Session-ID: 
`-TLS1:ECDH-RSA-AES128-SHA:     Session-ID-ctx: 
`-TLS1:ECDH-RSA-AES128-SHA:     Master-Key: 
`-TLS1:ECDH-RSA-AES128-SHA:     Key-Arg   : None
`-TLS1:ECDH-RSA-AES128-SHA:     PSK identity: None
`-TLS1:ECDH-RSA-AES128-SHA:     PSK identity hint: None
`-TLS1:ECDH-RSA-AES128-SHA:     SRP username: None
`-TLS1:ECDH-RSA-AES128-SHA:     Start Time: 1401715147
`-TLS1:ECDH-RSA-AES128-SHA:     Timeout   : 7200 (sec)
`-TLS1:ECDH-RSA-AES128-SHA:     Verify return code: 0 (ok)
`-TLS1:ECDH-RSA-AES128-SHA: ---

`-SSLv2:ECDH-RSA-AES128-SHA: unknown option -ssl2
`-SSLv2:ECDH-RSA-AES128-SHA: usage: s_client args
`-SSLv2:ECDH-RSA-AES128-SHA: 
`-SSLv2:ECDH-RSA-AES128-SHA:  -host host     - use -connect instead
`-SSLv2:ECDH-RSA-AES128-SHA:  -port port     - use -connect instead
`-SSLv2:ECDH-RSA-AES128-SHA:  -connect host:port - who to connect to (default is localhost:4433)
`-SSLv2:ECDH-RSA-AES128-SHA:  -verify arg   - turn on peer certificate verification
`-SSLv2:ECDH-RSA-AES128-SHA:  -cert arg     - certificate file to use, PEM format assumed
`-SSLv2:ECDH-RSA-AES128-SHA:  -certform arg - certificate format (PEM or DER) PEM default
`-SSLv2:ECDH-RSA-AES128-SHA:  -key arg      - Private key file to use, in cert file if
`-SSLv2:ECDH-RSA-AES128-SHA:                  not specified but cert file is.
`-SSLv2:ECDH-RSA-AES128-SHA:  -keyform arg  - key format (PEM or DER) PEM default
`-SSLv2:ECDH-RSA-AES128-SHA:  -pass arg     - private key file pass phrase source
`-SSLv2:ECDH-RSA-AES128-SHA:  -CApath arg   - PEM format directory of CA's
`-SSLv2:ECDH-RSA-AES128-SHA:  -CAfile arg   - PEM format file of CA's
`-SSLv2:ECDH-RSA-AES128-SHA:  -reconnect    - Drop and re-make the connection with the same Session-ID
`-SSLv2:ECDH-RSA-AES128-SHA:  -pause        - sleep(1) after each read(2) and write(2) system call
`-SSLv2:ECDH-RSA-AES128-SHA:  -showcerts    - show all certificates in the chain
`-SSLv2:ECDH-RSA-AES128-SHA:  -debug        - extra output
`-SSLv2:ECDH-RSA-AES128-SHA:  -msg          - Show protocol messages
`-SSLv2:ECDH-RSA-AES128-SHA:  -nbio_test    - more ssl protocol testing
`-SSLv2:ECDH-RSA-AES128-SHA:  -state        - print the 'ssl' states
`-SSLv2:ECDH-RSA-AES128-SHA:  -nbio         - Run with non-blocking IO
`-SSLv2:ECDH-RSA-AES128-SHA:  -crlf         - convert LF from terminal into CRLF
`-SSLv2:ECDH-RSA-AES128-SHA:  -quiet        - no s_client output
`-SSLv2:ECDH-RSA-AES128-SHA:  -ign_eof      - ignore input eof (default when -quiet)
`-SSLv2:ECDH-RSA-AES128-SHA:  -no_ign_eof   - don't ignore input eof
`-SSLv2:ECDH-RSA-AES128-SHA:  -psk_identity arg - PSK identity
`-SSLv2:ECDH-RSA-AES128-SHA:  -psk arg      - PSK in hex (without 0x)
`-SSLv2:ECDH-RSA-AES128-SHA:  -srpuser user     - SRP authentification for 'user'
`-SSLv2:ECDH-RSA-AES128-SHA:  -srppass arg      - password for 'user'
`-SSLv2:ECDH-RSA-AES128-SHA:  -srp_lateuser     - SRP username into second ClientHello message
`-SSLv2:ECDH-RSA-AES128-SHA:  -srp_moregroups   - Tolerate other than the known g N values.
`-SSLv2:ECDH-RSA-AES128-SHA:  -srp_strength int - minimal mength in bits for N (default 1024).
`-SSLv2:ECDH-RSA-AES128-SHA:  -ssl2         - just use SSLv2
`-SSLv2:ECDH-RSA-AES128-SHA:  -ssl3         - just use SSLv3
`-SSLv2:ECDH-RSA-AES128-SHA:  -tls1_2       - just use TLSv1.2
`-SSLv2:ECDH-RSA-AES128-SHA:  -tls1_1       - just use TLSv1.1
`-SSLv2:ECDH-RSA-AES128-SHA:  -tls1         - just use TLSv1
`-SSLv2:ECDH-RSA-AES128-SHA:  -dtls1        - just use DTLSv1
`-SSLv2:ECDH-RSA-AES128-SHA:  -mtu          - set the link layer MTU
`-SSLv2:ECDH-RSA-AES128-SHA:  -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that protocol
`-SSLv2:ECDH-RSA-AES128-SHA:  -bugs         - Switch on all SSL implementation bug workarounds
`-SSLv2:ECDH-RSA-AES128-SHA:  -serverpref   - Use server's cipher preferences (only SSLv2)
`-SSLv2:ECDH-RSA-AES128-SHA:  -cipher       - preferred cipher to use, use the 'openssl ciphers'
`-SSLv2:ECDH-RSA-AES128-SHA:                  command to see what is available
`-SSLv2:ECDH-RSA-AES128-SHA:  -starttls prot - use the STARTTLS command before starting TLS
`-SSLv2:ECDH-RSA-AES128-SHA:                  for those protocols that support it, where
`-SSLv2:ECDH-RSA-AES128-SHA:                  'prot' defines which one to assume.  Currently,
`-SSLv2:ECDH-RSA-AES128-SHA:                  only "smtp", "pop3", "imap", "ftp" and "xmpp"
`-SSLv2:ECDH-RSA-AES128-SHA:                  are supported.
`-SSLv2:ECDH-RSA-AES128-SHA:  -engine id    - Initialise and use the specified engine
`-SSLv2:ECDH-RSA-AES128-SHA:  -rand file:file:...
`-SSLv2:ECDH-RSA-AES128-SHA:  -sess_out arg - file to write SSL session to
`-SSLv2:ECDH-RSA-AES128-SHA:  -sess_in arg  - file to read SSL session from
`-SSLv2:ECDH-RSA-AES128-SHA:  -servername host  - Set TLS extension servername in ClientHello
`-SSLv2:ECDH-RSA-AES128-SHA:  -tlsextdebug      - hex dump of all TLS extensions received
`-SSLv2:ECDH-RSA-AES128-SHA:  -status           - request certificate status from server
`-SSLv2:ECDH-RSA-AES128-SHA:  -no_ticket        - disable use of RFC4507bis session tickets
`-SSLv2:ECDH-RSA-AES128-SHA:  -nextprotoneg arg - enable NPN extension, considering named protocols supported (comma-separated list)
`-SSLv2:ECDH-RSA-AES128-SHA:  -legacy_renegotiation - enable use of legacy renegotiation (dangerous)
`-SSLv2:ECDH-RSA-AES128-SHA:  -use_srtp profiles - Offer SRTP key management with a colon-separated profile list
`-SSLv2:ECDH-RSA-AES128-SHA:  -keymatexport label   - Export keying material using label
`-SSLv2:ECDH-RSA-AES128-SHA:  -keymatexportlen len  - Export len bytes of keying material (default 20)

`-SSLv3:ECDH-RSA-AES128-SHA: |S-chain|-<>-127.0.0.1:8008-<><>-134.170.188.84:443-<><>-OK
`-SSLv3:ECDH-RSA-AES128-SHA: 140561220572840:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1258:SSL alert number 40
`-SSLv3:ECDH-RSA-AES128-SHA: 140561220572840:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
`-SSLv3:ECDH-RSA-AES128-SHA: CONNECTED(00000003)
`-SSLv3:ECDH-RSA-AES128-SHA: ---
`-SSLv3:ECDH-RSA-AES128-SHA: no peer certificate available
`-SSLv3:ECDH-RSA-AES128-SHA: ---
`-SSLv3:ECDH-RSA-AES128-SHA: No client certificate CA names sent
`-SSLv3:ECDH-RSA-AES128-SHA: ---
`-SSLv3:ECDH-RSA-AES128-SHA: SSL handshake has read 7 bytes and written 0 bytes
`-SSLv3:ECDH-RSA-AES128-SHA: ---
`-SSLv3:ECDH-RSA-AES128-SHA: New, (NONE), Cipher is (NONE)
`-SSLv3:ECDH-RSA-AES128-SHA: Secure Renegotiation IS NOT supported
`-SSLv3:ECDH-RSA-AES128-SHA: Compression: NONE
`-SSLv3:ECDH-RSA-AES128-SHA: Expansion: NONE
`-SSLv3:ECDH-RSA-AES128-SHA: SSL-Session:
`-SSLv3:ECDH-RSA-AES128-SHA:     Protocol  : SSLv3
`-SSLv3:ECDH-RSA-AES128-SHA:     Cipher    : 0000
`-SSLv3:ECDH-RSA-AES128-SHA:     Session-ID: 
`-SSLv3:ECDH-RSA-AES128-SHA:     Session-ID-ctx: 
`-SSLv3:ECDH-RSA-AES128-SHA:     Master-Key: 
`-SSLv3:ECDH-RSA-AES128-SHA:     Key-Arg   : None
`-SSLv3:ECDH-RSA-AES128-SHA:     PSK identity: None
`-SSLv3:ECDH-RSA-AES128-SHA:     PSK identity hint: None
`-SSLv3:ECDH-RSA-AES128-SHA:     SRP username: None
`-SSLv3:ECDH-RSA-AES128-SHA:     Start Time: 1401715147
`-SSLv3:ECDH-RSA-AES128-SHA:     Timeout   : 7200 (sec)
`-SSLv3:ECDH-RSA-AES128-SHA:     Verify return code: 0 (ok)
`-SSLv3:ECDH-RSA-AES128-SHA: ---
------------------------------------------------------------------------
Mon Jun  2 16:19:07 2014 ECDH-RSA-AES128-SHA256
